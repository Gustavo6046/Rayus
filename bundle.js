(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
/*
 * Geometrical Structures:
 * 
 *  - Point {x, y}
 *  - Line Segment {begin (Point), offset (Point)}
 *  - Ray {begin (Point), angle (Number)}
 *  - Line {begin (Point), dir (Point*)} 
 *     *used as an unit vector
 * 
 */



var opers = {
    point:
    {
        add: function add(a, b) {
            return {
                x: a.x + b.x,
                y: a.y + b.y
            };
        },
        
        sub: function sub(a, b) {
            return {
                x: a.x - b.x,
                y: a.y - b.y
            };
        },
        
        mul: function mul(v, x) {
            if ( (typeof x) == "number" )
                return {
                    x: v.x * x,
                    y: v.y * x
                };
            
            else
                return {
                    x: v.x * x.x,
                    y: v.y * x.y
                };
        },
        
        div: function mul(v, x) {
            if ( (typeof x) == "number" )
                return {
                    x: v.x / x,
                    y: v.y / x
                };
            
            else
                return {
                    x: v.x / x.x,
                    y: v.y / x.y
                };
        },
        
        dot: function dot(a, b) {
            return a.x * b.x + a.y * b.y;
        },
    
        cross: function cross(a, b) {
            return a.x * b.y - a.y * b.x
        },
        
        len: function len(v) {
            return Math.sqrt(opers.point.sqlen(v));
        },
        
        sqlen: function sqlen(v) {
            return Math.pow(v.x, 2) + Math.pow(v.y, 2);
        },
        
        unit: function unit(v) {
            return opers.point.div(v, opers.point.len(v));
        },
        
        fromAngle: function fromAngle(th) {
            return {
                x: Math.cos(th),
                y: Math.sin(th)
            };
        },
        
        inverse: function inverse(p) {
            return {
                x: -p.x,
                y: -p.y
            };
        }
    },
    
    ray: {
        intersectionPos: function intersection(ray, seg) {
            var q = opers.point.sub(ray.begin, seg.begin);
            var r = {
                x: Math.sin(ray.angle),
                y: Math.cos(ray.angle)
            };
            
            var t1 = Math.abs(opers.point.cross(seg.offset, q)) / opers.point.dot(seg.offset, r);
            var t2 = opers.point.dot(q, r) / opers.point.dot(seg.offset, r);
            
            if ( t1 >= 0 && 0 <= t2 && t2 <= 1 )
                return t1
                
            else
                return null;
        }
    },
    
    line: {
        normal: function normal(line) {
            var cn = Math.cos(90);
            var sn = Math.sin(90);
            
            return {
                x: line.dir.x * cn - line.dir.y * sn,
                y: line.dir.x * sn + line.dir.y * cn
            };
        },
        
        atPos: function linePos(line, n) {
            return opers.point.add(line.begin, opers.point.mul(opers.point.unit(line.dir), n));
        }
    },
    
    lineSeg: {
        slide: function slide(seg, vel, camPos) {
            var res = opers.point.mul(opers.point.unit(opers.point.sub(seg.offset, seg.begin)), opers.point.len(vel));
            
            if ( opers.point.dot(res, vel) < 0 )
                res = opers.point.inverse(res);
            
            // var n = opers.lineSeg.normalTo(seg, camPos);
            
            return res;
        },
        
        corner: function corner(seg, pos, radius) {
            let a = radius - opers.point.len(opers.point.sub(pos, seg.begin)) / radius;
            let b = radius - opers.point.len(opers.point.sub(pos, opers.point.add(seg.begin, seg.offset))) / radius;
            
            return Math.max(a, b, 0);
        },
        
        normalTo: function normalTo(seg, point) {
            var normal = opers.line.normal({ begin: seg.begin, dir: opers.point.unit(seg.offset) });
            var normDot = opers.point.dot(normal, opers.point.unit(opers.point.sub(opers.lineSeg.closest(seg, point), point)));
            
            if ( normDot < 0 )
                return opers.point.inverse(normal);
            
            return normal;
        },
        
        split: function split(line, seg) {
            var n = opers.line.normal(line);
            var sgend = opers.point.add(seg.begin, seg.offset);
            
            if ( opers.point.cross(seg.offset, line.dir) == 0 )
                return null;
            
            // p + tr = q + us
            // p + tr for the line segment
            // q + us for the infinite line
            var t = opers.point.cross(opers.point.sub(line.begin, seg.begin), line.dir) / opers.point.cross(seg.offset, line.dir);
            var u = opers.point.cross(opers.point.sub(line.begin, seg.begin), seg.offset) / opers.point.cross(seg.offset, line.dir);
            
            if ( 0 <= t && t <= 1 && u > 0 )
                return opers.point.add(seg.begin, opers.point.mul(seg.offset, t));
                
            else
                return null;
        },
        
        closest: function closest(seg, point) {
            var sq = opers.point.sqlen(seg.offset);
            var atp = opers.point.sub(point, seg.begin);
            var dt = opers.point.dot(atp, seg.offset);
            var t = (dt / sq).clamp(0, 1);
            
            return opers.point.add(seg.begin, opers.point.mul(seg.offset, t));
        },
        
        collides: function collides(seg, point, radius) {
            return opers.point.len(opers.point.sub(point, opers.lineSeg.closest(seg, point))) <= radius;
        },
        
        splitPos: function split(line, seg) {
            var n = opers.line.normal(line);
            var sgend = opers.point.add(seg.begin, seg.offset);
            
            var t1 = opers.point.dot(n, opers.point.sub(seg.begin, line.begin));
            var t2 = opers.point.dot(n, opers.point.sub(sgend, line.begin));
            
            if ( (t1 >= 0) == (t2 >= 0) || opers.point.cross(opers.point.unit(seg.offset), line.dir) == 0 )
                return null;
            
            // p + tr = q + us
            // p + tr for the line segment
            // q + us for the infinite line
            return opers.point.cross(opers.point.sub(line.begin, seg.begin), seg.offset) / opers.point.cross(seg.offset, line.dir);
        },
        
        lineFront: function lineFront(seg1, seg2) {
            var res = Math.sign(opers.lineSeg.pointFront(seg1, seg2.begin) + opers.lineSeg.pointFront(seg1, opers.point.add(seg2.begin, seg2.offset)));
            
            return res;
        },
        
        pointFront: function pointFront(seg, point) {
            var sgend = opers.point.add(seg.begin, seg.offset);
            var res = opers.point.cross(opers.point.sub(point, seg.begin), opers.point.sub(sgend, seg.begin));
            
            res = Math.sign(res);
            
            return res;
        }
    }
};

module.exports = opers;

},{}],2:[function(require,module,exports){
(function (Buffer){

var geom = require('./geometry.js');
var raycaster = require('./raycaster.js');

var images = {
    sprites: {
        sphere: Buffer("ZGF0YTppbWFnZS9wbmc7YmFzZTY0LGlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFJQUFBQUNBQ0FZQUFBRERQbUhMQUFBQUJtSkxSMFFBMHdEVEFOT25BN2J4QUFBQUNYQklXWE1BQUFzVEFBQUxFd0VBbXB3WUFBQUFCM1JKVFVVSDRnUUVGeHNyOFZtbWtRQUFBQjFwVkZoMFEyOXRiV1Z1ZEFBQUFBQUFRM0psWVhSbFpDQjNhWFJvSUVkSlRWQmtMbVVIQUFBZ0FFbEVRVlI0MnUyOWZheW5WM0VtK0ZTZDkxNjN1OXZ1dGpGMk1FME00Y1BnekJBRkVsc2tBbnRKNHF5U0NCTEVUUGdZSEd6VzVBOGlFYVRWU2w1UDFtWkZOb0VKUVpGUUlrR3doU0VUa3VXZlNKbFprbWdSa0IxSERSanZoc1ZzSUI2WUVCdkdIMk8zN2NidC9wMnEyai9xcVhQZWEyT3djYmZkQm43VzllMTc3Ky96UFhXcW5ucnFxVG9TRWZoZXUvM1JILzNSaFp2TjVxSk43eThNOTJjNi9Nd0dQVVZiMjlWYTI5SmxrZFpFRmwyZ3F2a2dSMWhZdUdNRDcwY2N1RmRWYjFQUnIyclR2OS9lMnY3RUpiOTJ5U2UvMTY2VlBOa040QS8vOEE5Ly9QNzc3Ny9reUFNUHZDeDZmN1l1MjZlZWROS1dxQ29nQWxIRkFvVXFBRlVJQk5vVUNrQVhCYUFRRVNnVTBQeGRRejVXVmFGUTZLSVFBSnZlNDV2Zi9PWTk3bjV6YSsxVFcxdmIxNzNoRGYvbXhoOFl3T044KzNlLzkrK3V1UCtiOTcrNjkzN2U5dmIycmxvb05PUUNxK2FYS0tRQklwcUxIZ3BSQVZTeEtMajREYXJnL1lFUXdTSUs4RGxEWXp5WGFob0xBQ3k2QUF0dzc2RjdqMncybTV0VTlhTnZmT01iZitjSEJuQ2Nici83dTc5NzFYMzMzZmQ2ZDMvTzF0WldMZ04zcVloaUVZVTBoVFpBMFlBbVVGRkFrQjZnNWFMS2FtZWpDUVJjZkhxRUVJVWlQVWVEUWlVUXF0RFcwQlNBSzNRUmhBREtFS0lBUkFSSGpoeUorKzY3N3g4Qi9NbWxsMTc2OWg4WXdHTzh2ZnZkNzc3NHJyc09YWDNrL3NQbkwxdGJMUmNQRUN4UUJWcHI2ZWJSb0F1TkFZQTJSUk5GcUdJUkFFMndSQU5hR29BQUVGMXlRV1Y2REVEUkdvQ1ZGNUY4UXVoNFhIb1JrUXd0c25vT2dRRHBJSEQ0OEdFN2ZQandwN2UzdDY5K3d4dmU4TmMvTUlCSGNmdnQzLzd0Sys2KysrN2ZNTE96YTdmS3dwMnRndGJvdW9GY2pDWVFiZGppd29XbUFZaEtMbzQwNklMYzlTSm9FS2ptYzZua29pbzlBVlFoTFRHQkN2TDFwQ0g0ZDVFTUlhcjVmREs4RVBJNWhVYXp1cTUzM25ubnJRRGVleUtHaUJQS0FONyt2Nzc5WFhmZWNlZWJJMkpmZ2pKRmE4STRuUmU2NWJhRkx1bXFSN3pYTkFKQnhYeTY2T0FPMW9CcUl3Z1VLQnEwQ1FKQVU0V2thNEZvTHI2bzV1OUZBRWlHRnloVWZlQ0dBU0RMMkJSWVFoSEt2d2NRbU5mM3JydnVPbVJtNzd2MDBrdi9weDhZd09wMjlkVnZ2K3IyMjI5N201bnRhNnFBNU1YWGxzaTlDVjE4WkN3R2hCNUIwZWllTmQwQnRDMW9vSnZXY3VmTEFIb2lTbU5LUXdHNDJ4Y0EwaVltMEFaSUdnY0FORmtBamZRV0lva1RXdjV0L0U3ejJkRGF3QVhBd3hyQ2UwNEVuUENFR3NBNzN2R09WMy9qRzkvNGcvdVBIRGxidUl1YjVNVlh5UVZwaTBCbHlVVVRJRnJEVnN1ZExDMmdxTDlOZzFIazR3TkFXNVpjeEhMWkFOclNFc1NoMFlVbjZCTVJ0SHhoYUZOSVpFelBrTEEyb254TVBvZXVQRUxkdHpFa01CWGw1NDBBSUlHeWhUdnZ2UE5XRVhucnIvM2FyMzMwKzg0QWZ2TTNmL1A2dSs2NjZ5Vks5NnNpV0RSUmVHc0tsUVpweUpSc1dVYk1IYWhiVzdwcmJYVGg1YnFGc1YreE5FQ2swU2dxMVpQYzh3dDVnYWd3QWdBTlRmajdjVjlCVzdpelpSWHphU1JRcHA0MFdGRU1IaUg1QlRDOHlQanNnWjBZNGJiYmJ2dTdONzNwVFQvMWZXRUFWMTU1NVZWZis5clhybkQzazNMSHRVVHRqZkZiTTk3bjcvUEN0MFZIWE01VXJtRVphQnhvVFJFZzRsOFdMQUlFRWo5VVNqZlJQck1HVVlDUDEwUjdhQXFHbU5WT2x6U09RdjZBakhpdnNneFhYL2RQM05qU01ESUdZVkVnWktGWDJubTk2L3JmYzg4OUR4dzlldlIzSHUrdzhMZ2F3RnZlOHBZYjdyenp6aGZsRHNvRmJuVG5iV0U4MWtZUFFDSm5tV2hmdGFGSjV1OExRWnMydWx0WmNzY0tFckRWeFY4YTB6TlpnVDBobUVTK2hnQ1FCVTBqTXdPZHBKSHlkUnE5U3UzMjBBV0tHS0IwOEFzS1JEUWFqVUpERUJXaUpERUVZbVVHRDhJSHQ5OSsrK2N1dSt5eUYzOVBHY0JWVjEzMXVpOS8rY3Z2ZTJEendKNG1pdGE0V0lOZ1NYRFdKR04yVWJpTnUwMmFvdWt5TWdIbDdnUGpyRURTZGJjbFBZSXVnd0ZzQklkTmNnSEhUbTJUTTFCVXBoR0FMbWdTQStGRDBtZ1dYZjJPYWFZaTZFWDRuSnJoSlZQUW1LOFhDVWdMWnd4Y3NEWUV4SWdLZDk5OTkrR0llUE1sbDF6eTc1LzBCdkMydDczdG1wdHZ2dm5TMWhxZ0RWdExMaXgwaXpFYTBMWkFtL0RpU3lMcUJqVGRvdXNXWGxRbGpjc2RMcG5hWmY2ZTl5dGdOM0FCNC85Z0FibndUWFBSSVEwaU1YYXNyREtCR2UrRDhYNkJSR1M4UnlNcEJIb2VZaEFCc01qRUZxR0lKYUJTbjV2R3NzWUVxelhJZndZaUFuZmNjY2UxbDExMjJXVlBXZ080L1BMTEQzNzk2Ly8xL0dUdEJOSzJrbmlSaGkzbTdWcnNYRnV3QmJyMDJwVkx3d0pBbGlWVE1jWm5hUUtWTFRTdCtOdWdraGNaTFRNQUNVWGJBaVFXWUVsU3A2VXZ6eDBMb0JWeG96RzRmdXlJNmJuUXFrSERZV29vaVZYV0tlQmdLV05oVmhFRE5LS0lvbFdvZUlnUlBBZ1kxcnJjZHR0dG4zN1RtOTUwd1pQS0FONzV6bmN1LzgvblAvK1Z1Ly9iZnp0UUY3MXB4dTdXRW9CbC9rNk92alUwQ0JwUmUrR0FOSXlHSnZQQ3BTZFJOQTBJUVZnQlBwSEVFZ0o2aUZhSXZBQmx2cGNsRVJ3YWlhUEVFZ29FZ2FDc2RpcGpkbVBXVWNXbWdEQVVKZktYWWhTRFJhVUNuQ0tEZXlqakd0VkgxaUxLRUFJelJWd2J4QjEzM1BIUEo1OTg4ck5lODVyWDlHTzlWbnJNMmJ5M3YvMjhnd2NQM25IbjdiY2ZjRE40cHRWd0VjQUZZUUYxUVVRZ05DMWRlMGVFQTk3SXBRZkNBb0tBZU1BakwweEV3Q0lnRVlnUU9Ed3BXZ2xlV0FCOG5JY2pJaDhiWVRQV2VzRGhrQWk0K2JqSTdzamZSY0IwNVpZamNqZUhJd2pZSElHQThYM2s3ejN5T1FJR1EvMCtFR2FJY0xnSDNQbTd5UGNIeTg4aWZDMkJqR3l4aWwwUXdSbG5uSEhnNk5HamQzejR3eDgrNzRRMmdOLzZyZCs2OE9CbkR0NXc2TkNoZldHUkMrOE9NUWZjRWN5eEhRRkk1TytSNUk1QTRKcVhOaEFJQ2JnRERnY2NDUEVFVDJGNUVUMEFxNHRKNHlDZTlnQWNnSVFnU01PRU9SRENSZU5paWMrRmNrZEkvaTA2VmdzVmNBTXNKSmVlcXkyNWZqUTBHcEliRERJZjY0NEl5ZGVvNS9lQVdRQklZKzRBalBjdmQ3UUdpbVVJcDUxMjJyNkl1T0ZESC9yUWhTZWtBVng1NVpVWEgvejBwLy9tbS9kOWN4ZUFYTXpJeTk4bFA2QkVBTjNoNFJBSEFvSndCOExUNXhseTUzc0FTSU9SM0pvSUQwU3ZYUlVJOGZRUUVSQ0pzY0FlZ0V0NkFUT0h1Q0Vrb0JKd3BDZVFDTGc0QWdLREFKYWZ3Y0lSY0VEVzNvUFBINWJ2SVFJR3o0VVdod2h5Y1MyTkx6enk0L0N4SnVrQkFnR3g5RDZBNVhQRFZvYVNqNnR3SU1DRHZBR3dmLy8rWFNMeU54LzYwSWN1UHFFTTRNb3JyN3p3NE44ZC9NdHZIcjUvS3o5UUFKM3ZPZ0xOMDYwYm5iWklvSFAzUUxnRHhCQmlRSUF1TkxsY0Y2RnJGWVFHSWhRaEFRbEZ4Tnc5K2J1ODJHb1pNa1FBRXdFczROQmNHRXNYcnVGMEE1N2VCWFFiTG1PaHdTK3pRRWo5bUx0ZkdLYWNxVndnalRpTk40WUJDQjl2c0xuVFF4QmhnQUZpbGdibURndUgwenVzbG40VkhnVDc5dTNiRXBHL1BGYWU0REVid0wrOTh0K2VkL0Rnd1k5OTg4amhMWXpkNDRBQ0VZN3VnazdyMXZUaWFTQW9ONW4wdURsNE1SbVR3d0R2ZVVIRW9IVDF2TlJ3TXlJQXdBeHdvNkdJd0VIY1FBd0JrZm1hQW1SVTBUUkh2bWJlM3dFeExoS0dGOGpMUCtOMzBPMkxCSnhoS0hlL3cyVGlqN0VaUWhDOTdpUDh1ekFFQmN3RUx1bVp6UHU0TmhNMDdzRHQyTGR2M3hhQWp4MExUUENZRE9BZDczakg4dGtiUG52OW9VT0hkc0VCRjhETG5ackRXUHpRS0dBVzhPZ1FEeTVqUUhpeFZJUVhQWU40UU9FaVVFMXZZRjdnanp0UDhzN2xvb1dlQlN2WEhlWjVQMk9NRDRJNVJGb05Gemtka1NFY3lNQXlkM0NrdGNHNlFDSXhpd0d3OGhJU0E1TTRnREJMVElJWkJnQkxNc2hzaGhLemhBMWdlREVmbjZVVFU4d01iUmFVV0ozRy92MzdkN243OVIvNXlFZVdKOHdBUG4zdzRGZHV2KzMyZlFKQmgyUzhKbWlEeHZnNW9MbVRIQkEwT0hLM1pyeE9UK3h1RU10ZDZBVzB3bUV1ZExGenArV0N5M0RKaHNRRVlZbnU2c0s1Q0NRQTExVklvWkdaY0tIcFV5eFl3TGRoQXJuVEplQzgvRGF3akVIcTlWWTdQU0lYR3BnTG1uOFRXR1FJY0djT0VVQ0V3VmIzQzNvOEdWNWlmdVoxVlZINDMybW5uYmJ2L3Z2di84b1RZZ0QvK2wrLzV1QS9mZTFyQnlCcDBmQk1kY0l6UFhQTE41M3UxVEtHSWk5VXVUdmh6Z25wZ0F0Y0V3OVdUdXdocS95S3dOQ1pVWGdDT1lCeDF5UVhpcDRFM08wbzBEaHlCQnRwWU4wbklzR21NMFFNWEJHWWp3MkhsTHNQZ1Z0a1psQVdKV200RnNiSFRHQVhjSmFXWmJqM0JLbVpsU1FJelBodkxqQkxvM0ZIWmd3TVEyQjFzdUNCQ0hER0dXY2MrTUFIUG5Ed2NUV0F5OTUwMlRVMy9YLy83L251bm12VEFvSk9oS3U1MHlQZzNwRWhqVHRFS2liV0tpdlJ2OElrUnFxWXU4YnlNYng0Z1V6RmlpU3A5TkJyb1ppcnU4MjBEaENZSnk1UlNNYmR5dGdBaENWM1gveUxJRE9VeXYvVEpSdlRSODhGSHlGR0FMSFZUaVdBNUdJRjd4c29JMCszNzRnVnR1ajVuQlZHUkNEaXVXSEMwdE9zTW9WRW1TdWhDVFdJWjU1NTV2blhYSFBOTlkrTEFiejFyVzk5M1gvNnYvN1RwZkJBMDR5WmNNd0ZsWTZRUlB3SWdjSXJ5OHBVaU1ESjNlRk1oeUM1MEI3S3NMR1RGREhwQTVFWEVTTW1LL0tjQ3g2eWVxWGN5V0JlYnU0SXQ4a2xtS1hyZDV2aHhRQVlGNWtBTTBMNFhobXJoK2V3OUhJeDhZS0wwY2ZZRGh6aE5HaGphSXVvakVBeU5lVy9SNG9MaDdobnlJZ0ptczB3U2FPUkx1YjNNODQ0NDlMcnJydnVkY2ZkQUE0ZS9NejdvQW5VT2dtZTlBVHAzZ1o1TXhhTEpVOTZDL3FJMWE3aHY0M1dEM0IzSkluRTdRMm4yeHc3VEp5N0FzeXpRY2JQbVMzUUM4SGducWxqeHQ3Y3lWSVlRRmJJWGpMakNCTXVWS1Y1eVM5QVpHUUkrYmxxa1dMbDdnTVNBRmF4ZllTWkVJWkpNTDIwdko4bEJ2SWl1U3d5L1IzZXhXR1dIcUhYYzdvL0pFVVVrZmNkVndONDVTdGZlY09kZDk2MlI3bVFSV0Ftb0N0REFNUWxVVDkzdXE3Y0t0eGg0bm1SS2l3QVVCSTM2NFdXeXIwOXNLTld3bHgrb0hnYVRZaEFWdGxDZ3M1TTRUSnp6emV0Z1V6ZmZQMGNrbUROTTBmM2N0M0VLc0kwcjRpZ1d1endHSWpmSXhmVXpQTStLeERuNGJBd2NnQzVxRUp5b1RJRCtEUks0L3NySXdBNUR5RmVpQ29teWNRRCsvZnYzM1BOTmRmY2NGd000UExMTDcvcTg1Ly8vSXNNcEdVSnhMSVVrMHVZR2d5bVdUN2RiektCdVp1TG9zVndzNG04allzRXhta2dZT1R0QThXWHozaWF1SUMvandtbXlvTVVPZVNSb0hQUXRUSEk1bndPajFXNkZ0QUEwMG51WnZlSk04b0RPZG5Cb3BrSHd6Z1hFRDROSm5hOG4ybGNDUm9GSGdXV0U4TjRuMGJzbnJqRU1PbmpyQ3ZZTk9JVmFmVFVwejcxUmRkZWUrMVZ4OXdBRGg0OGVFWHZtY09iY1gyTExBSGczb0h1dzJyZE5Ra2MxWXhyc2VMWFlhUG80OXpwaUV6N0pQSURlKzA2dXRUaGFqMFlQMzNtM2tFd1d2ZlJ1YlB6T1lFd3pEb0RYOU5scG93UnlRMDRZKzE2MFFDSHU0Mkw3Y3pqblVXbU1JYTRZamVLYWw0dGZnYnpHQUExdzZGQnhKS3VacUVyU0IzYmlwREsxMHRleFZIWEV0eUVOTmdWTHRqZTNyN2ltQnJBSzE3eGl1dnZ2T3V1azFReGRtb3VVdEsyU09KdllFRVBBR3JEZlJmQUFaSU5oQ3M2MFQ1WUdjdGtLM0VrQmtaSWNvYjdLeGRBTWl0M0JFUmw3R3dwWGw1WWJjUWtqV1lzam9FNXpHSmtLN1ZBcG9vSWcySkZPb1V3dlBCem9JeEhJQ2F6bUJSTWJSM3B4VmF2YTJNbnI3d0JnYUxGTkdpNHd5d3pDTy96L211Z0s1WXNxWHZQN3hKWUZUVWhJamoxMUZOUCtzQUhQbkQ5TVRHQXQ3emxMYS8rekdjKzh4SUpSL2NzNHNBTkthUE5TbDhuQ0JSeTYxVnhDODlVQ2N5N3d4MHVuaVdZc1hzemZjb0NJVjBnNCtQQU9USGxVazRnTlJtL21mYURHWWs5aUF3eUl5RVZtWk1YNXZCWTc5Z0VkVW5heE1yRE9ZdFdkUHVyT29IcittZW5JVnU2QklZaWo4aEZZNmw2OEFzK2kxK1RTQ0wrQWFuaXRkR3crbW13c2FsY3lEeGFob1FDaHdMZ3pEUFBmTWtIUC9qQlZ6OW1BL2kvYjd6eER5b2RVa1o3cndJNjk3eHFSV29kSEx4bFZnMnJ3c2xNNEtmN1k2d1BDYVpmbU82WnlCa0ZmTVJRcXkzaENKT3NBR0xtMjVuU0NkMTJBYmdaSDR0NmxRSlg0ak1rbENVaFdVWmZZUTZ4MkZtMXEvS3hZV1FUdmlvY1ZYbTZoQVloRG8yQWtReEx4bkpxQ1hhbWkxV2l0dkU2NXA0TEw3RVRWN2l4bURXNUFoUFM1R25ZZi9DWURPQ05iM3pqVlYvKzBwZk9UdmRsM0R1T05lTmJwSWpBazlIakRoVm4zR1IrUDNodlJKSSt4bUpJeFVWSjNsNWkxaE1nNlZLOVhESlRyM1FhTmxQRlpJUXkxcnVSa01IY09TaksxZ2RRY3hHSTZ5QlhFcHM0VTFrZitLVFlUR0JpaFRYWGJ6R3pDYXQ0N0pncEhERktwL2NwRUd0Q1pqSjgxQk1Lb0NhRk1tbG1NTVVjQUpBWmwxbVdzMzJ0WDNBQVBUbVJwenpsS1dkL0owRDRiUTNnaGh0dWVGdm5SVTVDd2t0cE1XbmJvR3NEQlJJWVhDNGtHaGZEeUxERmNPOEk1TTVDeFQ5bUI4WE9yMVUveGVveTVYSjRZZ21wKzFJSE1OTE5GYmlUV0ZVSDU4NVV4dUhjUk90NFg5S3NGWEF0b1luN0FGOG9OVUVpeHZ4Y0JJVE80byt2S0dVaGtJdnc0ZmFOU3FGWWc4NTZ2WTdoU1lMRUUzcEh1UEM1WXBKVE1qRUdJamRZaGNIVzJ0dStLd040L2V0Zi82NS8rcWV2N1ZNRzRteWUxb3c1RG5oM3hxamN1VkhHNFpodlJ2cHdteVB0Q3pEOThheThSVlhnY25jWVJSVzU0WHlRTDdGaURPdmlabURGQUlHQWpucjdLRGVubjBqdlVFYmdSVmpGenRKcmVaT0lZWWdEU0ZvcWZTTjhaQXBHaGlFN1VGZFl3cE1OckRyRXVzd3RWUnV3dW4rTURHTmRidmJ3cktrTVdaa3dTMGpNbGFYa3lyeFdxaVp6b0dPa3hhZnQzNy92Mm11dmZkZWpOb0FiUDNmam0rRXhrYjE3TGpxRVc1OS84WlcrM1gyeXdvaE1CV05xN2FpWlNLQWlQcndDZkRyWmRKRjg0alVKaFBJQ1dTQVJaaUpCQTdYS3dkZmNPbEoybHN3YWR1d3d5SFMxbVFKeVI3SDY2STZkSmRrcTlJVFFMcE92QjFJeU5qV0lSZm1tNnkrUlIxUXFKeXZQNG9samtnUGkvYXd5aWd4cjVrbHdGU1lvdGpDcmhsV0NMd05pa0JWRDl3ekg1ZzRSZWZPak1vQkxMcm5raXYveVQvOWxYMGh3cDROQ0pxUHJZL1dQLzBYWmdVU0tPSWhFYWU1WnhDbmFsM0t2aXI5ZU1aQzFBU2ErUSszam80R0M5L1ZTK3ZBaVNub1VpZHJCTVFvK0dRSUlBTjEzOU8xSC9jMHFXM0NJVjRLSkFleXFvQTFpamtvN3JVUWpGbE5BNGdFeEhaWEcwdmlMVkhaUVhIOVJSemFGSVZiMUVFc0YwUkRMekhoZll0a2dnWlcwOGlvTDhVQkVuK2tuMmNqOTZRV3VlTVFHOFBuUGYvNDNuQW82NTV2SzlDSUxJell5Z2RxWm5TbGdTcThFR1NJUVNLeEFEQkJDc2lTU1Q2QURIU1ZWS1FQaDRxWkl3eWord0NDR2l1Y0hBVmpWNzMxY2JCODBMVmlqanlKd2ltTndUOWVxU3M5Um1zQ1kyVW1zR0Vqb1dGQW5FMWxBT0ZaTW9ZdXR5c2xVTEhtV2ZrTmtFRVFDN3ZnVkp0aFowNGhWSm1BRGZBOStwRjZIaGxPdmFUMUJJU2g2S1NheHUvL0dJektBWC8vMVg3LzRDMS80d3Rsd1FNM25QZHlIVW0wVVlVWnZXMlBzVnU2WGZGemw5RkZsWEdPdVRYZnVBOWdGMHpmV0VNcnRPNHNjQnFMZjJpV1VXV1BGeklXbkZzRW5pQnQ0bEVvYnJCWS93NUJRVHpiSjFPQUNUOTZobE1FK1hleEFwWmgxLzBycExOTmVHem04MFJzYXpLZ1Y4Rng4bWR6a01DSm5XTm5CbnJxUS9wM01vRWVDd1I1R2JzU0p0OG9BNmJrb1dEM3R0TlBPL3VBSHI3djRPeHJBbDc3MDVhdVRURW5PVDJtbFhzVVFCbjQzaDlEQ0lwTFk2ZWhqY1lOMStLd0ZHM2VMSVl5R1JRRkZwV2lHb2p0amhvYUIybVBkUDBPbE1COHFqcDNMVjNGY1pnYUFLU0d2K08raXBLM1hhaU9DTnA4TGdraFBOUVVlTWRoT0d3b2dHWVlsSy8xR3NQS1lJcEVLU1ZQRDRGWFZjK3hnS3l1amNVckZwckd6ZkUzczQyNVFZak4zR2FBM3N4c0hqQ3FrNkFoM1BQREFrYXUvb3dGODduTTNuTytqdHU1RFFwVVlJRWErVEJVM0lDbHZzdkwzSmNZWk9vQ1loWU1xNHhhVnkvSnhwVll1VTBJRks3a1hLSi95d1lFN1JaN3BoaXZuOTVVU3dFZmVQK3NWczVTYnFwTVNyODZkVm5aVWJkeFJ6S0JMZXFNVlJWMEdhVzRzNVpheHJlb0dnU0VOYzZrMGVsVm1waXd1S3BZN2kwTm1vM3p0bExzbDBNc1VlS0IrS2V4bGtPZ3NuMU5aSFpaMHdLcjh2R3Q3MS9uZjFnQmU4NXJYWEhYUFBmZTBOU0ZpVEVmZ0RnM0FlaTcwU08rcXVjTWNqcDRjdFRCZUpTdEJ0WFZ3MGNqOFdzWkdESmZQMGlpTEw0TmRZOGFBVmRQSGJLdjJJZDR3MXV4VHdNUEZMdU9RbFlFVW1WSmlDbDl4N1Z3TW8yQVRMQ0lMc2NVSWZTNElNejVEREdCWjJBRWlxMFZLalo4VUZ2R2lwRzJFS3BkSy9RTGlCTnFHVkJLdmpNWFFFU1owK1dsNDVwa0tUQXpBeDVrUElYNEpVazQ2K2VUMmdULys0NnNlMWdDKzlBLy84UHJhd3AzZU95MWFaeFVybUd2S0tzLzJuczJQWG14UVdyK2F3b1pHa0lzWUdUb0dSZXNGdkZhN1JtTDB4c1VLMVljN0w3aVBkaXRVYzBpVzVPQmEydnoxODB4UE1NSkFsRG9RTTMzMDJhWTFhd2R6cHhZNFRTQkkwQmd6dFUzbEVURUo2V3hoZlNBc1E0RkhFVUtsSzdSaGtHVUVneld0cGhPbk5NeXdvb2t4OUlaVkJ5aXVwSXRURUR2TDNXWUp3bzdhNXZVUGF3QTNmZkdMenhtUjF2b2dkV0NwOXpNNGh5dk5uZStZcWw2anhLL29TaE1XajJ3Q1NZZFFPTHJhaWVVVlFram5ybmFzczlvMUtvMXBnTUlSYmlNTmdwSTY1azZLVmJhQUdIekVrRmFUZmhvY0JOUFI0WWxXNzJIa1E3SENKSVBmd0lyeU5lNTRIeXhwdUZEM1p4UFV5Y3JySUZGK2VCV0xrczUyWDNFVG96aTF3aUxFVFc0eCtKQW9kWmIxalA5RHJlV1U2UmwyYmU5NnpyYzBnRi85MVYrOTRvRUhIcEFkZjdCMWpSZEFaME1HRno5MWRuMDBWOGFHc3FvUmt6T0VEQjU5eUxkRzhHUHFhRXpzcy9DQm1NOGhzaE9Fb1RJR254eEVlQmxkVmdzTHBPMFFjS3BQVHFIQW4wK09vSEo4SjdXOGsrdVg3QVphbFdXOVZFRXhHVU9qNjdmcS9CbmN2cWZDWjZSNXZIODFNUkpYdVBoNFBaVFUzV05ILzJKdXBxb3labk5LWmtuQ2pNWFM2Q3JOcmJWZ3FOamUzcGIzdi8vOVZ6ekVBTDc2MWEvc0tCM210YkhSMzFheUx4T2ZZSVNwWHhWUEZKUG9LSUFybGZlVEpTeUFpTkxjTTBnYnU0cXdtcHpCZnN2SklxNkFVM0l6c3NvU0txd1VOcGhTS3NBSEVDcDNMMVhqRjJLQmxjZ0NGR1dXWGtES1RhOFZSVkd5OUNKa2ZFckh3aEdocXpvL2hpeStzSUdUdmk1QVBOeTBaMkF5Vy9jTU1KTWdHNW5wWktmZTBaa0tjcWZiTEpqRmltYTJvZUFDamg0OSt1cUhHTUIvL3M5ZjJkRm1OTnEyVU5XNWJKdFNVNVNBS3drS0d5cFk0d0pXS2RkSGFkU0hNRFQvb0JsL2k0V2pvdGJYVmJSS1BTUEhzUlUzVUVndlZuUmZ4blJCdFcxRzZmOHdha01KdEVwc0lxd2VGdnBlZFNRWGdLdzAwc0xoS213dXFjOGpFSmNFWkw2cSt2SDVoRTBmYThVd3pGZWJJOTIrc1Rjd3pBZWg1V3loSDZDMEpPSCtZTDRBN0ZyR1RFTlhZaE80b2JNTzBSazJ1M1ZFR0piV3p0dGhBSmYvRDVmLytCMTMzTEhyd1NrQ2pZbkNUNS94UFJFVTB3MUFRMHZ4UkJlZW1BQ2ovZG9KMGpKTnNpRHRXa1drSWJQMVlSRERoUlJ3eEZvZ0dhTVU3V3REQ0VCREtKeU1rWm9WYXhkZThuRWFoTEJLdHlyRGVwV21Zaldwd1FOS3BlN2tEUGlaMXVvaHZzZmFyYk8vZElMTklhQmxBY3pIUzh6YWlLbU4xdk9Td1kxU3IwLytKQUVnYXhTbEkvQkFOK0lETDljZm8zblZMSER5N3QyN3JyMzIyaDhmQnZDTi8vcU5TNzVscFNBTW5vRWZnVURmS0J3OVV4SlA5Nk1EQzFoV3BqQVhFdUVKN3JTU2d5eDlTdlhWTXdOd1Q5ZFpjWHd1SGtaS1pKWFB5VW9kckQ2YU9rcHVQWXluWkNDZW5ta3FlSVVHSmF4RHlNNDVQY0dXOGRIQmc4bDVFS3lOT0E1Tm5nRFlLZWdZY1g3bTZ6V2tRcmxJZUFqeGhGRWlockdQY0NVc3RTaVdqL2huUnhrWjFDY0dYUHFnNG5XbGpxclVzemJhQXc4OGNNazBnRzk4NDJYZnJtS2NLakNIYWs5QVpUSGtXdDA3Qk1ZTFIvN1ppZ1BYNUFjMlBubDRGbDZ5ZzV2eXJ0V0hLVUtvd0phTnJoOWh0ekZKSFM4dVhhYVlvOUkyeUE0UG9DYkZRKzNvL0EwYXI2KzAreVdwbXU2VzRhTHkvd0hNaE9MV1dCRk1KU0RaMlRBUzlIaE80QmREdUZMekExYXQ1MUhFRW1ZdElIem9JUUFiMDBhOGhtd1lpMmM5Vy9MTWZKQkIyZGpTaVJHQUhnYnJnYzFtODdKaEFGLy8rdGVmL1hETGIrWnNhU0lXOEtyOUVYVDRUQU1uK0tpZnM1aERlRGpaT1FJeXR6aysxWkJqWG9KQ2tmSUtza0xRQ0Q1VFZKNDdXVDhaYnJ5a1lhdjZQME9SK0dUN1JvZmFTQm1GN2pYckEvWFVUcy9sRktUT1hIemRYMWlwMk94RXJ2QVdGc09kRjZnSzFyV2p5c1RjM2NYeEQwOHdLbjVHYjB4bUVTdDFNWHN2MTRXdTBrc2FrZ2F1N2lMdnFjZGtLSDMyTUlEYmJydnQxSWYzQURHa1lJWklBU2o3NmNZTHhTU01ITTQzdVRPVUNQTlJzT3FHcVFEZ20wK2tLbzdWRHJJQkxHZVh6aFFIRlB0WFdRSWx1V01HMzJ6K2RFZ29oWi9KUUVyUnhWV3BKbElYbVhuNkdCeUJ3WXdQRHFCSUc3UFpUMWhBVWp3M3kreGhETkltVTd6cEprTk9OdVZvTm9EeWRQc2xuQkdXaVZjc28yVkdVR1ZnSjlLUGVpNnJ6SUNkeDJIb25uaHVlM3Y3VkFCb1gvbktWeTY4OGNZYkwvMzJvOFE0Z3IzT3o0a2NnNmFhRTdJV2JXaHNuVXB0ZWcxS0ZHZzA2Skp1V1RpSXVZa2dvRWtvY1ZTclJIQ2VYNDZIRlEyZUNUQm45ZVhFTG5BcVYyT2JPRWFIaklqbTVCQTJVTlpjWU9IUkw5VTdXR1BkcEpJZ3JkazgxYjlJcTJEbm5ReVJVZFV6TVA4dW1EOExyYVNlcHl4SDJQdmdzNW1FblNTai8xRmpkbHJWZFJ6SzV2cGZVZUxEczdHQ3l1eGxQV1lPTHFpTzkvVndpZnFGcXNxTk45NzRpZVh1dSsrKzZEc3BSNnYxcW5teWcvbkVDOXdkVFRRWlB6UmdjWTV0eTRsZkVnN2JNb2psRU9id0FGcFNvZEtZbTRzbVpiclFjRnpnWWhCWGhGcnlET3JaWUJJMGdrb0ZYZURheU5mTGFDdXJ0YkxJMlVBUkJ2VWxKNEh5aXJzREtwNlRQaDFaYjRoa0U5MDVoN2dXcFR3Q0dxdUR3bDdpcERCYjBkZDBJem56bVBJdzVEaWJuSkpRQzEyREpkamdtV1BIUjMyam5pTlpTODBoR1VYdGptRlN6czdtSEVXYjRhWHhkVGpWSk1ld3dRRzBJWjFqTDRNS2JHTVg2YUZEaDE3NGlGcEl6RWNNeW15YmVYdTFLVEczamxYSHJHVVpmQkJGVlVsenFucWpaRjJUZWNwQUl6N0hxY2djK3VBbGp1QUVzV0I0aVJWSll6S1ZPQU9YVlFsN2hBVEdjNzV1NFlFNXhHTE9Bc0NNSkV6N1ZncmlGZEUxcXA0clFjb1EwNFp6L29ERFdKcU5VdEZHUHUrNkI5Qjlzb2doaVlHTUhWSFZqRHRCWWJYUVpYZVdsRmFpdElTbENlZ1p2cTJURkxMQVpyTjVvZDU3NzczUGZDVHJINnRTY0JWOGFzb1ZvbFEvR0ZYQUhsV1BwdmdwcWptREZLakZiSTJ1bW4yUkowV3cxTVNQUVVyRVNQbEFBY2hRQ0NGbUQ4R1FhZ2RielNhbkhrTzBLRk1xWHVRUXhTc2VhNkdHRDFLbWxORlZUSEtrV2lsZ0E4Y1VQdkVkRFNOVnRjUG9kVEQzZ2Nnc045QUFBQ0FBU1VSQlZEV3NHTTZLMlM2c2YzRDZHUmN4ZXlobmhkREMwV3R5MnRBS2N2NWd6eUZVYml4VlN3M0g2R05Pb1hkLzVuTFB2ZmVjK1VqN3lOeFh4NlZZZ2hNWmc0d1VLdWxhUEJScWdHMEJpeWVMSnU1d1U3Z0V0dFFSYUdnR1lDc1hTeU9sNXNvWVE5RVV4RFJoYU5QRUlnWENOSVdaSVBDVWFEQUZsb1cwcmxENnpabDdCUUd5U21kUXRKd3dLcm5neXRpYkNwNjIwZ2RVeGJLTlZ0QmhSQ29EOEZZc3I1NUdxWFp5U3R3Z1NlZktDRmdZQTZqQXVRbVZCUTN1MkdRTXJoQUl2T1YzaWRXQWlOS2xpUXhqRmg1OVU1bVBWSFd3NWpCSmhpTUxPN09kZE5KSlY5MTMzMzI3SHVGa1dZZ2t5QnJEbURsak55S0hJV3ZqeUhZRkQyZmlqRjdPMm0vVm9pMk5DRHpCR3NOVnh2aTh0dU1BSmdHbmJkZUlGR3J5Wkp6SXdVWFdVblF3cEJiWWs3U1lKblA2cG9xc0d0em5Dc3BLV1RUR3pZaGcwbEp6TWdjOGVPakVxb1ZOYXBnVTVXMkZBMlVVUW1ZbXdSbEdPNUVhamNFeEFhUE1KdGtxRkUyV2hqT01pcGpKd1lXam5EeG1xaVR0bWVwR2Vyak5aaE50V1phcmp4dzU4b2duVGFubUlqb1hWN1JCeEJQWkMvZzlULzRvSkEvbFFRb2hrSllMQzVWNXJvNkE4L1FUVU5YNUsxcmdhRFZuVjFlWlJoM01sRmxFTFd4ZUZxbE1vQjYzTW82aElvT01Nd2FxdmJ2V2RxRHc5VGdXTG9sekQxZXY0SmprS0ErV3hzOUpmMEY5QVdTMXNGVnJ3ZXhZbXZhaG1CVXF6amdRSFNYcXFya0l3NUtTYTZuNlNYcXVhV3hPZ3FabUtJUUNmZE9saWNqYmUrL3lpQ2NLUkl6UjdPSUxkMmFtZEhWcVYzQWhoRk9VVzQxQWJWeElsUjJ6Ym5KMzBFdHdPTE5JRm1PYVZNcUg4Wmp4QVZjR2xQT2ZwM3A0elBDbngwSk00Nm5qWldZcGpDa2h1NHRyMldTVkJoWDZ6bSs2Z3o0T2lUSDRZVkRWWXdCMG1Vc3Q3a3pYcHA2eFpPamdkWnVOSkRuSWREYTdWR3FaYmx4Z0lrTmNPakpWOVRrMmg0WlU3ZkRqWElJQXpFeVh6V2J6eUJkL1ZiZ1FhNURXSVpieitzTUZhSmw2dFVHTnpzbWNhUXVKSVVDK2V3NkdCbnpKOGxZZTVaSVBWMlNkdTZFalpPRjhRY3NqWWdWQXRQazZrZmRWbll5Z2wvQkxGRkJPSXFuU010TSswYkg5V1hlZ1I5Q1lsQ0VpUGRxUXJQdkVHVkl5UEV0ajlQSU10Y1VWQW9PNWpuRzFZem80RzFQWWRBN1JRTGM2ZnloOXc3S2FCQkxWSnltVzZYSkpyYlhSNVdjSWFqM2RQYlJSdjBodlVBYXV4ZTJJdElpNCt0SE9sY2tITytmdTU5dlBvMXQ0Z3NhY1daUFR1VVk0cURLdERzOGVxZ2dGeDcvbnYvTzRseGpmZzBlOUNHTm1McG9tM2dBRy8xN2oyVGxDZkV6WnJQTURoQmRXZUViUVZMOVU3U0hmSzFZVFFpcmpaalBpSE00Z3dSbEVPLzJGeTZwVENxdlJOcHlyTkkrU0N6Yk8xQnpBS2lYRUdDZFhRTEdZU3RHWXdsU0dKSTlhVkIyVDBWd3N3MmM0UkRIVFhaMDRoTFN4TkFDUDJnQ0dJZkRxamd1ZlJ5SU1OeHNQbXBFUDFHRUxHUnFDNS9xMEFuRmpNbGppZ2ZTVVBKQWhBcEVBSWMvNXFVc2syUEVhd3ZDQjhUT0pxd290TzRZcVRSWndHQTJSdEU4RVJXL0IxMXRWQ0lYeGRoQ0hTQUhvY0NnN2h2L1RZOVFRcXlxSnJCZy8xcW1IeUVXS0IyR3pTalhXaktaaTRkQnNuMjUralQxU2lUekZMeE5Zemg2Sjc5b0FCQldqbVo3eDJKYkdWWmFRZVZSYmkzRjYxencwS1dua1NyOThSZjhXUUZkT0FWR05zZXVGTHFpT2VTdXdKNlhuMWdRNnVtWS91ZHNybTVqNGd3ZEFFSkVQeVhHQnY2SDJqVlV0WURLcXZrT1F3bEp5MGRPWUVyUUt6ckZxcnFtcDVSSVlhZUdZQnhua0RWY2piQVo0WE5IU1EyMmtxd1lidHVvUDJUeG1RK3k2RmI1UWFCT1I3OW9EdExxc2RXZ3paajFBSkUvNnJNbmVkZmh5Y0F5TThnaVZRQjczQW8zaGxHdFJjOXdMeFo2cnNES1BjdkhCKzQvZGo5WDByUHEzQWkxa0h2UmNpeTlqRERTbUNQekJhZGtxOWN1Z3pSUVJZMXpNWUI1OU9wUGhOV2hNamxYUklPYjBVTWZPdG5WTTFlTU9ucUFVeWtORE9OSlFHcTRVOFRWQlkxU2FFZXZyNGJQcnlRTnRXWmFyM0YyK0d3UElPa2U1ZTU2K3ZiN3dMYy96aVVybmlNcWxlQUhKUlJRb3o5amoyWjRTRTErTThDRTVrVFJXMDdObGtpTEZDd2dUcUpxZnBsaTdhQms4ZmpXTnpqSXlGME93czVWODFUbyt5dHBWbTRGbk04eEtUU3dTc3l3KzkzWnlBNlBLaU1FUjVJa2tXRFduMVBSaTRwOHhwejVWVEJwVGIrQ0QyUEhWeE5PWXhTdVNZUmx5TEJWTk1sdm0zRDNhOXZiMi8vS28wc0NIeGdLZXBiYzY2YUpTTUw3Wk9tcDFoSTV5dlpLcUd0UTVQUUZFOHdRd08xSzJpcysxK09tMjZ3eWZvcjhHMWhxRFN4T1J5enF2cnJmdEdCaGxCL3UyeXIzWGg3cFpTY3hsUmVRTUE1R2hBWENzNXZwV2YxNzFRYm5zMEREcW1BUXlsVDBpTWp4SkZiZksyNkRtTDJvTm84d1BJcEhVTVhnSVJoRStxSE1XK0w2VDdhN1VKZEI3ajdabno1Ny8rWUVISG5oTUk4Y2pDNjZabm1raDh6Wk81VlR1M0VMZ0E1bXJBaTFEaEFSbkRyTUZ5M1VldXhyVTRvbE9nc2V4a3dDcU1CREF1Qi9xZ3NxWTRiRERyOGVRaE1VRWxCd0toWlhDQ05WbEpPdURKRGdVYTBmWmxvS1dBbTJZOXcyWml1SEp6eFZKSXdQRVZYT01zUG0vS2lWcHNERjIrSmltS3BHVlU0YWNBb2tLbmZNWFZtUVVaTDQzTXp2YTl1L2YvejhlUG54NDEyTXhBT0ZaUUxyS0FqSVAxYW0yR2VlZkNFL1FiUE9jZ0RxMlBSZ0N0TksyR0dsZTAzWE5QVEZGdVVtTU0zWmkwS3N5eHF2SG9Jb3JkazkydEFRWmsrUnlUQUZBck9UcGc1eUpTZlRFbWlUQ1NsMFVuRTBhazFLdWFXTlNJM2FHMFFRUG81RFJjVlNIWWhRSElZTTlsQ3oycUF6RmR0cVRZZGFUWmZSZlBGaFRFQzZrZ2F1KzVJZVgzYnQzM3d0ZzMyUHlBT3lMSHVweEVSWmJOckJseVJxQVR5R0ZlU09QSURBVE5LUytUalM1bmVZS1ZZTkZ5MklHREQwYWxxVUdPQWtMT2NsMDFlK2tjUjV2Y2VPcUxLcndPSmR4WUpVQjZoQmJFSTNjZU0wUGp0UTJhTTBLNE9IUXdmZGZES3V1cW9KcjJqaVBpcTI1bnNKeE50bFg2ZUlqbTFBK1JpSVBTNnV4dVkxWVVVd0h2QkNUK2tkKzNrNzE5T2lNVXFqa3hBWGxkSE8wbEppTDFneUYzS1I1cm9PVko3MjNIVGh3NE4vY2R0dHRUOE5qdktYckkzSW5nU050S2NqRndzN3F2Tjd3Z1JYU3l2TUE2RUdyRDFSUHRtNGRXMWx1MDBqaVNOYlp3M3B5cXN3cElUb0tLckZTeHNTWVVWaXk2Vm45cTFHeG5HT1VCd1hOa3REb1ZLMVB5S1BvNkQzRzdoeEV6MnFnWkdrV09Hc1FScExINi9sM3prV1MxWFEwZFptak5ZSmdPZXBRaTVtV0RnSHJhbEpLK0p4eGpBQmFhLys0N04yNzk2c0FYb1JqY0ROek5EUVlIRzFwSEtlNjhNTVZTNlhRTUJpb0ZSY0RaQUY2WUZrTXdES2JJVVRITElMVzJtZ1ZDZ0JiU0NYU0VpMTNtSUxqYVlNcEtUOThBK2NDQ2oyQTh2TGxBWS9wZVlwaFRKV3RpN0FzemRFeEFLSnpONVZwREpKSlVFZkMrSEFQUGQ4TDVXWENnZHFsNUhHU1JVMVNSeWtJU0MvakU1ak9rZm53NGhZeVliVVZXRFFOTlBOa1NsZHFhbFdaelNzbHRwVjAvNkxUY0pmbHBLOHVwNTU2NnQ4RGVCV095UzNWUWNJQm9abmVwWkxXbW9HenBPR2k2WUpoOUg4R1dmS2lkTThTYzgyVkwzNTlJR2xwWEtTTWpkYm4vZHc4dFlnSWROVnhTQlVrZ1dTVEdEMEJ5VWVra1NsYnlsTlowRGptWXg0ald3V3VDbStqeHpBRWpRTWNFUzFsNG56ZFVlcUxPYUVrWE1rYjVLSVlmKy9FTC9BYWZ5dXJpZWtGYnNkTWRlb3pNU2FRZVhnZVdWOE00Q1pyTGk0N2V5ZENPWnBQRlJhT3JXWHI3NWRUVHpuMUV6aUd0eDBITGtWMnVNQUVDNnRhaldkcktuZHdJWGp2aG82TVpaa0YxS0lhbWpZWUFzcXhMcUdLYm9MbWx1Y0lnMktMcFRFRU9KcmxQQjZKZ0xZRWY3MUt4NVloYURTYWtNOHdGb3RFTkdYcVdteGRIbG5ua1VKWWtIRENxbmdUYWZHVWZ2RkVWRlY2Sjg0WDR0d0VsV3ovRW8yU2VsQmN5cUZWSW96Zm1KMVJFWWpHelNDVXJ5dkc0QXNUWDRsekdIODBlUW9selcwOTZmVHczSXk3VHQ3MUNZa0liRzF0K1dQaUFoNmNGYlE4N2J2cGd0Ynl6TjNXR3BvMnRLVkJKUCt0aTJCcExUVUd1dVQ1dkEwOE96aFA5bDVhcW9JWHJUT0RCU3JMdUoveXVaVnNaRnNXaWxFMHk5T3JFOFNsdFJXYldOekUvRGt6RkozOGhwU0tPTEdJSTdqVGlwQ2k0b2lwclJpcmhvcEJQY2RxVVlUS0hhK1VkaHhnZ0IzcGJEYk84cjJYb1dyVitXTXltY1JkM2lZWGxWZ3FYNitORXZOYWFRejJWa1Q4M3UvL3ZpNEFjTnBwcDkxeisrMjM3enRtWHFBT1d0UVVKb3EwY1Z3S3d0QWsyNjhVQ2pkS3NHQXdGU3cyV0hTMEpubFFwRHRjbFUwTkRCbStPaW1CNllkS3k1TTFtTk9MQnpRbzc1SUdSVTRGRTJvVGdpVmE4SWpaVVRQblFkWEJneTNkQk5FczBVTU9DRWJRbTFYZld4UkJoWnhqUEhMMFF2dEN0RjZkVGlVY0NhV3FoM0l2WXptYzNjYlFXVndxRHNvY0k0dENPTlExTVk0RUFoMUNXWjZ3cEcyZVJtTVJlZTFGSVUzdUFZQ0Zod3pjZlB2dHQ3L29XSVlDZ3pGOXlVVmVhcUNEdGZ4d0xVT0N0RWFCcEdEcERtdkthZUlabzkwRDNoYkFITTBCYnlrZmE1RUxtQzdjRTFSS3RvaXJDSU1NZ09aUTBaekVrWUVuczVHZUx0WlJSOE1uTzZic044aDBtem04QU5Kem5MelVZUlU4ams1R2s2bU9FWElzWXpIbkZzNDFyTzRseXRpWXAzdDBUaFlUWmpROGxCb0o0c1pRekNxWGk2QnhWSC9paHdZMW0wUzNDdENwbkI2SFlXbGVZK29hbWdpMlR6cnA1bWtBWjU3NUtkeDAwekUxZ0ZTY2RHQnBVRFQycStVd0NWbm91b3lHSWtnUjZaS3MyR0pJZkdBR2w0YWxkOWl5SktpMDlDRGhnR2xIV0I0cHIrNHdzcEJpRFNFOTZ4T2h6SU1wbWdwSzJaanVDZHBBK3BWMTVIYnVQTGd5UFpDeWRPVXJIV0dIb3ZINGxod2NLNk9vRmV4L3JDeWdxbkhwd0tqbUdkb0c1cThXQTZnNWdGaVdNWmpUZStLRVZzYkV1b1N3WDdORzdLVURVemFDWm0rQUVKektPTjdPY2ZMSit6ODFET0RNcHo3MU9nQy9pV044QytRWVBrWFN2T1lPYlFZekJXQm9EVEJwYUQxNzhGV3o1ZHBDNlA0TjBRVmRHcmFrbyt0V3JwRjFSQk9JYjBHVlE1MWFBa0R0NU1vclpZdEE4MnhhOGREUnlxMVFvQWtuZUNxbFdJWXVRc21pNUJ5RGN2bFVBVWtySWllcmZ6MWs1WTdaTUlzT0ZkM0JJSXJTL1h1SFFORlhwNlg2Nm9oYldBMm1VcUQzeEh4REQ5ZlJzVUE5NXlrSVZVclZtNUJabDR5bW1SVE1aT29vQnNRU21SUkVZTytlUGRleEdKYnZldi8rL2ZjZk9uUm9GNDdEVFJaQnc0TFdjcmNtU0NRb2JBa01Fd2dLb050b0M2QllvQTFZWk1uN2EvNHMydEEwbGNnUWdrdkpITDhKUWFRb3NBZ2FXcEpPTEJhMUFRSUJhRU1yZlNJU2tPbEM5WkxFVkJDVXRuRUZzb3FzU21FclI4aFE1NmpPTnJSQmcyUEtzYWx2RU9pbzBPcGdubVVIWXg1OGJ4S1RLRU5naWxHSEpqSVEwdWpkVnRvSWxNWkZCenRHd1JZZzdjaDcvL0M5Snc4UEFBQlBQL3ZzbXc0ZE92U2k0MkVBWXc0dVAzVHpsdWxJNDBsYkRnZ1dXQUFOSGI1UnlGYlA5alBwME5pQ2VVLzZ0eWFGVSt0dk1LQzFIR2dwaG9VcEpBakVvbEVPRWl3NnRlcjlNM29USFJlMEdTK2R6bjZDNEx5ZlVpUUhpYU5rbEpPdURmRThwbWJVRjBCbDBVcHFYdWNpb1ExZDRKcE1US0NubzJvSG5UZ2dzd0FqMlNVa3Q1Z20xK0ZjSlJjamJTd3RzNVdPZkcrb2Flb09uSExLbnB0cWJhWUJQUDNwSDczcGkxODhMZ2FRakpvTm1iTHFuT2tIYld3SU16UlZkTXZtanVnT2EwWmF0RU1YOHZxZUpFMzBEVnlXeEFNOStTUVZRWGRCSzQ2OTFMRklyeU9SOGJJMVpXOWVnOENHTjNHZTNBa09mUkRvTEdOTFZkZlNUU3NvMXpLbVYySWpMZ2RKN2FvdmxKSkFJT2ptZzE4SXpMNEFZY2dURjNnTE5BNStHc3JwRUhSaldiYzNhaWJyRER4S3hLalFCZ0JzRExJQTZBSG41MVBKc1QxN1RqbmxvMVBmdVZLaUhHcys0RnRwQ0xPaFpFSGJRcnJvdG1CcENpeUtCUXB0TTdjWEtOclMwSnBBcFRGRXBGdlhCV2l5QmJSRXRhcnNBMTRXU3RFRm9vMWxaM1lsdDRXOURia3ZHMlZzcVUxUWRpYW4ycWhKTVl5S1VocEVVNmpIN0x6QjdEZ2FuSUd5N3QreUpiMk1wMVErSlQ4dkQ2QVVhUWdiWllWSVhldHNJeUwva3NLQkZVWFJWUWlJUnRLSVFMREV0REVJemRHdFpCRng3YlhYNmtNOEFBQ2NjODQ1LzNqenpUYy85M2daUUIzaDJzS3lPN1hsTUFZVG9CblFCZGdXd0tVQjVybW9ZYkRlRUlzaHZFR2pRNXJDKzVMZHlKd3dsMlhFSEZvSlpET0tVbnVvTFJjenJLT3BzR1lBbmxaTzZRZjVBSlVFb3p6SVBPdU92SHBoYk1SZ1Q3Z3Fhd3lzQTBoTjg1SUc2WkZ1T3pSbkJESjlWTFhSM1pQRVg2TW1Bck04SGgxZEt1dklUbWtldDhxeWNSMWlsWjVVZlFQRU1zNUFrdFdnVFpFMmp0c0pFWng2eXQ1L2ZOaEJrZWVjYzg2ZjREamZ4cWd6Snpid0hITFFlZmFaR2NhNWZRN096a2ZQNzVaSHZQUTZkTEgzUEQwamNvanl4b05ERkRySDNCb01IZDA2WiswYWVzK2hEdUdHamp6bDB6bDRHWkdqVk13N091Y2h1bk1zamVkUXhqNk93YzMzM0t2cjFqamF4Y0VobXB3TzR2a2V2ZGZuOW5IMFREWFNCcWVnZ00rVDQyOXNIQ0JoYnRoWUg3Ti9UZkkrMWp2Z2pnNWdZMWswNjU0Tm9kVUZiWnZPcWUwQjJBYjc5NS8ySnpzbC9yRlRLblB5eVNmM0kwZU90T050Q0trV1pqZ1FvRzF0b1lrUXlXZWN6bDREeFpJOWFHaExTc0pieThFUldKSnlscWI1SFEyeXBCcEdtU2xJMGJ1QzFlOElESnVPTHFHU283Y2hKWk5SWDI1b1UxMWM3SjZtcEt0MEdNb09KTW4rT0RRWnNTSHJJZ28wenk0bmNJZU9waFNDMDlJTGFzRkh6VlEwQjFyTDhHb1BsdG9MUitrbExtQ1dRVTgweXVEWmVtY2Z2TzZETzd6K1E2Umd6Mzcyc3ovOWhTOTg0U1hIMndEeVRPRkFMRm5jaVkzQnlQS3B0akdLRmhESXduSnZaMk5CZFFkWkd3ZUdtMlJzVjFPZTE1T2dxa21ETjZQZ05JK3hVNEFsMUlCNnp0SlJNcENkS1ZzcjlVZTUvTWJCZk1wTzZPbzJOaDJEb2thbDBIUjBFRld6NjVoK1huV0Jhbk9uaU1NdFVLU3dWYTJpNWdWYUhkc25VNC9nSlluVEpMMDh5KzdtZ2REa0d0UTNxVGRpZyt4VHpuanFweCs4RHQvS0FLNyt3aGUrOEZkNEhHNFpKanNrRnFBNW1yV01hUWlZTG9BNkdoSUQ2R0k4cVN3Z3NxQjNZRkZEWjIrQndoR3Rxc2haUGxhV2ZKdm56dTFCb29RaURPVlpRdHFFVEZ0NnBUd0ZUVWJPSDlvaFhVZGphY0NvR1JBRU9vRWN6eTl1RGMwdGhSN1NXQXRKb05ranVmcW1tV1UwU2NEWHZaVExUQTg5SU9yVU1IQjB2cVltUVZrYUZoRllueWVaQXB0TWtkbFVhMUlIVU9vUTBEejF6S2RlL2RBdXI0aUhMTXlCQXdkdXVlV1dXODdHNDNRVEJacHVwU3R2aWZxYnNHcElhZm15RUoyM2JBelVscTY5aUNKUlBrWVpFdWhDMCtXelV0amFRT1dOUkE3WTRwN2tUNExISFBtaTgyKzVYTWhLc096b2FKNDlnano0bXB5OWtxdVFHaUxVYWp3TUFhREtnR0hWSEZ0dFlaVXpRT2NZVzVWVS9qYlpPZE1JSVRsQ0ozU2xyQUtsYVpTc3FlRFV2YWZjK3NjZitNRFR2Nk1IQUlCenp6MzN2YmZjY3N2LzluZ1pRRGE0OUp3WjRJQTVlL3dYRmdnaVVzdFc3bmxwby9teUs0VW0wVmhCWkFkT2RRQjc1TUxSZFRibTdLWU42QTJ0QlEraDVPS3hNQVUydE9SaERKd2R4UGd2MUFkR0pPT25ISWVqckZFRTFiMURJYTE1N0UwUERJbDduVHFhcVVZYnlsOG9DU1VPNFpESWVvRGxHRlJLdXhzZ2ZiS0RuTlNXUnRHaDJuSk1MN0pTR0JFNDY0ZCs2TDNmdXMvelczZ0FBRGpqakRQdXZ2UE9PL2ZoY2J5cEFxb0xaRm5Rd05yL2twQm9XVnIrRGFDbUFGQnFEa3R6SU5xd1NQTDZVR1VkUEhldXRBU0pMUWNLb0dsTkNXT3FSTVp3RHFnb3NVanlES01YcFlaU3FhWTRRejJiWDlnb290REVGeXpsRG4wZ3BoZkFvSUtEWW8xcWM1c05vVTJSdFF0NnArQjlRd1dJeGtNMGNreHZOR29HeVI5SXFZT29oOSs5ZTgraEQzLzR3L3UvNVRWL3VNVTQ3N3p6M29mSCtaWURrQjF4dENQTTBOMWduSUhUeldCK2RLUm80UWJyZmN6S3M0MGhlb2ZiQmtjOTA4TE9OTlBORUVjZHdmdUhHOU84VGtsVlg2VjhPYksrY3hSdXp0cnJtY1o1d0t6RGdtbGZkSmc1ekhpU3QrZk1IdTg5NDcxWmp0UU5qbTd2eGtNakxMVnNZNXk5STJJREh6UCtrWU9lbmEvQm1iOVdaeWxaNTRBdWgyR1Q2U1VIVXZzWUQydm82TEJ1ZVByWlo3L3Y0VHU5SDhZRFBGRmVZRENHclJwTDJ2aDVGcEsyb0NwWVJCRk5zb2UrdFl5WFpBYnpNVG9rNmtJV3NVbDVBQjAxK1BYT3o2SVN4N2NnMDh5YTU1ZWw1UFFBVVNxajBSOHBRd1FhTzRwSmJIUWhVYVNVZVVHcVdOUXl6TER3VTQydHBWRXN6RkdIVkNObStsaktvUFFPaWxBZlZMQ3dIM0h2bnBNUC9kbEgvbXovdzNyZGI3Y1EvK0pmL012MzRBbTQ1ZXo4bmllNldSMmp4am41UGRENzBTU1BZcE5hUW5kWU4vVG9lWElKcDJkM00vaW0weHVRdkhGRGJOSUQ5T2c1ZDUrUEJ3a2VzOXpGZVhKMzd2NmNoRnU3UGQrUDk3bER3enJDQXAzMzcrR1Q1S3BUVnptbk4wbWxIQmNmeHFsZGZSN0hZOUZobXo1SXFweitaVHlwTE1aQlZCdDZLck1zUWNNQ1podWU4cHJlN29lZjhjUHYrZmF6SHI2TkIyQ1I2SlpiYjczMTdDZkNFR3IzNkNJUTNVWnJZRTBnSjVVbGFxZHVNSVdBRUN4b0hGU1Z4RS9WRDJSMEx5dTFoMEJMcFZLUlJhTi9VZEdVdTVCMWhKcFJnRFpvbW9FVmdzUlc4UWF0Y1ZpREVJZ3kzb3ZtT1FuVUtqSCt6NGJUZks3eUVpU2tmUFpJWlArbmpDYVhHalRWUmk5Ull6YVQzdXIwMC9mZit1OC84cEduZjd0ci9CMTdBbi9zeDM3c3JiZmVldXYvL2tSNUFsQlVJdEZITzFZZUxLYUlabU8yOEtZMXFBbTdFb1IxZ1hTeHdxNGxsNWJUUWlNUTN0QzBZd09CdGx3RU5RQ0xqbzRkcVBEWTIyVDNvczRkVW95RmRRSkxLK0pLVS9HcmxJb2IraGcrQmZic0c4VWNBYVRFWGRtMlRSbDc1L0d6SWdLWHJGaEdwRUIwM1EzdDVBTTZjOUVtUFUvZVliaDYxck9mL2RidnVNbStrd2NnSUx6K2kxLzg0a3Z3Qk41a0plaElDcGtjQVdmOVNjc0tuclRHSFYvNVBtY09aOXBBcXJneHpuTEdRZFB4dmRLMnhnVnFFTGpxbUJJNFJDSDBNTUt6ZjlIWUZoYjFmRDZtY3BXRXJTam1tdDdSVnQwOWF4Vnl4QlJ5VkZPVWlZNGVwQ0JsN3NFaFd1d3BiS2llUk1FNXovemh2N3ZtMm10LzZwZ1lBQURzM1h2S2tjT0g3enZwaVRTQ2tqZW5iRndoclkweGNDVU5WNUpFNEh3QlJRT2FZbWxUNGFPdHBwbHdKb0draGgvMEJqVlVRZHQwNFZBdUdKU3RacXZ4Y2dTQnlScm1FS3djZWJjZWswTnlDVDdtRlNXRDZFQXM1VHlHZ0tUNkFndVFWdWtZN0JLdXVReGdhcWpENElDOWUzWS84Qi8rdy8veGlOUmQra2d2L290Zi9LTGZ3Uk44cXk0WTg1bjYxWG04M1RyTURKc2U2SmFnTHN2UE9XdS85ODVEbUh3Y3ErcE1HNTMzTSt2WVdLYWVzS3BTWnZvV0cxYitMTlBQQkk2TzZEeXdxZk9RSitzNW9hemJmSitWUm01c1ZCS0RxV3FlRzdGSndPZzl2eUpUMUFoRDcwdzVDZkEyMk95NEJwRW5STUEzSE9Wdmp1Yzk3L21QZUswZXNRY0FnT2M5NzNrM2ZQbkxYMzRSVG9DYlVGNjhOTEJxS0tQUzE3VHRBSHR0TmFzQXNuYjNNZ2dqSVpDYjl5UDF6Qk5UdE9VNDJpS1paRFgrdmdSM3lubjNNdlI0TmZxZWN3VXhaeG1WWkV4VWtrOGFrMm1UZWc0c3BJSmpIRllRcWpsSXN5WURpbUJSaWwwcFd2bVJIL21SejMzNHd4OSs4WEV4QUlwSDd6dDA2TkNlRThJSXh1U3h4QUNxcWZRVlo4bTRaY3VKVUZBS3lmSnZsbmRqTEk1eXRtMHVmTEp3Z1RxclFFYlR4OEkrUTlhVFo4WUF3SnV1QmxOUnNEck9MaUxxMTREWFRLVFZ2SUo4aGx6a2tmTkxGYlJXa2pTMnJvM3F0SEVJcGdRV1diQjMzOTdEZi8xWGY3MzNVWVhWUjN2Ukw3amdnamZqQkxuTkV6UjV6cDV2ZVBxbXcyekRzL2V3Y3UwWk5ucmwyTVVOUkNlcjEvUFVyWjdocHNLSzl6eWY2R2lGQUlwRnd1anFMVElVZEV1MmNKT2hvVnV5ZnNhdm8yUUVPOThUd3FhUXhEYXdtT0hMdW8xempLMk9mT05ad2RZNTlqMXNIRTJ5c1Fmd3duLzV3a2U5Tm8vYUF3REErZWVmZjgxblB2T1pTM0dDM1VyOEljT1Z0MVZJVUxSV0NMK05YTHhwZGh0cGFlckpCQTZtYlpYM2E5VUp4cEJxWkx2WHdoRTRXcGxEdHFTaE9ZYzNWTk5ZRFRPaERvQ0Zuem9xUlZmOUZEa1JwVGdDaFNwUEUxT2xSb1JpMEVXQmNQekVpMy9pMnZlLy8vMlhQUzRHQUFEUFAvZmNnLy93cFMrZGp4UE9DamkwU211Z3BFQ1dMQlExeXJPYjZqeXFwclZVOXJSTTZXcDIwUnhaUy9Gb3RYcU95V1p0akpMSjhqTlBOb0V5b0xjSHVkYzB3TldJb0RRazlnck81ZGRSR0lzcUtHRTFRaStBVlZVSkdvcHpYM0R1cHoveVp4KzU0THU2WE4rdEFWQTM4TFZiYnJubEFFN0FXeXZpcHlIVnhHZ3pkd2VCSXcyaVBJWHl2Q0p0TWdpZTZ0UklHVnJxK21NY05hUTVBSnZhZmxWWjU2d2MwOFlCMkJ3TnFycGtyTmQ1THBHMjJWVUVCYlRtLzlWUTZwcUNUcUpLM2NjczRXY2NlT1kvLzhlUC9jZG5mTmVwOVdPNXlDOTk2VXVmZGZycHB4ODZFUTBnRHhpWjZhSmJIK2Z1bWhkbXNDRzZORE5zckFTZWdiQ2pUQnQ1bjI0NDJvR2p4QllSaGsxc1lQMG9BcDJ4MnRBN2NjY200QnZHOE0yR290WkE3NXZ4UHZKa2RyNjNlbCtiVkNSbnBrb2hiQ2NXZ2NIc0tDeXl0bkhhVTU1NjZJS1hYUENzeCtRd0g0c0hBSUJYdnZLWHovdjR4Ly9QR3g3NW9STlBYR3hvVXNHVkpKQUtkUUE2MDhnaVhHcDNjNWRJYThuMHRhcnZLNTlxVEFHZyswKzlvTGNWNTEva2ZoMU14U2tpdnBwWUw3SmtwMHlzUEVMOTBhZm9WQ05Kb3RQMzd6dHkwVVgvM1l2ZitjNTMzdlNFR2dBQS9OSXYvZEtGSC8vNHgvL20vdnZ2MzhLVDREWVhPMEdlcm42WHYwbzFiaFdNVkhOT1FJdXRuR1ZZUWJ4cGFndHBGRW5mMXFJN0ZBdHhRWnBSZGh0VGowaGNBWlYwNlhWbVhnRStueWxlSGdyR2dacXEyTHRueitabmYrWm5mdTdkNzM3M0p4L3p0VGdXQmdBQXYvQUx2M0R4Sno3eGliOThzaGhCMGJOUVdYbUEzTWZSMkRqS2ROODFPWUVHSUZyRzhGYWtUMEVBWlgxaE5ZU3F0ZElRckJvMnEvcjRvRUNzem1xazUvdHc4Z2FESEtZK1llOHBlemMvKzdNLyswdnZlYzk3L3ZxWVhJTmpaUURsQ1Q3NXlVOSs3TVFQQjk4Q05MSmpXUGlEa3RDUmN1MnRzZ3VtR3RvRzJGUnA0SG1xdVpxTHp0QUJyTTQyS3ZQZ1dZQWxCRVVKUWpNVE1SVnNPV0RxV0xDa0ZGd2RUem50S1VkKzV1VXYvKzkvL3ozditlUXgyd1RIMGdBU0U3enl2TC85MjcrOS9xNjc3dHFISitGTmlwbGJwWHBLeWpneml3d1Zyb3BsVEFHcUIxS1BLSmtFVnFFb0IwQm0xUjZ0aGczcVZBZmhvZWNxaEFaYTZQanIwdytjZmVqQ0N5LzZxZC83dlhmZmRFdy83N0UyQUFCNDdXdGZ1M3pxVTUvNnlxMjMzbm9BVCtxYnJOSkRJTENWWWt5dDVsSE5LU09xRFAwcm1WaVRxUU5BY2c5ZVloQm1oVnAxaG9VLzh6bllIVDRlZSs2NTUvN3poUmRkOUt6ZmZzYzcrakgvaE1mREFFYng2Tnh6RDM3NVJDU0x2dXU2UXhFeXVlRGFzaFBGQ2M1MGZkOEVEeFVOQmhmZ0xERUo1LzFxWlJLeDd2aVZNY0xtSjM3eS9FOS83SzgrZHNGeCsxekgwd0FBNENkLzhpZXYrZXhuUDNzcHZzZHVVbkt2M01xajdWczFZL3lpaWpxMFN5VXJOeXdpL3dBQUFxeEpSRUZVaVRWRnBPWUxxOWJzL3EwVWRLNFlQNmppNG9zdnZ2YlAvL3pQTHp1dUgyUU9kVHgrWHovM2N6LzN1bjM3OXQySDlabngzME5mMUd0a283aElpTFJvVFdLN3RWaTJsOWplMm82dDdlM1kzclVyZG0xdng2NWQyN0ZyZTFmczNyVTdkdTNlRmJ2MjdJcmR1M2ZIM3QyN1kvZmV2ZkhjNXp6M3Zzc3Z2L3gxajhmYVBDNEdVRi9QZWM1emJ2aGVOWUtIR0FWN2RrUWttclJvalY5YkxiYmFWbXh0OFd1N3hhNnRYYkc5dlIyN3RyZmpvb3N1dk9IeFhKUEgxUUFpQWk5OTZVdXYyck5uejVIdkYwTjR5RmRETkVoSWsyaE4waWlreGRPZTlrTkhYdnZhMTEzMWVLL0g0MjRBOWZYOGM4KzkvdnZXQ0I3MGRlR0ZGMTcvUkszREUyWUFFWUdmLy9tZmYvWFRudmEwVzc1ZkYvNzV6My9CTFpkZWV1bXJuOGcxZUVJTllCMFdUai85OUx1L1h4Yit3SUVEZC8rcmYvWHFxMDZFYTM5Q0dFQjkvZlJQLy9TN3ZwY040Y0NCQTNmLzhpdC8rVjBuMGpVL29ReWd2aTY4OE1JcnpqNzc3TytaMFBEYzV6NzNsbGU5NmxWWG5Jalgrb1EwZ1ByNnhWLzh4WXRmOElJWFhML3JwSlA2azIzUjkrN2QyeSs0NElMcjMvQ0dOMXg4SWwvakU5b0ExbDh2dS9CbFZ6M3ptYy84MHJJc2ZxSXUrdmIydHYvb2ovN29sMTd4aWxkYzlXUzVyc2VkQ2o0ZXQ1ZS8vT1ZYM0hycnJhKys5ZFpiejd2MzNudWYwTkx6NmFlZmZ1U2NjODY1NlJuUGVNWkgvK0l2L3VKM25telg4a2xwQU92YnExNzFxaCsvL2ZiYkw3bmpqanRlZHNjZHR6LzdycnZ1UHRYTWpzdTQyMlZaNG93enpyam5yTFBPdXZtc3M4NzYxRmxublhYZGRkZGRkK09UdXFieFpEZUFiM1g3bFYvNWxRdnZ1ZWVlaSs2OTk5NFgzbmZmZmM4OGZQandtZCs4Ly81VEhqaHlaTmZSbzBlM2V1L2k3dU96czdrMGxtV0o3ZTN0emNrbm4zeGs5KzdkOSs3ZHUvZTJVMDQ1NWF2N1R0MzM5L3YyNy92RW4vN3BuMzd5ZSsxYS9mK25PdDVOQTFlTDNRQUFBQUJKUlU1RXJrSmdnZz09","base64"),
        bucket: Buffer("ZGF0YTppbWFnZS9wbmc7YmFzZTY0LGlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFEQUFBQUF3Q0FZQUFBQlhBdm1IQUFBQUJtSkxSMFFBL3dEL0FQK2d2YWVUQUFBQUNYQklXWE1BQUFzVEFBQUxFd0VBbXB3WUFBQUFCM1JKVFVVSDRnUUVGeVlidldqZWd3QUFBQjFwVkZoMFEyOXRiV1Z1ZEFBQUFBQUFRM0psWVhSbFpDQjNhWFJvSUVkSlRWQmtMbVVIQUFBTUdVbEVRVlJvM3NXYWY2eGwxVlhIUDJ2dGZlNjdBOE56cHFVV0FsWFNsSlNHZHhPUVdFTlQ5SjlLVFdzMFRkVDRURTJHaUdrN0l5Rm9hZ3cydEVsckU3VXlBNGpWMUdqaVB5UDlvLzdSNmxoUVdtbWNpSzNSOUwwR1FyV2dMVWdyTUV5aE0vUGUyV3N0LzlqN25IdmUwQ2tNRkhxUy9mWTkrNTRmNjhmM3U5WjMzenpaMk5qZ3BSNi8vNTRGVjExR3ZPMG40YUpyWVBlcklaOERKRUFBQXpzSko1NkdiLzQzL1B2OWNOODl5SHMvOXRMZkxTL1dnWTljditEMUZ4RUhmZ2xlZXkxc1B3bGYreng4YVFQKzh4dncrRlBJc3lmcnRlZXV3SVhudzJWdkpDNjdHdDZ3Z1BOK0dJNC9CcDgrREVmK0Z2bkFuMis4Y2c3ODFlOHM0cVozd21zdWhVOS9CdTcrTW5MZzlyTjd6cDAzTG5qSE80aTMvUXFFd1YxL0JwKzk1K3dkT1dzSE52OWtFVDkvSlh6OGMzRHR6UnZDOStHNDc4NUZYUGNoK09iWDRQZCtGN254TElMeGdoMjRkZitDWDNnejhjUngrTHVORjUveTczVTgrUitMV0x3RmJ2c0E4b3MzdjdEbjZ3dTU2TGJmV1BCelZ4TC8vQkQ4MkkwYkw0dnhBSysrWWtQdStrUDQ3ZHVKSTRjVzhYMXg0R1B2VzNEMUc0alBQd2ovOVMyRWwvbTQ1c0NHM0xvZjN2TlIrT3NQUGI4VHordkE1UmNSRzErSHg0L3pza1grOU9OZHQyekluOTRJTngxNmlSejR5L2N2UWdVZVBZYmMvSWxYeHZqcDhaVy9XTVNQdkFuT3Uvck14ZUtNR2ZpRDl5N0lDZjd2R2ZoQkdBL3dtZnVSM2NDbmJqa3psTTdvd09xYytQWkoyT3BmZnR5ZjZlZ04vdWJ2NFdmZmNwWVErdWl2TDloN0x2SHNGcnovNHp2VHQ3NitmZ0h3SnVCUzRCTGdJdUFDNEh4Z0QzQWVjQTZ3MHNRRVZVeXdCWndBbmdHZUJwNEFIZ2NlQlI0QnZnbzhjUGp3NGNlbjcvdWo5eTA0OE5QRUp6NkgzSERIYzIzTjM4MnJMaEY5Z1dMSSt2cjY1Y0Mxd0RYQWp3TVh2NGhnNWpiT0JWN3p2UzVjWDEvL0J2QkY0QXZBM1l2ZGZPVmZIb0pMWDBzMFpmWDhEb2hBY2ZqeU0ydGZBcTU2aFpGemNSdnZBdGg0ZHUzZlhuZHNremRlK0FJaHRMNisvdVlITmpmdk4yQnRiWTNOelRWK2tNZmEyaWFQYlc3eXk3dmh2a3ZXZnVMdzRjUC91c09CSTBlT0lBZ2g4SkVQZjVpdTZ5TGxSTmJNWisvK21RYnBPVEJyOC9UemRIN3VXdGNKOHpuTVpzdVJNK1BhN3QxMXJLNHU1OVZWdVBkZTJMZXZyaTBXRDZBcWlDZ29LQ3I3OSsvSDNTdUVjbDZpU0pNaUFvcHd6ei84VkRNbXQySTF6S2QvMWduRTgzaFBTa0xPUEdkTW5RRlFYWTZjbC9OdzdjTVBYNGE3Y2ZubFh3ZFZGRUZrU1lXY2N5SkNFQUVSYlo0S2IzLzdGOGhkeDRNUHZwNnZQblJsTXl5ZFp2anNOT1B6Nk55WmpKL1BkNjVOSGFqR0J4ZGZEQ2RQQnBkYzhpMSs5SFVuMFpSQXUycWpwdXFBQ0VTUVUrb1FDUWdRcWQ0SmlvaWdBb3UxLytHS0t4NGxwMFRPTTU1NmNwVi92UGVkbkRxMTJxQWlNQmFJT2xJQzFSZ2hjN3F4dzJlb2h1N2FGWWhzY2RWVlgrVENDNVMzdmpYWXUyY1BzMTI3a0RRbmR4bEJFQlg1dGV1dmJ6WUtRU0JIang0ZDB4RUVIN3psZzVGU3B1c3lLU2R5eXVSY1IwcVpuTFdkZDZTVTJsb2lkWW1zSGJsTEpFMlRleEk1SlhSNFprcDE1RXpLbWF6S3lzcU0yV3lseml0emRzM25yS3pzWWo2ZnNXdGxoZGw4anFvaUlySnYzM1dZRlVveDNJMmNja2FvblRwcUZrUkZvbVpBbGxrUlFScVpoT1hhUUxBa1dqK2pxTzRja2hUTmFlZTZDRWtFVmEwSkpCQ0VyVk9uT0dmWExzQmJtVkZVRTJuV2thVkJuVHFQSEdqMkU5R2FnTkp3cGlOaDJuSTkxNmxEdzlDSlE1TzVqVFE2cklncUtTMGRFdEgyQWtFY0pGaXU1MEFGWmltaGFjRC9BSGZRQVNJcFZ5aG93eGZ0THl3TlpPUklmWkNPMzdFalUybHdTQ2ZPNldsT1RqT2tncElRNE5peDQ2TkMweVNrU01PMThxdnZmamRMWkZRcHB5bFhQRmFTcGgzZHVFYTVSb09Ka2FvRFg5dDVpOHo0NEhaZVV6MUVXZEJVRFU4a3REazFPSUhVUW5EOHFTY3FsRlVnSUtSQ1l5eWNyVllNNGEwWlNFdVMzbnJyUWJUbWYzbmhhRXpMemVuUlozTGQ1QnJSRmdBUlZKWTFYRk1OZ280QnFYQUtncjNudjZwV1JHUTVLOVdUQWY4STBkN2RTRndyb1VjZ1lrc2p4cHNtS21xSThtanNBS0hHRHhwY1lDekhUSXFBanVmYW9LVWpYeVNFMWRVOVNLbzFYclRWUmhkSXk2Z3prRmdnNTVUR1dxNFJ1QStrbldhQWtiampBeVoxZi9TU1pVWnFBWGp1ZmFvTkhrT0dBR25FRmhYbXN6azRSQVRoZ1VlZ0tseTM3enJHaHl1SVZ4dGFCb1FJSjJvWmFnU0pKUlJHZ3lmWkdHMmZScmxwZzhINFdsVGJNNGUxaENCanNVZ3B0ZmhVUjdlMnRwalA1d1NCTnhMRU1wN1ZrcGdFSktmV3NQTFFaSlNEQnc4UkxrUkFoT1B1UkhoalZOMmRCSUZFUUZpTlZyUktIdEdDMFlKQzFLc2pKbDI3bll1TTg4Q3hpT0N4eC80WER5Y2N3Z1BjUnhCWFJNU3l0S2VzZEtsMlQyblZRa1N4S09KaG1BY2VqbHRnWVpnN2VEdjNtalYzSjl5aE9ldm1SRmp0TGQ2TWJaQ0lDRHhhMDRubWpEdUJNelFrOXlDSzQyNEVSdkhsZDdFRHdrSFcxdW1DZ3NSWUhhdUI0cWdZTG9KaGlDb3VpcnVqNHJnTDVvNDBKOHg5TEt2ZW5Cc2NkQjJ5VUExM0tyNGpncEFZL1RsNThnUjc5cXhTM01obVdERis2NmJmWkNpa0E1M2FrOUFJeDgzdzhFb2VLb0hjQ21hR1dZMkV0K3ZNQzI2T1I2bEdoK0ZoWXhZcStaeUEwU21QbWhFbjJ2UHFpeXBKS3lhcm84SGV2YS9DSS9qT2QwNVF6T2lMQ3l6N1FJdzVxTkpEU3pHS0ZidzQ1bGF4RHR4MisrMjRPYVU1WVZiRjA3QldTb09PT1ZIcTkrWldyelBIU3FuR1dvV09HYmdiRmcyUzdrUjduNGUzYkxUWm5XTlBINk9VbmxMNjc3cFRHMUNZelJwV0p3KzJGdkZpdlVpU01HdXQzeXFNTEF4MXdVMHhFVVNOTElvWHg5V3dVTVNsY2lVTUQwSERpYUlnaG90aTZxZ3Fab1pxaFdXSTRHNnNyS3h3L0psdjEyQ1Zmb1RMWUhtRllqM0pWbXhNeklCYnQ0R2tJTDFCS0VtTUlpQ2xFdDJvOVZ3Y3JOUk9hd0ZTcFBLRHdKSWhybmd4UWhVTFFWeEpEVzV1aHFvUUZwaVVXa3JOY1hGKzZMeFZuajF4Z2orKzg4NlJOeEduNXdCeUtYMHRaOFNJdy9DS2FTdWw5ZzZEWHFBVE1GSEVtcHhRcDZnajBualNnNUZRclZHMXdsS0M5SWFndUJvMUprMUdsS0Jvb2ZOTWNVZXNLb0d1NjhoZEZzWVN6WWlVVVRrRHVUUUlEVjlXWWpVY1c0OUlsYlBtaXZSVkFZWUlTcUcwN3FJaGJZdWxpRnVGbGxxVDg0b1VSOVV4SzBpVDZ1WmVJU2tLUlJDTWpPRHRKNTFhY1pRZFdyL3hjN3FrVmdwV2pGS01VZ3JGQ2xhYzRzYkJnNGZhdXRHWFFuR2o5NEwzUFgwanRwbTNlN2F4MGpmeTFzSmdidlRENTk0cStjMG8xdU45WHd0SEtaZ1YzT3I3Kzc1ZVczZGRmV3NWTWFrL3kzSWNFZVRlckltNTFqTTljQ3BHelIwckprQ0lnRGM0RkVDMHRIMXQzWjFXVFc5Tkd2Y3RNeUNobUVBeHhvMVNsUklGTVNHRzVvUFFCUlJaWXR3SFdFLzZYcTNBcmZ4V0VwZGhnejgybUlISTRVRmYrdnFTdm00OHV5YndxcHhkYnVaRnJIN3MyZkVib09zMmxOa290ME1HbFN0RWxLcE9Ka2FuY09nZ0l1UlRkMzJ5a2JlTnRzMGNiSTJBWEVvWk5jaklnMVpTdzRLK0w2TkNaU0xxc2pnOUt3UTlnYUROY00xVjBFM2xkR0VvRkZVcjlSMUVYN1ZVRlpJREFodzA0MEJuclNrT05qR1EyU2Q5T0taOUFKQ29BZ3B2MWNqcCs1NElSNlFqUEJBQ0Y2Ky9DY1UyUk4xUDlPRVF3WFlFWFFqUkxXdWV1MWZIM1VFNnNyWFhTNVVUT1hMdEdSNVlkckk3bmxJTDVJQ2RZUjY2ZHR0MmxsTDFobHNsc3cxenFWMzEwS0dEV0c5U0dqbjdmcHV5VmRndTI1VjBqWGg5S2ZTbHAvUjE5cjZuOUQyOTllMit2aGFKN1o2eVhRbGE1K1g5WmJ2ZzI0Vys3eXQwVytVWkhCbGdOR29xR29TUVphRWQrc0d5cERyYmRvcm9aelZpN2Y4SG91M1lxdXl0MGEzM1Zoa3RFWVFJMGZmTDV3MDZxVWtHeSswZDJiRkltRG9sbE9SSmp2N1QwWjJHeDFEbW00M0RiNk5tcFFsVEFYeVV1bE1IK3UyKzdnOGFjdkNlN0U1SU1MTlUxeVNUSXBCWkVOSUJnZzFTMld0QmNIY3NkNFNEdWRPRmdUdHFTdWVKMExwOTlKVEgzZGdnd1hjNDR6RTJ0bHlLalR1c0haN2k0ODJuVHZYTVp1RGhHTWJNbllpdTRuQm1PT0FDczBhMldUalJWV3dQaG5nNEtXWjBUWm5teUxpQjV5QjNHWGVuUzQ1YlJwSTF4ZXFUN0ZXTzFZd3YrWlhOeXFRVEQ5VmdlWk1IM0hISEhkeHd3d0d4aUFnUG90U2RXczVPUkc3M09kSE42THpDMGEwU2N0aXF1bWVTVlFNN0R5STVuZ01QeGR6SUtXRXBrWktSVW1vMWYxSVJtOHdaN0dPWmdkWUhKaHAxM0JONGpBWnNuOW9pdXlOUm80VlVpVHc0YXVha01OeG1OVk9wSTdkN3JRU3hZcmgzb3dTM25PbkNLSjd4WkJSTncyK3Q4c2dqRDQ5YldSL2cxd2c5d0dnNC9oOEZmbnlBcG1tb0lRQUFBQUJKUlU1RXJrSmdnZz09","base64")
    },
    
    tex: {
        brick: Buffer("ZGF0YTppbWFnZS9wbmc7YmFzZTY0LGlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFJQUFBQUNBQ0FZQUFBRERQbUhMQUFBQUJtSkxSMFFBL3dEL0FQK2d2YWVUQUFBQUNYQklXWE1BQUFzVEFBQUxFd0VBbXB3WUFBQUFCM1JKVFVVSDRnUUhEeElZbjhzaDZBQUFBQjFwVkZoMFEyOXRiV1Z1ZEFBQUFBQUFRM0psWVhSbFpDQjNhWFJvSUVkSlRWQmtMbVVIQUFBZ0FFbEVRVlI0Mm95NzZhOW4yMzNtOVZuRG5uL0QrWjM1MURrMTNMcFZkN2J2amUwNFR0enBKSTJkeEoxQUIwUmFhUVNLaElSQVNQd0hJUG9sRWtKSThBcEIwK0lGUW9KQUI5SW9DYkdoMisya0U4Zlg4Ylh2WExkdVRhZk8vSnYzdkNaZW5PcnVCS2tsbHJTMXRkZGFlMWhyYTYvOWZKL24rWXIvL0J2M2dxdFgyT0RZeUhMT1Z3WWhQYmNPRHRuT1l4NU41OWpXTWg1b05pS0RGdkRCWEhKVmRVUXE1K3BudjBxeU9lSDlQLzBKZTUrOXp6dmppSEdxUUdsdVREYUlzd0hycHNKNWoxZVNSMmNuN091Q2lRNzBBVzYvZEp2alJoSnN4V21iMEFmSDhjVTVmK09OKzN6NjVBbE4xN0VoZW43dWxRTis4dXdFZ1NOU2t0SG1JVklZTmlZVHptWVZ0cmRzSmhHZjFvRm5sd3UycENWVmlyMWJoMXhlVEZsWWlYV1dzUlprdi9udjhlMC8raTVmbjcxSEVucEVsdlBxM2piSWxNYjI5TTRSQjh2bUlPTjRYdEVhai9LR0xCa2c2aW1qelRGYVNWUTZRQ2pGbzJjWFRKdUcxZ2JxZWNsWDd4K3dzWHVENzM3eUdldTJaMytZOFpYREFhTHI2V3lnelliODJlZm5xTDdrL3EwYjVKSGlZamtqbGpsOXVTYU5CM2dQcis5SG5LZ2IvTWMvT3VIQjB4TVNiL2pGcE9GdnY3YlBtd2RiQ0NuNVpGNno3QnhidzVpNjdURUJvaUNadFIxWDUxZThOaDZ3a1VUa1k4Vm50ZVNQUHpuaGpYUkZqK1QxbCsraWgwM0hxSmdnbEdTNHQ4WDgwU1d1cVNCMEdBdmVTRUpTc0doNmxFdklsV1NVOW5SZGhGR0MrNGYzR2U3ZjRQM3Z2VThVUEsyUkNDRVk1VEc5TmFnQVBsZ01sbFJtdkxSendIcTlRa1lTQXNoNHhMT0hEeGhuS2JzN093enlGT0tDeWY0dDRzc1pEb2xvRzVaMVR4YkZqUE1NcFJUTDVZSjEwOUpVUFVtQVRNSkFhKzRNQktaTE9acGtLQzFwbXBJMDBtekhLY0o1WXRYeE83LzNEem5ZMjJYUEZXUlc4LzJQSG5Gbk1DQk9OVjF2TWM2VDVSRTZLVmpIZ2NaM2RLZG52UFhGZmFMRWMxR1dXQjhJOVFWdmYvR0xiRzRNdVpxdmtkNXgvNldiYkc1dlVLMm5hQ0dJbGFhYVh0SHREMmxhUjJjc1BTVmIvWkt0UWM3Sm82ZlUxck9aRnhTVG1LMmRNYU00cDdXV3RCQkVmKzFYZWFuN0V3YjdOeEJOaGZud1hjNjd3SDBQa1lTdTgwUlNZSHFQOGhhTm9Pc2JwQlhzREhPS1FxR2pnTkdDY1FiN1k0VXpNUXBCcERUYXU0WVFETnBKNXJOQW9neEpwdWhNeHpvWUJvbGkxdFU0SXJMSWttbEJWSHI2S0dJOG1KRGtHNVN0NTJvMjV5V2xzYWFqOVpLTlFVeFFtcWFycUwzRGVZRjBMY01zWVJVVm5LOHZLYTFuWS82Y01oNXg4dWdwWDdqN05rZXYzT1ZoL2VlY3JoWU1kby9JcktWWkRubFdWc1FvVmsxTEdra3Vlcys2YWxuVkhiZDNoaFJ4VE4xVWhDaEJDM2h3c2NTSGdMR0c1YnBsdnhoUVJKcnhKT09OKzYvdzd2ZC94RmRrdytaQThmWWJMNk1qUldWNityN0ZlcytpQW05cTZ0S0Q5eVRTWWM2ZXNtd2FsbWxCOElIbTRvckZzODlwUmNyT1JrSmpIS0dlc2VvMGpiZHNUbkpHM2hPVmptWGQweHNIUWZEbytSVzVGK3hzYjNCZTExZ1R1TGk0SWhFU0VSeTFLSEVlZ2h4eVVuWW9vVmpPcDVpNlpyVnVPYThjVDV1U1FhTEpCNHFMbGVIWmJFVWNDYVNFUEUvSkJPalFZTEIwdlVESkRJbmgzdDR1T1EybWQ0UytRYi83ZEU0eHlwRkswUGNWVGl0aUpVbG1raWlTSE43Y3d2WWRiYlBtZ1kzSnRDVFRLVmtVc0xiaCtLTVBNVW5HeWNrcHg3NkNRdU5DNEduZE1Sa1A2RHkweGdBUUVaQjRabVdEYVdzc2t0T2dtSFV4Rjh1U1I5LzVObi8wdllqV0JZb2tRbS9zRThjeDAybEx2NzVFMnA3Ym93RkZMTEdtWWxhM3pHWTE3NjhzU2lxa2xGUjlqNWVTdW01eEFWVG91VHJyMmRrQW9SUTdSN2RvTjFkY0xoYzg4SE1lWGptcW9PbmRCVjdFUkNvbUVCQXFFTG1lUGlpVWxHQUNUL28xSW5Tc1RZVVVJR3hNV1FvVzAzT2F2c1Y3c0wxRG42NndIcnEySVNBcFJrUGs4VlBTT0NaUmltWFQwVFVkSzNISzA2c2E3eDBEQ2ZWOFRiOVlFMmN4bmZQSXE0YUQvUi96cGJkZTVUdi81RStvMTJ2R2RjMm5zemxQeXdZRTlMNW5uR2tTcVpDMXd3YTRlamFsYnp2dTdFNWdiakErMFBzbDJqcU1CeFhBNFVtekdQMzdKNDc0WkkwRWVpQUhqSVJoQkZMQ3h1a1p4V1NiOVhLRmRoYXBGTnY3dDFDK1JJZ0JrNThhNEZFWUdmT1BUaXIrY3Bub0pTc0w3c1Z4K3VJZUhvZ0E4UGl6MDMvZXp0bWF2MW9lOFA4dEJWTWtVQUNMRjlkTHpxY0VvT1ZmWHVRbFNCdzcxUW5mL0ptVTUrY2wvL1h4QmVMRnRRelFBZW92bmZQUG5sTzhlSGJ4b2wveW9tME43SDEwU2VtdTZ3R2tnS0dFU01GbER3RVlNc01BV2x6M3FjTjEvZEV4T0FVNFdEY1FXTk1CR3BCQW5NTGU4aC96bi81WHY0bnBEVlF0U3dlLzkzak8vNTh5dVRxbE10Zno3LzRsZlhUenluMldiWU1JZ2pUSk1FcHlmbjVCbHNZb0lVaHlnUTRaQ3g4b2lnS0NKMjJCT3VXWHYvRUxiQjdkcExHR3pkMDlwZ1JNMHdHUUp6RlJsaEZtYzRvaVJ3cUI2dzIwRFVKWW5FNGdnTzlhZEpwaHF4S3NCNlZRNHpGdU5nZmhYOHhxZEQxamlhWVRpaUFFdlpCa1JVbzdYOUwwN2ZYYnNRYThoQ3lGN3NVcjhRYVVKaG1OaUxYbTRLVTdQSDE4UXJsWWd5b0lNbUNIbWlqTzZjNm5PQ1ZBQ25TUkU4cUczZ2VRRWovSVFXaE11YUNTQ2lFRnUvdDdJRFd5dDNSVmhmY1dxZ3Ezc1VHYXhNVFdFd0FyQlZvcE90ZmhRNkNaTFNCS2VCSnBKbHRqaEJETXJwWmtVWVRyZXhwdlVWS3lOUnlRamNhTXBXSnZNbVlxQkUycVVBUmMxVUlJMFBlTURyWnd3V09NQUNIUVFwSW1ralJOQ1UxRDhKNDRUbGczTlRMUzFMTVNuQVBoRWIvMVc3OFJVdWt3MXBLT01sNzUwcy94RjU5OGhqSWRna0JHeFRpZjhPeXpSemp0RVZKeDc5NTk5bS9mUmtaRC91UTdmNFNLQllPREd4alRFVXhNQ0o2Kzdsbk9ycGd2bDl6WUhKRWtLV1ZydVRoL3l0N2VEcjFWMXdQd2d2SFdCdWRuVTA0dXp1aU5ZL2ZXSFdhelM4VHlldG4vNXN0SExLdWFFWWJPV0t3UHhKRWdWWUtUZWMwZ1Z2Z1FpTFdrcWp2aUpDRUlnWktDcWphTU1zMTRQR0dReHFpaVlOSDJQRnExTEpZVmhNQWJSL3MwSWZENXlYT29ERTRJZHU3ZXdLdU11dW9KM3JPNW5WUDFnY3ZMQlhjUHQwamppRUdSa3hRVFBueDR3ZWZMQ21ON05nZUtYLzdhWCtQcTZna2JSWXdRZ21XNTR2REdOcDgvT3FYdmVwNCtma2ExV2pDU210M2REZUpJNDVCRVBXU1J4UFkxSVRqaXRPQXdsWHo1OVZmNUJ4OThRcm51eVd4RFpSM25WeXVzODd5Nk8ySi9NaUpKTmJNUTBWckx3OU5Udm5uM0Jrb3BiSkJBd01ZUjA2YWoyRC9rY2VWWVZTMG55eHJ4bjMzajVUQmZWRlE5akFjRHRpWVRIaTNtTkZWTElPQ2Q1ZVpRc3p2ZUlNOHpPdXNvaGVTOTV5VVg2NHJDZTZRSWpOSVlGUUsxN1JFQ0lsVlFxTUF3VjJ3VkdaR1VDQkhocFdVMFNLazZTKzhEclJIc0RRZDg5T1NNOXhZdHRaTWsremU1L2VYWDJYbjNENWd0SzM3cm5TUE9xeUczam5hNTZLN29uR0dZeGd4anhmZmZmMEQ5N0JUbkF6dVRNVlhmOHRQM2JsT25PYzQ2anA4ODVzNzkxeGp2YlNJUWxPdU95QmxXY2NMMCtJeTY2ZG5WSGNYdUFSZmxra0dVZ0JRYzdvNEo0eEhMc3NNNnoyQ3l5ZW5walBKcWhZcEJoTUNXOEJocCtONkhaL3kzSHk4eExuQm5kOHgvK1hNSFhKUWRSa2tBQnNxek54d3hLMXRNRU14WEpUMktnZmFZemlKRUlNbHlDbHVUcFJHRHRNQjZTVGVZTUQyYnNiR1JNYThxckhIczVnTHJRVHFGOFlFaXNsUlZ6OEU0NDRPcmx0NEZCcEhrM2xaRUpTWGpQRWRLV0hlT3owK3ZjRFl3VnprbVNsaC84ZXZvc2cwc3lwN1dPZ2F5cDNFVnF1blk4TmQvUStFZDRXVEJZRFRBTlJVaUJPTGVjOVN0R1BZZHk4VWNGMkR6MWdUcEJFUG44U0dnWE05c1hWTHNiQktjeFlyQWVKQXhTUVFoUktnRXZJZkpWc3JINXpPV2JZbnFESzd6L09BSDcvTE9MLzBNV2lxc2MvVGVjdjhvSjhrYUhsOGFGblZEWFQ1bThvWFhVTDFodExPTkZJSklDVzZPYzRvaWc2ekFTOEZMeVNzTUVrbDdkZzRJb3VFSTJWUU1jSFNaSWtzeThza2VvbThwMnByeDVoaVV4RHVIWHE3WjNkeEFKeEZkTWlRdUd6Q094ZkVwcmpQSUhNYmpBdU1WNzN6aEhWeWtPVG9ZTWIxOGo2WFRQSDF5VE9rRTMvcnlTd2pmY3pES2lhV2tHaWVzaVRIckJXZWlwK3d0SC8vNEoveXJYMzJEV3FYTVZ5VzFEZHpienBCRllGVlh5SHFCOHBhbWRvUVFrUmVLZ1JKTVM0czBIcnprL2tpd3RnSG5ldVRHRnI2cEtTL09jQWlLV3pjeGx4R3RpTWpTSWEyQms3TTV1dmNTcVNOa0VGek5sa1NURFVUWkllTVl2R2UyWEhLMHY4SHNjbllOc3BSa2EzT2JZU0VoR2xQa0dmakFLUFQ0Tk1MM0RVaEpsaGUwdHFkYkwxbFhhd1FCM2FWczNEbkUySTRzeTlFSWlraVFlTWQ1citodFMxQ0NiLzdhci9IaytKelVTT1lob1pFRlU1R1NOUzFYamFIM3NEUGFaS0E5UjV1YjJGZ0RnUWNQbnJEU0VxMEYwY1NUYUVXcW9iV1dyTzlZOVo3TlRMT01JWldHbzV2N0NDR1luMTFTVzBjODJzWmZMVUFKcXZFbUt0ZHNxQUdqSW1jbEk0cnhoTm1xd3hWRGZHeXBtaEpWR243eHJaZFIyVDJpalUwZWZQUWhpeTdRK1paMTNiRnlpcXIxNU5wUmpBUnhIUEZ3YWJIZG10YzJoNXlzTGhET2N2LytQYnBWeVkvS0ZmMzVLVXNEUjVrampSS2VyaHVrc0pqZzJSNE5VSzBoVGhPMERGeGVWdGk2Wlc4anArazdlbXN4TW1YZEdBWkpSanIyZEM2UUlkZ2FUbmd3aHlqWm9CT1cyL3Q3cUcrOWR2UHY5cUZIYWNHdHZRbTE4WFRla01xSUJFblhXdnA1alZVQm5LYXpGaWs5MjFuTTVtU1R0WGRZTGFpZEpWS0NVUktUUlJGMVk0bXpESTlpTWhpUzVUbkZlQUl5NHJJcWliT2NOSW1JdFdMZGVnWWIyM3o5SUdWN2xQTnIvOEcvejNmKytQdk1uMzNHdEt6NHl0RUdPN0VnOUJXdEU4Z1FLSmR6UmpzRFpsZHoycllEYXhsdmplaGF6K25hRUhwSDF6U0Vkc3BrTkthN1BHTlpOV1I3dTlpK3h5NUtyQlJFeXRPblExUmJZVWNEc3EweERIS3lQS2FiTDdCeGdsU0JGa1Z2UFZYVjRyb0dJU0FZejdMdGNONno4OVZmWlAvV1RSNS84aG1qNVhPR2UzdThjbnVQdmIxTjNyaXhqWE1CNHoxVjEvT2RUNTV6OHZBUlAzTnZpNUVPakJKSmttWDBTY0s4YWdtbkM2YTlaL2ZtQWNYQlBsT1ZvcS9PYWF1ZS9jMGhUaXVzRUxpZ21QV0JwdXFJK29hbVhORFdOUmRYS3o1L2NNeFFDY0pnZ3RVWm5ldVkrNGdmSnZlSTl3OVp5Wmd2Zk8xclNJbEFBa0pBckdNa1FBalhld0VJU1NRZ2xxQ2xRQ0RwbmNXR2dCUUJLYTRacVVDZzdnMjlEZWdYUVZRa0JBb1FVaUdFSWxMWDZEbUVjQjBDZW8reG50NEhMSTV4RXJFL3pOZ1lEK25iRnVjYzFubU04Mmc4QW9kOEVTSWxXcUdsUUlwQUZLRHZMVXBCckFTWlZzUXFFS3lqN1IzT0dwU0FXQVlTTFVFSVF2QUU3ekRHSWdSb0xVQ0JFd0luSlNoSnJDT1NSQ0dsNEhxRTRFUEFXWWMxQmdFb0lhZzdROTkzT0dkeHp0TDZRTjg1bkxmNDRPbWRJd0JhU0NRQ1l4MnpxdWZCVlVta0lOVVFDNEZCZ1BNWUxTa1N6U2pQRUVJUy9JdG9JbmljRHdnQ2dtdkVyd0lra1NTV0Vpa2tpWmFrRXJ3UHVBQlNSK2c0SnZpQUpXQnNqL2Nldkx1T0dMU3QyY05paGNNMlBWM2JVVVFweGhxc0VOUXlzSFZqbTBtV1VEWWQyZ0c5d3l0TGE1Y01rNEIxbnVXcVozcXlZdnZPRGw1QkhrbVNQQ0ZWZ1VRR2hQY0kweE9HT1NGS1dWVWxkUVhESktlczFrUzZaVFRab0ZHUzU4ZlBxWnFHeUR1Q0R3eXlHSjBvR3BWUkpEMHEwbXh0SDJGTW9FOHlpdFdTeEhzMlJqRnFuR0djb2xyT3NkWkNvZ21yRmNXdEl4SXA4ZExTV3NOQ2E0YXRZZFgwM05nd2hPRUFhVnBFQ0JnSHJTN0lYemxFNXdLckZLNEhhWHVzYVhDckpWaEhQaGl3c3BJOGpsZzBLOG9yUjltMzlGMUZ1dXg0OHRFbFRpcWVpOWM0M04wZ1R5WEdlYXEyNGVUSzQ5c0dtZVRFUXRENW5yN3F5Sm9sYi8vTm55UFNDVGMzSTZhWEsvUjZTUU1vcllnRUtLR3dlWVlVZ2xGZU1ZcHk4a0dHelk1d3puUDYrU1Y3V3hrMzc3NE1vK3NRY1g0VjZOdUtOL3FIM0E2Q0U5Rmg2em02TFJ0UytZSlA5djMxM2poa0hDR0VZQ2ZwV1Z4ZU1YbnBDSlhuQ08rcDZoVmdtRXpHUkU2aVpNVGhqVDNNWkllcjgwdEM4RXhHQlZuZm9KVWlUaFVTTUVyeS9QbHpYRkRZdGlXT05LTmJDVnRGU3VVOXk2cW5FNXBSbmhMSEVkdURqRmtJSkZGQW1KbzRLR0xYWEgrQkNkU3pDbDJYRExkem5CZU1zb1EwdGx6WWhONDd2SFdrd3VLU0hEa1lNaTRTNmc2eWtlUFphc0hsd3djWUY5aiswbjJpZ1NaT0Jxem5jNHoxaE00d0hPZDRyMmdFbUtDSVlvM01ZckppaE8wTkxsd1RMTHVqbExOR3NGeXRzY1p3WXp6azZlVVZiNzV4ajFHYTRMMWpzVjR6MEVNbXFlVGVTd2NjYlF6eFZqSmJHYVFVbURqRkxzN1kzUnFnTDg0SVFySjJCY2N6UjVFbjNOMjRTYW9FMWd1NlprM1Z0VWdDdGxxUkp6bGJXenVZS01ZR3o4NUdRMTBaOHVHSWhYSVliMEZadGhKTDZtRlNIck9xUE4xeWlVNkhFVTVjeDlHNmR3Z2hjS0dqblBjb0NkdEZ4dFpraDdQak03SkJSaFJKdXJaak1ldHd4cEVKRFVweGMydkU2R0NEOTdLTTJoaHN1NktQRTB6VFVMV09SRUhYVzVTS01FM1A1R2dmTFFVUFRxOFliZTFobktXczRkTDBYSDN5T1oyMVpLSW5DWTV5WGJIeUdTNVNkRnBpQlJ4ZlhDRjhZR1F0cm5GNEtTbTlSS1VwUmRmalEwbnNMVUluekdZTHZITjBTWVRMYzF5YzB4blAwZDROYXVNeElxSmZsb2pJVW8zR3RGMlBQbi9PWUZJZ0I1dlhTMmNVMEVvenppS2F2UUpyQTFYWDBWMDhKOXJOZVhwK3dXWFY4K0NUaDl6ODFtdTh0dk9jdUNnNDNDajR5ZkVGZmQzaUVoQWg0aHV2YlBQRFI1NzUxUnd6M0VBS3dmTGlqRHRIZTV6V05jOC9QNllYa3R1SGI3Q3VsMXhkenRoOCtZaXRQT1ZwSFdpdFlENWJJb0dtOTlUTmdpeFltaWpDQ1hoMlV2RlQ5Kyt3TXBhVGkwczBBUkZBUzBYdk9xcjVpcTZIMmVVVS9hanNLY3VhQUVnWENOYVNDY1Y0UEVJUWNGak9Tb3ZMQ3FJZ1NaeWtFcG8ydGp5Zk5UaXU0OUpvWHJPN1hYTFJhL29BdnUrSXRHVjVOV1Z2WjV0WUN0YlZIQnNFYVRIZzRueUpFcEoxMHhPVlQraXQ0K1dOTVVzWjg4dGZlSXYvNFhmK0lUOTZQTWQ1eno5NWRJa0pBaGxySEFvbG9GMnU4T3VTclR4bEkwMElCS0tURmN2ZUk3UmtNTXpST2lHbW9LNHF1cTZqdHcyVG9rTXh3M3ZQWmIzQWVjLy8vVkdMaWhRN281cFZkNEcxSHQ5N1RoNWYwUG96YklCMUZ4amxDWk5Nc1ZyWDlOWkNINmpiSGhjNVJwc1NQOHJabkl4NDlQNEhuTTlXSE56YzV1RnNRV0k4dTZPWVB0T2Mrb0JmTEFsOWpjb2lWcG1raUJXRmlRakJNVDFmOHVwQTB3Yk50RXRvNVlBNzI1THgxaEFiS2FZWFU2cnpLeTdiYTJ3eG55M1ptUXd4aVdEUkNwUlMzTHozTWxNVitMTS8vZ0hMcGtXSWdOUUplUnFScGptM1UwZnRGSThlUEVEc2E0SnpYRk90TDdodUM5elVvTlYxeGNZQWpsZHdaMXVTeGRmUzQrTnBZQkgrS3NkOFdNQnhkWDErLzRKSGoxKzBCYUIrQWVEKzJSYUFFdGdFRG5JUVFXQ2ltRi85Ty84V2YvTGtsRC8vZ3ovNEYxeitpeTM2Uy9mTFh2RHkyUXNPZm5jTVdzS1RHV3pIRUFURURvb3hQSmhlaisxT0FYZTJFeDVmZEx4MGxBQ0J6NS8wZEE1ZVBZREdnZkZndlNCTkF3R05GSUhhT0pZMTNMKzFSVlhWeU9CcDY0NnRTY2E4dHR6K04vOWQwczFOL3JmZi9iOTQ5ZVRIN0NTT3hseUR6YjRKZlBYVmJUcDNEY3lLS0hEVjlOVHprdkhHaUVnS2Z2ejVrcnN2VFNoWEM0NjJkeWpTaUNySitPRjduL0dWVnc4cGNEZ0N6M3RveXpWQkQ3Rlc4UCs4ZjhidG9XVHBQZWZWQzhZOGhzbjJtTWNueTJzUS9rSW42WUROUEdOdmI1L2hhTUFYZi9sWDBCZVRQYnhwd1FkVUhPT01nMGh6dFRGQ1NVVlQxendDNnJqak1sRWdCWjNzWVVmaTNEV1NGOEV6R0F4WWppZXNMeTZ3enNHNklvd0hqUGIzcU9vV2F6M2RiSUdNRk1OQnd1WmtENVNpZlBpUU9sS2NGd1Y3KzdzVVNjVERxbWE4TVFGWmdLOWV4QlFKdm9qeGFVb1FndEJiR3U5UVNVeVdKQ0FFejcybnFVcnlsN1o1OHZRRWxPTG8vaEY1a2ZKMC9RQ2NZeEhuVERkdmtOL0orUGF6QzV6ejlCdWVLTkxNOG9SVlhXRng1SWxBWkFWYUJMeHpxRkZDbGJSOFBPMkkwZ1BBb3hKTDdHSnUzVC9pN1owamhwdWI2Q2pqSDlsTkJwRkdKOWUvVm1MUHgxVU9VWUVQam5xK0pOSVpOVFZET3lUU212UGhrcitvRTZvdTQxNXhCeDFGL09URFQ1RmhpeE8vUTF1M1dHZXBPbytYQmZnQ2dQTHVrSXVxcFRNOUtybFdtMVNXOExTcVlEeEJwU2s0VDU3RVNHTkpKaHZjZU9zMU5uZTJxRTJQL3R0LzY5ZngzaUh3Zk9HTjEvajArSVNMMHd0TTZGQlNzVFUrWUpRcHppL21xTmdScVlnaUczQjJjVTdRaWxWdjZlcWFleS9kaDlVYVJJMFBucE9MR1dWNXdTOTk4OWZCUW04dFY2c1ZuMzc2R1gvajYxOWo3L0FtbnNBSDcvNklXQVYwZ0ZmZWVwWE4zVzA2TCttTnhsbFlMbWFvRU5DUjVQWFg3N0YzNDVDa0tEaDdmc2J4NDZlQVkyZHpURjRVTkhYUGUrKy94ODE3ZC9uOHd5YzBxeFZLV1A2ZHYvTmJmUGZlZTlSMVF6bTlZdmZ1UFg3OGsvZVk3TzJoRUh6MW5TK1RDckRlSVBMQnRheThXckM1dThPeng4K3hwdWUxMTc5QTN4dU9qNStnQ1VqaG1Zd3o3ci95Smx0Nyszenk4QUdyMll4M1hydkg2L2Z2MGpjZFdTenhQckIvZUlPTDh5bXRrQ2locUJlWDVFbkdyVnUzeWZPWUpFMTQ5UGlNdmlzcEJnbkw1UnJ2UGErK25pSDZucC83K3M5UTlZWnl2VVIySFJiRndlRStTWklTSzhXalR6NWhkMjhIcEVCcGhWY0pzNnNUbXE1bGZqR0hBUC9hYi93S24zejZHYk9UVTk1NSt4VnVIQjd5WkZZaS9xTzM3NFpSMmw0dkZaRm1RY0xXZUVnUnpMWEFRb1NJRFdzZlVXUUZFa2x0V3JhS1RiNjdzanp3a3VBQ1AvLzFyNkYvLzMvbDdWM0JiaEh4SjUvUEtFM0wvYzBoNDJGS29pVWZYYXg1UG12WnlSTFFra0pKQm5sS2xDWk0xelZPUm9RQW5Zd3hRakNielRFaGtPY2p0cEtNMjFzREhzM205TTV6VVZzU0JEY0dFZnNiQTJJbHVWaXU2RTNMUnA3eW84L1A2WnpoU3dkamZ2N2xRLzduRDU1UWQ1YldDOXFmL1Z1ODkrT1BlSXVIMEJ1K3ViZEwzUnAwcExGS1lwemo0ZWtWdzJGR21tWFh0cTRzUVFBL2ZITEo2d2U3cEpGQ3haSmwxVUNjTXkxTE1xa1lEb2VVNVp4VjA3QlZqQkJJYmgwZVVQWWRlMGN2TWNoVG5weWNzRG8vNFhZbUdPUUpxZGI4NEdRQnl6bDcyd1hQVjRiV09MN3orVGxyQjkvNDdYK2JmL3dQL25kc1dmTGJiKzV6ZHpObmtCZWtrVVRFbXFlWERhUE5pR1VYNkt5bkxrdXFMdEM3d00yQnB1a3R3aHVjR3VGMFFPSElZOFZWSGFPVDJXUHV2SFRJS05LYzFnMWowU1BQTGtueWhDQmdVUWIyajBhNHZnZC9yYmluYmN0MHZXTFRLb2JGYld5aytOUHYvaGx2TFdiVVJZWk9VbDdkRk16cWlQVnF5amplSmlWaEVzSDJUa1lrQTliMjlOYVRtSmJjUUJRbFZHMlA4NEVvRzJDRHA5V0NFQlNEWURrYXBIUkdzNWNsZU85cHBrdnlTTENoRXFaWDF4ckZNQmE4UE5SSTJiRnpkOExLT2pJVm1DMnUyTmVCMm9PS1kvNTRlczdqcDUreDI4OVFXQnB0bU0wclhybTFRK3NpaklNZDVSaDBOYytmUGFjbnNQZnFJU0pPZVRWeFpOUEhaQkdNaWdIYlFCQ2UxeWFTMW52V1ljVnllY2xobHJFWEJXend4UFVwRzE3UlB2NFFwd1MrTEVtc3dVVXBxVktNRXNFYnV3VmxGaml2T3JvUTBRYkp2SEtrV1lMT0NycFZSMS8zSkI3V1BxS3VLL0pJY1RNYnNqR0lNSTNCOWlreWVOS3VwcXl2ZVF1UkRiazlUTGhjV2ZiR0NlZkxGWEdha0dxRkVoM3FWMjRWZjFkTERRSE9WaVYxMVRDS1lwSkVFY3VJeWRZMnE2WWhvSmczaGxYbmNEN1F0VEJLQ3ZvN3I1Rk90dmpvSngrdzE2NDVIRWdHT2pESWgxaWQwcnVJWVp6Z2djY25VMHkxWkhOY2NGVTFWSTFCZTBFeUhHRjd6NVgxVk00em42OHBpZ25EN1gyeVBPZmR2L2dKcjl5L0M2Wmx1VmhnMm9idFBPSGV5M2NaSlRIZGFvcXpIU0lTakJKSWRVUnZleElaa0RKaE1reVpWd0dMaENoQ3Zmd1ZqbWN6a21aRjdlRHR3eUYzOThac2JBeTRhQTJWQzZSYUlpS05TalFxaWJDckpYRVUwNnhXM040Y3NWMFVaTU1jcnhSRzVOQk1FYUZEalkrbys1Njl6UTJDNzNDK0o1R0tUSUNTZ1JpUER4WXBZdHJlNDV5aGFYczJpeGdySWtvWDJJNFVrMFR6c0hJOG15M1p2M2NQWDFWSUxmalduUW1sRStqb21xSGN5RElhMDFNWndhVnhHQUtqQkI1ZkxGbXRhbDdhR2JLVHg2dzdpMjBiMm1aRjhHQ05aYjFhb3VOaWc1QkdkRXFnOHhobkZIRmVrT1k1U2dsT1RVY2lCVW1hc0xJV1p5eXoxUklmRDlqUkhhcXJVQVEyRHJkWlBKL1RCZ2hCb1pVbWx3Rnl5WG5aWUlYQUppbWpKQ1dMTWdaUlF5SkFPRVBYTklBa2M0cFVhRTVDNEdJMlkrQXRSUnp4dFhmdW8rdExoRFVjRFF3QkVLMmhuWit5c29KbFBNSktSMnhiZXBHeFdxNHBVbzMwZ2VscXhjSEdEcHREZ2FnRGRkQlVzeFd6NlpTd25DRUM5RzZEelZITU1tZ3U1aVdOOHh3T0JzVEtVd1pMS2oxRU1jZlRGVHZqRFVRa2NCcDBwSWdJbkpWTGhsTGh2R0FTS2laYTRhdVNWZDlqWEtBdUd3NG5ROUlzSjFhQ0xvMFEwUURaZXdLT0ZwaldMYzRudEwybmNpbENhTkx4RHBQT2N6RmZVUlF4MG1VVUcyUHF4cktiSmFTUnBOWXBUalVrdnViTjdURkZyRG1aR2NiakFsMmtOQVl1SzRNMUFlOHRvN1FnQkEvV0V6dUxWdXNPSHl4b3lWZ25PR1hKdGd1S09NSmFUN3V1cU91YW5mMGM2d3pXQjJ3NklvMWlYSkFjM0gwRjRpSGYvZDZmTVZvc2lQWTNHUThTMW8zRmVrdVU1OHptVTNycmlLeUExR0pjeCs0a0ozaFlyMXZhdGlJeFBkdWpBVkpKbGg0NkQzN2RVd1pEbkZpbXl5V0pUaGtPaDZSYTBvcWF4S3dwa2hHZGtUZ1JtQzBiOWlkakJ2a1FiOHRyTHJ3b1dGY2RtNUdqaWpYTk83L0syNjkvamYvK0QvOFE5SURFVzViV0VIeUtzeDAzeGdXdENRZ3BLSnVlY1o0UmhHUmU5OXpZR2lPMFpDMWJXaUhJNm9yV2E2VHZPSjJ2NllPZ05BSGxCWTBLOU1aaW5jY2F3eE1idUxzdGlOT0lVWjd3OU95Y1RpWk1CZ214RWxnZmMxeDJCSm56VTEvK2FaSkVjL3E5UHlXS0pSKysvNWlmdnJPTjlCSnBBNGVEbk5wck1KN1BIbjdPd2Q0R1lWVVJoZ1VpS0xUT3VUbnFLWTFDSndHdkZNVkFjemxkRUh3TjRSclB4Rm1FdHFGaVFrYUNJc1FEMUdCRWJ3Vi8vdmd4dllOOE9HYXlOV0lZUnh5TUFyMkg2YXJscy9Ncjl2Y21ERXpQWUR0bS8zQUx0MzVHMlhvV2xTUG9tRFNPbUhZOVFnWHdZSU5DZWtkcmUzelRvUkY0NHdraWtJMUdxRndUS2NFUkVUT1J3bXBCYVJ5amVJaUlOL0QxaXE2dDZBWFVmY1ArOWo1eGxqR1NDdkRrMnJPb0xRZmpHQ1d1alpXNzJyQnVIQWM3RzlTeFlQeldGL24yVDk3Rm5UMW05b0picU5veDg3cGkzZ2VNa2tncDhFM0RaQkJSWkVPU1dEUHNQVEpXekMvWEZMSENTOEdpYjhraWpRd0tuWTV4TGxCVmhzZ0hEbTdza1BrbEFjZEtnUllLUVV1S3BlMWpKa2MzdUx5NlJBbVBFcEp4bHFCMVFUcSt3WGMvZXNLMHFubDZWU0lpelYvL3hrL3o5TDMzYUpZem5zOHozcnE1aFIzdG9wVGlNQmphdWlIZjJHUFpLNWFOcFZxdHFEdUx0U1ZhSk9Sb0xJSkNld1lDck8wSnpqRmR6dEVxVm9ySHFCMEFBQ0FBU1VSQlZLZzRRVWN4NmY0bWp4ZExwQWtZbmRCNVI1Z3ZTRzNLWEVocTEyRTlOQ1lRSlpLTDVaclBQdjJBK1BJVVlTWEpZSWp5am5YVHNEdU9tTGMxeWt0QzB5QzlvMGhUVm1XTjdzTzF2MTlDNXkyTFZZVjBuaWdrUkJJeWI5ak5jcjczNUJtMWc1M3NnR1haY0g5L2w5cFlPaCtZTnBZSmtzWXBaREJFQkdaMXpTSTRYdDBZY2JhcWFaMW5WS1JZMzlORmV3UXAyVHJjWTNSeS9sY0lwaWhKU1NZN0pQTWw2b1dQejBTT2k5bUtPMGN4a2ZMYzN4Z3huV3pTTlMycGFVbVZwSXhqbHFzbHc1MDlUcDljMGhoTEloeXBnT1hGSmZlMmh5U1I1c09Wd1ZRTk90OUFaVEd5YkZDTE9YM2RzakNPUkdsSU02SnNCN0c5dyttN1A2U3NhOXhxeWUyWFhxWVlEZmx4MTJKTkIwYWdUVWQ4L2hTRVlwQ09TSWNqd21ERTlQRXh4amhBSTFWUE8xdmpZNDNSa3JhcW9HL29wRWJHS1RxSnliVkdGNXM3akFiWnRjWFlRYTR6a2xqUnY1QmlTK3ZRc1dhckdPSkxnZkVCNzJvMHNMTzl5ZDE3dDRoSFkwNmVQa2NxY0NGUTloYlYxRFRHVXBxRzdjMFU1K0I4V2lHOXUwYnhiWXNXRU1VNSsxdUN0aE80MXVPQnJsL1JHY21ydC9kWTloNGZQSWZiUS9KYzgzemhhWTJuS0RRWHJXRjZkY0xOblUzaStEcmNLVFMweHVMakRHczhqNllOVGpwbXgxY01obU0rL3NGUEdPUVo1Qk9vNTFoQXFJaXo2UW9oVTNxelFvaEE3eHhGcHFsbkN6cXA2TFkxejQ3UGFMcVcwYWdnalRWZEg1RFppR1ZaWW9KQjRvZ1RoUTBSWjNYRG9FOFpLMEdFSTBwanJzb1ZsK3RBTUlGNE5FUnJRVnlNaU9LSXB3dEhQN3ZpUmxjeUdtK1NaZ015QXJwYjg4ZC8razhSSWtMcmhNckE4YnBoSlRSQndDQXJDUFdLYXZHTXB1ckF3WGFoYWRjQlVjUjRWOVBVNGhxZ1Job1hMS3Baa3NhU2kwYWczNzFxYUU1TFhQQW81VW5qbURpQWt4NkI0SFRaWWV1V1lyaUdTQkZKU1NRaUdoZXdhd3V6TllOc3lOUFRTM2Jya25PZDhxeTJSS3M1WFcrd3ZjTUlrQWpPVmcyaGRyeStteExIMTY1ZEZaWTRIU085b2JMWEhvTWdFa3pkVXRWemJBalVlL3RnUU52QVNlbHhMcERLaE1UMkxPWVZUeGNsbVJiZ09pYVI1SWZuSFZYVkVvSm5XbGt1TGhwKzVSZU8rTmw3Vy96OTFaTDFhczdldlh1Y1AzcUE4cFlQbjgvNTgwOGVzemNxR0dReHNaS1lya0ZLR0JZSnJiTTBsMCtwbWg3aExjZDVTYUVFZlJ3enJTMERBYU1pUmthYXE2YWhWNUsyZDV5ZkxZa1Z0RlhMMGZZR0Y0c0c3enh4bERLZmw5Umx6ZFo0aGRLSzAwWWdqZUZpdFlFWEVnbW9TSE5TN0RHYjF6ejgvcDhCZ1I5Rk4vblI1UXhralBFQkxUNUFvR21kSVFzR1F1QmduTEpUWkloRTgzUlY0OTAxejE5SGNQcnNsSmQzdDltMGt1TzJSZi85VHk2dXpmQkNRRzJ2MTBYeHdpQWZYaHk0QU9mdFA5Y0xyaDBIaW9NZCtNMmRBL1p2SEhGNDZ6YTJLdmh2ZnZJSnB1dklzZ2p2Sk9XcWd2YXZ1dEwvc0haNFkwRENjR05NbGhWY3pXZE1OalpCQ0dheks0SnQwRW9qcFdSTFMzeG5XWlRITDdDRXg1VVZEQWJROWlERHRYR2xHSkhyYStOR3BCT2tFRmd2Y1RKaDJlWThTMit6NkF6SHo4NVpOUldrQmM1NS9vK0xHdXNUd3FJaUh3U1EwTFVkMjd1N3JPYzF6bnY2MWwxL3VWSEVqaGdTeHhHKzlTeWFtdkVnb3pydkNBR1NaTXo1ZklFM2p1R29RR3VGdHpIWlJjb2d5bkI0cHV1S0VBU29NZjZzQXl5OVY1aTY1ZFVzWVRqSUVVS2lSam52Zk9WbitjUC84WCtDM1VPd2hyLzMzbk5JL2tYMmdrNXo2QnU4QkY5ZFcvSzM5d28yTnlOc0NCVFpFQ1hnNG5MTytld002UlZGMjZLMFlqU2NvRjk3K3lzTWl3SXBGZWVYNTZnb0pvOGladVdLWUN4RmxoSEZNVzNYWVZ0SDhKYWJOM1lnaWJsNzR5YVo5ZGl6T2Z2REVUSkxtRyt2Nk5xT25mMU5Sc1dRZkRMbXovL3A5N0Y5eisxYk44aUxBZHQ3Ti9qdzQ0L3BtNFpoRkhIbnBYdk1WbXVxdmticWhHTHZKazFUYzJOdkQ2RUU1ZXljN2YxRGpvK2ZRZWR3enJIejlnRTZqdm4wMFNNVUFRVElJRGk0ZVp2cDJSbkN0dWhJY1dOM2s0dUxKYnQzWCtQZ3paL2k1U3psMXNtVUI0K2ZrZDQ4d2h1RGRZNjY3YkY5ajVRZXBTT01jUlN4Smg5SmdnalVaVTA2R0dLYWtwMjlMWlRTekdZclhIZEY2Uk5NbkNLa29EV1dsNDVlSm9vVWQxOStCZGYxdkhyN0FLOGlMdVpMbkxXVXF4Vmx2ZUwxMTE3bDlPeVN2dXVSU2NhVFo4Zk1UNTd4MjcvMXIvTkwzL3pyeUhpSXNSblNXMzcwdzcrZ2JUcktxbVMwdlUxWnJURjl4N2dvT0Q1K1J1dEFiRjJ2QUJ0Ylk3d2VjblYxU1JrRVNraHUzWCtINWFlZklkcUdiSGVUSkUzb0xZaS85eHZ2Qk1PMXdiQnFLNkkwUndUQnRITjAzbkZqR0xPbDROMkhaN2gyUlJzQ1AvL2FuV3Y1T0VucHRVQUpHRXJKZkhyRndpazZDMXNiR3h5a2d1UFNjdnI4bkxPNjUyZmV2TVBkZTBkTXB4WGZlL0NFZFdONGJiL2c5VHNIUEwveXhCc1pRUVQrdTIvL2lCL1BQVi81NnRkNC9hM1grZVVkeTN1WFM4cVBQNmZJRlZKcGZ1RmYrUmF6WUhnNlhiQjBDaFhIUk5hd3NYdkFKeDk4eWx0dnZjVCt3UjZmZm5iTWNqSERHb3MxaHVlZlBlV1hmdjF2OHNtVFl4YXpVM0NPTjk1OGswWGRjdnpKUTc3MFU2K3p0YnZEaHg4ODVPenFqQys4ODJVMmQzZjQ1T09QS0R5Y25SMlRLRTh4eUpsc0hmRGhvOGVjUG42R2p6S2lvbUJ4Y3N6YjB3ZVl6akw5K0dPV0tIN3RXejlQdjJwWSsrWmExb29LVWhXNHM3L0w1NWNscTZhaktCU2ZYbFJJMXpNdUVweUZ5NmJuY0dzREtYTkdneGhqRGI3cG1LdUUzLzNvQ1gxditUZSs4REwzZGtlYzE0YUJxVEhPOCtycjk3allQK0M3UDNqQXkwY2pvaWppamRlL3l2L3llNy9QSUkweGt4RlNLNDZmWGlGKzl6ZS9ISmFyR2IxelhNMHJSdU1SMFhEQ1lqV243SG9pRzNqOTdpMCt1cGdSdFNXMTlSeU9DNWFyQlY5NjgwMnN0ZFNkcGRDV2dFSVVRN1NPcUt1ZTgrV0tzM1hKM1V5eTdCMzNYOTZoRUpLcUdIRXlYYkdzT2dhSjV0YldGazFWMFp2QVJkbnluL3lmN3pMejhPWlgzdUgxVjI3eEg0cFRSSkd6N2d4SkV1T2RwemR3ZW55Q3pqTWFJVEVoVVBVRzN6dk9wek5HV2NKV0ViTzJIbWNsejh1ZVJFbTJ0T2ZlMXBqM24wOFpGZGQ1Z0R0NVRDY1R2UEZFaVNmWG1ua2RpTFNpR09jTXNvakh6MC9ZVENSQnBvenlhMEluRHA3M0w1ZWthYzdWVjM4ZFBacndSMy80YmI3MCtaL1NkeDNiS3JEdVBVV1I4c1Y3TjhsaVJmQ0JwN01WV1pUdzBzdDMrUFREUnl3YXc5MDdFNFJRQkFlWGl4TGpIRTFkYytmR1BsVmRrVFlWS01VYnI3L0M3M3h5aXUwNjFsM0gxeVlKdTZNQm41eFBTYklVRHh4dUREbGQxL3pnOFJrcEZ1L2htNi9lb0c5YjltL2Y0Yis0ekxsWTEzend5UU8wQ1k0Z0pGSUZwQlNJRUZCYVhpZEl3blZpb2ZVa1NpR0ZJQk1DVGNENWdQTVc0eTNPV3pybjBUb21WaHFsTlVwNWdveHdYbU44WUJBckVxbnBuY1VMMEVveGlHTUtGZWlkUlFmd2VGUncrT0FJUVZ6THpFbEMxdldZWHFPRFIzdERyQ1I5MHpIMkxabE9hSUxCQVgza3FIdEhsbmkyTTBzV2VjcHdqZkpWN3pET2NLZFFITWlPTTFxR0loQXJ5YWFFcFhjTThvaWhza2hoQ1VLeWsyclNKSkFxUXlzNmNoOXdVakVXbGhpSWNPaXU1cUp4dUxZbDNnajByUVh2Q0M0Z1U4VlFYM01memdmRXRZOFRMUVZhQ3J4eENCRlFBdkFCcVJ4ZUtJSVNoUEFpZHpKNGZIQW9QTjRMSWdVcVdJUnc1Q3BRS0VrTWFHL1FMaWFMSlNNTWxYZnNhQmc3QTBwU21CcG5EUk5ocjNNUHBhQTFEbjFabDRUaEFSNkZVelc1cmhpTXRubXc3T21VWVh0a3dSdmV1akhtMmRNRlpiQVkyN0c3T1dSNmVVSXNGRUlJOUdETWNHc1hFM0lNc0hWN3pMTmhpZXdlc0Zhd25jVk02NFRKalFOMElUQ053SXFPZGoxRlJ3SnBNNXlLMGFsaWV6aWtLWHR1M2JuRnpzNE8vYU9QS0hKTHVlcFlWZ0VsQkUxWklUUWt0Z0VDSGtqUVJLa2p0T0NibHI0WGJJMEhMS3VhMjZuOGYrbDZrOWhKc3NTODcvZVcySFBQLzc3VVh0VmRYYjF5ZXBZZVVqTkRrYUtISHNveWJCaTZHUGJOZ0FYZjdadDVOM3d4WU1BbkE0WmdTQllNMGFabGJ1Snd4TkZ3T0RPY2ZYcXZxcTdsdnkrNXh4NHYzdk1obStMRnltTmtKaUl6SXlOZXZQZDkzKytqYWgwaGtxUEZnc05CZ0JEcjVJNG5KR1BmRXZvTzR6UU8yQmxGQ0J4WmtWUFhnbTRjNFZtRDE0c29paFdWdGVBMGlWQ2tTckY3K3liOS9VTWsvNHJyeHZIdXdSaHJXMW9oNlhkN2RCS2ZvcTZ4VHREcjljblRqR2NuSnlUZEJCMjNWSzFrZGo2bE00aVpGd1hHckIxSUx5OHVVRGpHV3pGN0hSOXJNOGF4eitYbEROazYybmlIcFF3UmZoZVorRlE0UHIxYWtBUURkamMyR2FnVTExb2EyOUNOTkFXYVRoTFRzd3FLQ2gwcXVEeC9paEdTNitGZFZwTXJIdllhN25SOUNoOWVUSmE4ZlBHY2I5emVwQmY1SktGUEVvUlVwcVVzUzNUYzRpdUpWZ3BzZ3l4V1dDdndSeDFvb0RHTzVPRWpOcmJITEU3T01ES2h2Sm9qakVXaWFHUkVsb0lrWXp6ZVp0RHI4VHZ2M09PcDJtUzZ5UGp1ZDMvSXNEM25xNi90STYzQk53WWxCQzcwb1c1cGxjQVp0N1pydHdaaEpXR1E0TnNHYXgyMWsyU3R4SGNHVHdDZXdEU0tVaWtpMXlBa3JJcUNqWDRQcVR5TUYyTXNoS2JDYUpCMWpXa3NUa2xVa2lDMHd5VmRuTE1FZVlIMWZLcGE4YXVQbnpGSUxYVlZrTmN0dlRDZzMrOVF0QTRwQWFsSnV0N2FHZVZDcXFLa285VTZBQ3ZoZXJVa0RoVlJHTkpOTXdwbktPWUdHMGllUFQvbXJZTjNlTGk3d1prUzlMd1Y0NzBSZGR1U0xhZk1oVVZyaWJtNElsU0NwcmZCOGVTU1h1U1RWeTNPT1Y0MjBJc2NJeVg1NXUvK0F5N3ptbW1lb2dmZFBydTcyMGdFbjE3TnlUcWFwOCtlSUtTSFFMQzNzVWN5R2pJdFY0eDBCMm5oYkRMaGNIZDdmWEM3UFNKUFVaY05icGtSYm0yRDB0akFveE5VM043ZllSajVERU9mZG5zVGl5VXpIbFVoYVF4SVB5RmZMZkdOUWVvRmllL3h6YnNiL05YZ0hmNzVuMzhIbXkwNWFsZk1yK1lFeWtPM0JnSHJKRzBZNGp4TmxaYzAxaEhFQVJLUHJtdklWbE5hMDFKWExTQVJZYkllMG94bFVoaDYxckhkaitnSGt0eEovTjZRVkVqc2JJNFFRSGNFcnNLRkR1Y3N2dWZSbENYS1FsQXZrRUlnTGZpOVBzMTV5ZDNiV3h5K2VwTS8vOE9JRjR1TXE2eGhvd3RTQ0M2eWdsQ0g2NUNKRUtoR2NtTjNtK3p5bXBlekdYWHJ1TXBxRG9maE9wbFVXMEtwMlQzYzRlVjh6aXQzOXNtYWl1TjVTajBjc2VGSmpwWU80eHpwYWtXZExVZ2J5Vys5OHdiZEpJTGhGci84OFk4SmxLVVo3Q0FSNUlzVlpWM1RYczVZemFjMHlzZldGYnFlWDlMdDNhVVQrR3pFT2ZuRmdpcHR1VHlmVWprWTlQdnM3QXk1c1RXa1FpT3hkRG94VjlNcnJKYVVXWUZVQ3VjQzBralQxUW1Gc1d3MUpVT3ZZdWxyN0xMZ05EK2p0ekZnZUxETmFqbkdsQy9YNDZvb01HVk9yQVIrUGFkcEpOMW96TDIzN3JQeC9nYzBLdysxbUZMVkZVS1ZKSUdQRUZEcEVDVWMwclZFb2tJTENUYkdrdzRuZlR3VklhV2xzUUZ4QXZwejk2S1NHaEZJVGk2dnVURWVvdU9RMERtSVlxNVByK243YXUxSklLT3RhcHEyeGJRT21TNkpQSTJ0U3J4UUk0UWs2SFhoYklsV2d1T25ML0NUTG9lM2JsSjkxbU1ZQ3B4V1dOdmk2cG9zS3pBV0JJN3A4U1YzYit4QnAwZFFXNVJwNlJ0Tk1abXgrRHkyYllWa3Z4dlNkem16cWtKV0ZaUFpuRG8zcE1WcXJhU2FsaGVuVTI1c1JJeGpuMDgrZUI4aEJidmJZM3F4WWhURnJCZTJMYk91NEd4bDZVWUI4OXJRQ0Vkdk9FUjNSM3VrRnhjMFNwSlZscmpYWXlZcWRwUWpjNUszSHo3Q2EzTmk1YWlxQ2ltZ0NDT0t0aUdmTERDZGdFR2dpQVloT3V4eThvc1BXRFNPK085OW1jQnJzQjJQN0hMQ3NpalpGelZiT3gyYXRLR2FYMkNxa2hhSFg1UU1BaER4R0ZySFpMYmdULy9sSDVMTjUwaFRNdlFhVmtWTkU4WkV5cUNGd21sSllXb0czUWlQdFpOSWk0YkcrY3puR1ZYVmduTkVYczFPTjZReEZnTTRKK2dIZ3IzYjJ4aHB1Y29MTkpLa0MxbzVWb3NsRGtmc2QzRU9zalRER0V2WDFRU2RoQWFMTkMwU2dhZ1ZVZ2xrYTdoSVY2eWVmTWI4Nm9KSGtXU1lSTHk0dUtadURSMC9CdTJRcmtRcHhXQjdqUFFrRzU3bVhBWFViVTNSVEluRGdLM3hBTDl0S1UzTDZmUWEwWlJFeXFOb1d1cTBSaGRMWWdXVFZRWkM4dFczN2pPSVErcDBpWlE5YW1QeFBJOVFTYlIwTFBJMXJjU3BrTTBrSWNidzh1eUVlU000T1Q1R3o5S0NUaFNCRkd4R2tzZkh4d1FPTm51Q3FvVWhVeGF0NW53eFI4czEyTWs1UlRmcU1PeU9pVi8vT21FUThPSVhQMk5MUktqRHUwU05aVFV2Mk4zYTRXSjZUdE9BYXdYTFNjSFJwRWFzTGtqOEZ0ODZXQzZJcUluOGdIbVJVUnJEUEZ1UmQyK1NqSWJvSm1DUWg1eXZNbFNha3NVV0tUUnhJc2t0VkZSRW5pTlVBcHlnYktBeUdsRVhHTmR5UHA4VCtSczRXZEsyRHRGS05vU2dsWUtMMmZwbWJqdnhZQ29JUklVZXhsU3RwVmltT0cyeHhtTGFsbVUycDdjNzRtS1NvNnYxY3ZTQnFxaGJpUkNTb2Q5QldjMzA3SXpEcm8vdldxSkFvWTFFdXBMV2FoS2xrY3FSMW80ZkhtWDh4cGZlNWxDRUdOT2diTTZPMXRSTnlmRThwVEdPT0xCNERqWUN5ZEY4UmV1QXhuQjNIUFBtYnA5V0NENDluL0xoc3drUE5qcHJwM0JyYWFRa0NEMnNhQW5EQkdzZGk3cEdlWktvMytmdS9RZGNwQlZTL1EzaWYvN2RPODZYSHEyMWVOb3h6MXZxMlpLdGpzSktSN2VYOERSMXVMS2hrQkxwSEJmVGpJUHRMVzVzYmpBUlF4b2d6M0x1anhQazdnNTUwZkQwZ3cvNXdsZS93dVJxU1VGTFdwVE1aak5vTWdKUjB1LzZ4SjdDbFRVcVc1S1psdWZ6aXJxeEtGL3hlT3MxanVaTG5CUHNPQWlQUDJTb0trTEZPcGNvZlNvajBFRkkxQjhSQnQ3YXVCS0U5TFdpMytRRUdtcXpYZ3VmWmlsdGExa1VKVnF2MDB4TlUyS3gyRllRaFNHKzU4aHFoYkdXcm1kSmhLTXdGdWNzc21xSVFzbGxBY3VySENQZzRLRExOSzF3MFpnbi9mc0UvVEZIc3hOZU9mc0VUMG5jNXpNazUxcUVkUGpLUXdwQmlXQ1I1dmhTNEVjaHNhZFFXRHF1SmMyTHRhTG5vQmQ3aERTVXJjVjVNZXJ6TWIvVENjaXNSU3RCMjRKZkZ0dy8yT1prVmJLc1c3UnIyWXcxVWRCaHFkYlQ4SzA0Wkd0L0Qvc2J2OGNUNHpHWkxQam4vL1NmSWY3SkYvYmMyV1JHYTF1MkVvL0xwV0VVZVlUS1lKMmpiRFZYYWM3SnhMRS9XTXVuNzErdi9mbHYzaHNUK2dIT3dTZVhFKzd2YmFOOFRhZ2xoZlNvV2sxUkYweXpFbXNkMXVRMHN4bmQyTWZUSVo0VXFDQ2dKeTFWVS9MQmRVWmpIWDROajZPSTE5LzlHczRKUHZpTFAvbjNzMytBblE0b3FSakVIYzZ2Rjl6c1IzeHBiNGd2QlUrbmx5d3JNSGhJNTNCMXdXSUpTK0QyUmtRZ0JTOW5PVmtMdHpjRGRGVmhHcGlsOE9ZT3pQTTF4eUJXRUlSd3RvSlJUMktjNWVVRjFCcGtKMlRuTi84RGtzR0lYMzd5TVUrLy85Zi9IaUNQWEFPQVN2di8rL1FnRm1UVk9wdjR0NCtlaHBVRjkvbGI5T2RaaUpFSFFzRzBoRDZ3UDRMVEdSaTNQamF2anVDMTdRMWVMbGVZeHBLTGdKM2YrbTM4OFFGM1hyM0xlSFBNSC96aFh5QTZ0dzRkYllOdEhXVlJZSVdHdXNUejE3dy9wZFl5cTRyaXRUSFVDVHd2b0NtV0JKNWFjMm1jdzlMUTdjWUVVUUNBcjBQcXBtRzZXR0gvOXRPWDFWcFFjZ2E2RVRpSHAzMmFzc2J6QTVwR2cyMEpQTW05VjEvRElFQUpqcDhka1oyZXJrVWYzMXVMVlorTFZGNGNyczhZS2ZHN01iYXUyTnNhRW9WOUVKTExpeU9zZFd0bnJITWszUzdUODJzb1c1TGRIa29wbFBReGJZMjFyTTljUURwSDRIazBaaDFRemNzUzVSemIrOXRrV1lFRDZyTGh4dDQyQndmYnZQUEZMN0MxdDh1LytJTS81bTkrOEROOFg1T21xN1dRdGtxSmR6Y1k5Z2NvM3lQTGNzSXc1T3pzakNnSWtFSlNXNHRvS3JaM3Q4alNIQUhFWWN6Zis5clgrUER4cDV5ZVg2NjFDZ0ZabGhLSE1kb1BjS2JHT2t2VTdYRnhkWVV6RGQwNHdmY1Z0cTdaUFR6RTA1SitFakxjM3FSeUhzdnJhOExBcDlzZG85OTc1MTM4SU1JSmlEb3haVjR3dmJ4Y0d4ZVZ3aFlWVWVTandnNkxWWVkxaGlSVTlNY2psUFNZcmpJYTV6ZzZlY2I5MjdlNXM3Y0RTS284cGE1YnBvdU1xOW1FdW1uV2ZyaFdjblo2d3F2M0h0QkpZdDU2ODAwK2ZmYVlVQWYwQmtPVWxOeTVlWU12L01iZjU3dmYvaVBTVmNiMGpTbEtDb1plUzdKekUrWDduRjJjTWp1K29KTjB5ZW9LSjJHUmxyei80eC95bTEvL0JtSGNvYXhxRnF2N0tBZkRYZ2ZUR043N3htL3o1OS81Sy83cWh6K2c3NEdXa2pkdTN5WGM2REdiekxsMy95NUp0OHZGeVRHMzd0eWhXcFUwVFUzdUhKODkrWlFIRDE5amVqYWhMSEkrL05YUHVIMXpsMXUzYnVFMU9mWDFPZS9jdlVtM3J0bC81UldTN3BpbWFmamxqLytLOTk1N2wzNS9oOWEybkQxL3htLys1cTl6L1BJeGk2dHJoUFpJYTh2MC9JeXZ2djFGU3JPaUxqSSsvdDczdWVrbURCL2U0cGY5Qk5zNlhuLzdEU2hMM25uMGtGdTNiL0dqSC8yWVRyZEQyQi95WjMvNko1UnB5dTkrNjV2TTVqTjhWeE1sUFdyVDBsUWxqMTUvaysvOTRCZVUyOXNVeXlYdnZmYzI0bi80dlY5emFRR05zM2hTMFlvYTFiYkVjUWc0THErVzNOdnAwNGtTbms0enFxWWxxekx1REdJYXB6bk5DeXJiOHQzSFp4eXJpRzhrSWNwYS90TlhoK3lQdWh6YkxoK2VUV2hNeldzYm11ZnpsdWVMQlRlREFFOUtOamI2ekFyRnFCT3Q0OVBXTXNzYVBsc1ZYTTRtYU9IbytKcW5qNC9ZZi9BS1pabURCZFVhRGlMRGpTU2lGQWJyQkNlcEpmSWxyeDl1a3dWRGloYnU3VzF5L1BSblBIdHh4YlJxZWUzV0RmN294WUx2VFZKMngwTkNhL2l2RHJzYzlCTmV6dWUwYlV1a0JVMlo4dWpXRFpaWlEyNWFkQUNac2R3YWRmbnU0MU9zY1FnVmN2dGdpQitGMkdpSUZJcko5WVJOMzdLL2M4QjNQbmxLYlF6TG91WGVNT0xUeXdXbGFkaFVnczF4SDkrWGRDT1A1UFBwNWZFcW82UFhlY2xRQzRybGl2RzR6M2taVWI3M2RjWTNidkRwTHo3bWcvL3ovK0R1S09MdXVJT3BNd1pKekZZM3BHMGJaa1ZEMFhnOHU1d3lqZ1F2MG9iU09FWkJ3UDJOaEtOcHhuVmFNaTBidG5vQmVubDBpaC9IYUNCeEpYN3NvNnloWEJRQWJNdUdublBzUnpWem1aS0xscEdxTUkySHlLN29Tby9ZQ3U0T2h1eS84UlpQLy9YL1ExdERzMTlqZFUyZXIzaEl6dEk2Nm55TCsrR1M2aXFuRzRPdkpKSEwyTm9kVXBjMUVrRWtMVW03d3ZmWGFjQzZhZW1IbHErOWNZZldOaXdXYzR4MTdHMlA4RnVESnh0OFd5TWMrQjBmSVN3aldmUEFOMlJHc2p2ZTRlZnZkeGlOV3BLbVpicGE4V0N6UzNYekRrK2V2OERZbHRPTEM4cXB3TlNnVk1zVjhPWFhidEEvUE1BKy9SQnBLN28yWU51WDFNNXljOVNucVZ1MGRkaDhnWExyeTdDdkZNOSsrU051ZlBGTExGS0xieTF0M1JLVUthOE5oOGpXc2lwcVB2ejBHYThjN0tCWEU3eWlRa3BCcnhlRE1pZ3BpRVdPYUNFT0ZQUHJCVkZvNkNRSkZEVi8rUmZmNVMyYjhaVk94S1BFOHVjdkx2bkNWKzZTbGhXRmd5Q1ExTnJnRHdNMk5mUnNSVm9hcm83T3VEVyt6ZjQ0NExITHlZU0ZrNWZvS0U2Z1NYR3VKVXFpTlJ3cFNCQ1pwVzR0bzBIQ3pVNU5iUVNKVm1nbmlYMDRYODNwUlNHYUZxRWxHLzROenFPUWVtc1R0OHJKWlVUc09VWXE1LzNMRmFXRjM5b05LSnpnL3Q2UXdocGE1OGdyUXljdmVINDJZYmt5Q0tuNHdyM2JkRjNOTFdrcHJXV2oyMkhUdHB5dE1yeXRBYWExaE5xUzlFZjBwS014SmRMQitiekFGaW1uYVBUZU50YnpLU1hvL29qSlpVclpXSXhwMmRnUCtmVjN2c0pvYTRzbXowZy8vRXMyWGNQaDNnR1Q4M09hRnFxaVl2cjRFNnE2d0FtQjM0dW9QSityR2RUV1lJUmxtcVYwYzh2NTJUWEVFWW1uT0R6WUpYUTV3Y0JqY09XalhjdUduK0JYUzJ6UVFXckZLdzkyYWROTHRLMXdhczN3OFV1UFVTaVpGelZHS3dUUWkwSk9WZ3Q2b2VQbytRazVtcXFzY1U3aTlXTTJEMGE4RjRkSTdaSGFrbW5lZ0lDTmppTFdqbTRJNWRUUlNzRXJyeHhpaGNabUsyaHJQTzA0ZUhDQTNoNUZMSmVHcG0xUldsSFhGYTdKTUVKUkMwY1N4aFRXTU1rcW1ySmNNL3BDZ2JPU0Y5Y3JIdXgwaWIyQVRxRklWeFd1MDBjNGdlOUFXWTNuU2I1NE1LQzBBcXU3WEM1TE9qN2txNEs2YVZua0M4WlJSRGVJbUU4dUtZemxaSHFDakdMQ3VpSVJqcEVwdUJZK3NSY2lnelVRU2hVdDJpbTZTcUNIUTZ4dy9QTGtBenBZQWsvZ0FzaE1ROCtQcUozamFKcFRtSkpoMStkOFZsTzllTTdGZEVhVFpVeWVYSEgzNFNZYXgrSDl1MnkyamlEeFVXM0pWbjhUSndXbGxSelBhOTQvbXhEWUVrOUlkb1k5MHJ4Z2J6d2dFSmJDR0U0bU9XNTdTUDdzWTZxTEM4ckc4T3JkWFlKaG43ZkxHb1JpR1hVeFRibWVRZ3FGTVlhcmsxTUdVVWcwM21JbmxDZ0p5NkxCQ3pYejVaS3NLVWlkNU9qa0JhLzBvZWZCcXlPZnJHeTR5Z3hGWG1DQ1pKMndkaTJSYUNscXk5dGJIUm9IczhxUk5TM2p3WWozUnYyMWV1dHA5SEo2VFNzVnJiUGtqV0dVUkt5YW1yeHN5SzBqVFVzYTErUERkb0M4ZW9ad0xRZTdDbCtESDRVb0RLSFdQTGkxeGMrWE9WbWVJL09hakI0cEhyNkVLTEIwaE9RcW5STTVSOTVJbHJYQkdVYy9UckIxaXFzYXRqYjcxSzNqZkxMZ1luSE5Ld2Q5QXFXNHlsdjJ4b0tydkNKM1B0aTF2L0JSTXlVWURXZ0tnY0t4UCtxemxYalVPdVp2bnA5d1dUczY3MzBUdFhNSGN6ckZGaG0rYkJDdVpYdi9rSS9QcmxHdDViMEhCK3p1SkVTUmgrYzFER0xGeWxxTWE4RkpFQjdOYUJOZFhxSGNqUHA2dmtiTHhoNjlVS05seStucGpBWkhmM3lMby9NVjk0YWEyejNGb29hUnJuajh3YS93bE1UWGlzUHRIYzVhUTlUeG1VeHlYQXZXajhpMXoyeTJ4RXE5UnRocXlhY25TL1lpemViMkRYcGh4R2kwUVp1ZGtUVXRpeHA2dnNla2hGNFFnWlNVamVGSDd6L2pTL2NPeUlzQ2s2K0hWbXRxblBCNWNYN05vQk1RZUlMZE9FRGpyYjNzcHJXb2pnYlhrbGVhMEMrUUxTaGhpWVZEWlVzR053OUpQTW41NUFtQmcxQ0FOQjVGcGVqM09teUloSituRFg1akVMSmxVdGFNd3BCQ0dJUjBXT3U0dUU3cEpvcURTTk02T0oxWEpKRkhOL0Y1dXN4cERkUzE0ODUyRHlzRHJKRFVsZVR4VllHMkJ0OExDS1drOFNvSVBOS3FJdkY5UWlXNUVTdUdneTUvL25MRzhVWE9SZG55a3g5OG4zcnZQbVhUVUptR1NsaDJZOG5PNW9CME9zWGxLMGFKcG1vcWxvM2hackxKMXFCRHg3UVU4UmFMeFpxc2ZmckJSd3o5bW5zRG4vRHdEVHdsZVg1Mnp2SHhFYjkrZjVlM2YrMHV0Wk1jaVE0LytjWEg5RGRmWVJSZjRRV1d3a1NJcEk5c01tb0hiU2laem1wc1ZUT09KY3BKbnM5YnFrWnlzbGh4ZlhXTnNmRE92VU5vTEVZVWZQYlpwK1RTNDJvNlora3BQamd2OGVVMWIyOTE2SHNDRllkY3oxTGExdkhhelIyV2FVN2QxQVNSajZjRUtxdko4NXdhdVU1cUZ5MWRUNk5sc3c0eVNPZUluYUlvYWxhRkl0UUdENEZXZ2d0L0E2S0tXL3RiOUgzRnMra0w0cUNoNjBEN0ZWWmEyc1UxV3pmZTRsdi95YmVvcmk3cFpLZEV3dUdFd0ZSZ2JFdWE1ZXlNSTE2Y1hkQ0pFanpoRVhYSEZLMWhiNVRnMjREYUdJYm1GTk1vQm9GQ0lGQmJCeXdXMTh6T2pyajU0Rlc2U1V3MkhKR2VmMHkrbUJPbExhR242WFE4Rm5sT0d0MUU3YlZzR2tOLzNLZm85TmpvRGFtMHhtYm5MT3VJRy8wSTQ5WitkSG41aWdBQUlBQkpSRUZVd0tmem5MMDQ1Ry9lZjg3NTFZckhjY0R1alcyZ0pPeEVCRmg4MXhLcmlKdDdIUzZ1cmltYWxwZFhFeVpIUzI0a01Ya1Q0SVJtS2d2MnR6Yndld1BDYUlQSUdOTFpNVExab21Obk9HdW9seG1UNnhtVDZ6azNidTNRRHozMm94YXBDNjduSlVvWkhJNTZmb1hXR2hmM2tBNm9ETTVZZE9qd2dnZ1ZkSm5VTlJnTm5tU25FOUxpYUozbFJWR1IxUzFibnFVbkZFdnJFY1VCenVROCsreUkxQ2x1YnNUb01pM3BKNTMxdUNvczA4TGdTc05vR09GcFFWWTFiQlNYakR6RDZ1a3hoWkJZVTVKaXllc2E2b0RTR1RJMzQ4bnE1NXlkUEVVM05kT1JvbkNPZnVReFd4YlkxakVLSXdKUmNiZ3pJTTFLMnNad2ZqNmpKMEpFTWNWVE1jSkJZQU4yK3lGTnNhQzJqamk4b0d4YTByakg2WFRKZEZVU0RjYzB6cWZmQ2VnS2cya2JxQ3huQy9ETmpKMUhYNkhUN1pHRkllYjRVMEpSNG51RzJITTQyWEx6NENaaEZOTVlnOGd0WmQzdzVUZnZNKzZGbEszaGh4K2U4ODAzRDFGVlNvc2w4VnN3UzVhcHhma3hnV2ZZN2tkczNCb3gzaHBRYUVIWnRtQTF6MDRuakRzeEsrZURoYWZuRTB5NUl0V1dXRW11L0Fnd3ZIVnJHeDE1R090UW5tSjcxRU1GTVMvNkVXMXJhZktHdzY1SC8vQ0FCNy96TFM1WEtYLzAvLzR4bC9NYzZTbzZxa1pLVGEwYXJsWTFWVnBnRVVTKzQzaVpZYklDdjY3cCs1SmFLWjZkTHRnWXhPenVENW5Wc0tnZCtxSnNPVE5ybGEraHdUUXR2blMwaGNSWGdxdXNvajVac05IcnNLeHFmT1hveFJGMVZYQzZjaXpTSlMyS2gzZVhwRnJ3OVBRRXI2cjVjZDZoRy9wb0hGbVIwdGdXVTJ2R0E0bG9EZWkxTFVva2ZXd1NNbWtsRjRzNWpUR3NWaWs3ZFlIU2EzZE9jM1pPV3JaWVliRW9wQ2daekNaRXZ1SzBMbWxXT1U1SUJvTVJsN25oMC9OenhrVk5Fb1hNclNBS2ZWeGI0NnpoNWNtRS9VUE52L25qZjhWcU9xV3VLbjR3TGJtY0xybTUzWkErSy9Ha1pERG84ZEhsRlJldG96WXR5MFZLRWdiRVhvR3B5clVjSzN5U1FjUW5tZUdUaXltbWJkbnlGZDNFNThPWG41QjlKZ2g4eWFvU1pOTXI3ZzBDbGtJd0VUVlBqODZaSDJ6d1lsWmlyT0R1UnNUUFQyZG9wYm0zUGFBVGFFNG5PZGVGNW1pNFMvSEJ4Nnp5RXJUUHlvdDRNcTFaVmhPTWFka2NSVXhXSzlwMGlRQmVlZmlBOXk5ZkVtTlFudUxLdFZ3VkJiT3E0SlB6aXBYeHNNNFJYNTBpOElSTG9nZ253WG9lNVNvbGpCUTM5dmJRU3ZQcDh3dUVzdlRERHQzaEFLazFsb1l5SzFsa0tmMXVCeWtVOSsrL2lvc1RmdnJ6WDFCa0tlYjBqTTliSXRiUUlMSE9IcWc0QUdkcHkzck4vKytHT0dlb2pjQ1VueVBlRFlnUTRzNTZoVEpmRnY4T1JpUmpENXpBbG9iQmVMMDZLZXdhYnFrRGJ3MXZxbHE2V3pzSUpWbk81OFM5TG5tV0FaYU9IL1BsTDd6TDl0MkgvT3BYdjZTc1MwNVBUOGhlUFA5M25RWUNhRFNNdC9xMHh0SGFsdVUwQTEvUzZ5WGdXZ1FndFkvbmVWd3RVb3hwd1lLdjVScVdIUVRFd3o1Q0s2NnZadXdNKzNpMm9uV0NSVnJTdEk1T3BNbnJCbUVkc20xQis4UytvdCtOQ1h5UGQ5NzlJamZ2dmM3enlZeTlXN2VwbTRaLzhVLy9kNDRmUDJFNGp2RjhueWJQMFVvd3kyckNOa2NJeWM3aElWbmJFa21EY3c3cjREcHI4VDNCZEpyUjdmV1JucUxmN2FBUkhybTNoaVZKcVNHSXFEUTBYb3oxUEl6MkVaNms5Z0pxTDBSNUhyV0JXanNNQlE2TkRnTFFIb0Vmb0pSR2VzSGZxUmwvR3pJUjY1YUZWcXdwbkZDRGdFYXYxU3JYQWtKL25rWnBjVXBSZXo1V1NCRGxlcnRZa3pweERvU2lFaHFuZlZ4dEFVc3RKVWdOVWxCcS8vTjlLMXF0MXNTclZ1Q2t4UG8rZFZQamV4cm5QTkIvaDU1cXBVQW9nWEVXNDhXMHd0QzJMYTNLUWZwVTJrTTZqUkFDb1R6d1E0eE4xN01GSExWU1lBeVZjL2pLUi9vK3JjcW9oY0w2RWM0S0dzL1JlSkpjZ2xFU2hFTm9pNVVoVWp0QzVWTTJsdXRsd2F1alRaSjZQV1ZUV2hLR0FXaEY0Mm53UENxdDEraFlhY25SU0FTRlVMVEMwV29mZ2FXMVlJVEFEeUxRRFhnZVFtdWM1Nk1mdmZNV2pkSjRua2N2OU5qZDNHSlpMVGpZdTBrY2Q3aDE0d21SNytINVBwZlhVNXFtUnJZSllUU2l6Q2E4L2VZamJ0eThnYTk2WkdSY0hUOWpzZkM1TW50c0R5TzBINjMvY1FqT1RrOXhLcURURzlEVU9WSUlOamMyTWFiQTFnNHIxdEdqK1NybFlHY0RMZGRhKzlQVE00eHdDR0ZZWHFZNDV4ajJ1L1E2Q1RmdTNPWm52L29BVTllRWdjZG90RUZhTmxSVmhYQ3c5OW9qV3JldXFrRUliaDNzOGwvL2svK0dLcS80MFErK3ozSzE0QmNmZnNUVGJzTGR1M2ZvakhvZ05OY1hsOXpZMlNaZHpUSEdVTGZneW1yZHB0THRvclRrK3ZLU0pPbnl5dzgvb2FqQldZdUtMSlBqYTdSVmZQWEJmUTRQOS9uNCtJVEorU1Z2UEh5Tk1JNVlMR2U4T0o3aHRRMWVvbEZDY2ZQK1haYUxnazgrK0lCN2Q3WlFRdkxtdTEvaTdiY2YwUDR3WTNMOGxONWd3RHVQN2xQTUxybDV1SS92ZTZTTEdadWJXenc3UG1leFdDRXR2SEhuQVJlbm43R3pzODNHc0w5bUs3ZWFWOTk5bTUvOStCZUUydUZhUnlmc0lQNlhmL3k3N2xsYWtsWU5uMzN5RWQ5Njd4Rzlia0FTOVlpMVpqV2RJMExOTEsvNTlHS0JiVnZlMk45aFpYSm04MnUyaHB1TWtwQmZIVi9pbW9MbWMzZE90aWg0WXljaThpUzFYWThCT3ZUNDZLb2thenM4MklpSUFrMk9oek1GamFreGxhRjFnbWZ6aWdlUllCaHJISTV2SDAvNW85T2NiLzZIMytBYnNZZHRhN3BKekMydHNjYnlMMy82SzZxbVlUdFdqTGNPdWRKZHJsY3BqYlZzam5jd2RZNldMYzRLWHI3OGpHWjJSUndrM0JvbytwN0huZGpqMlh4SnJ4UHh3OHVVckdwSXA1Zjh4Ni9mWXFSYVdnZXpCdVpaU2pkTUtPM2FMajl2QXBMQm1NZlRGY3UwWkZFM2RGOS9oMy96L2U5em81cnluei9jNXI5NGM0OC9PVit4VERQR0dzYVJUNlpDWGk0TkIxMmZ6Y1JIeXJYNitQNWt5WFJaYzZ2dlV4cExyWHltV2NuUjVZUmIvWUQ5UVVEUTZmUEoyVFhOWW9GU2dxMWVsMkVTOHZPekJlTlFrZGFHRzkyQU9PN1M3eVkwTXFCdUhZMlVIUFlrMzM1eVFWU3REU2V2M2R4SFh4MDlZWldtU0tINHh2ME5XRTVvWGNCcWVrWXVRVXVQZ2JkSlhlZDhZYWpKR3dpS2F5N25NMVM2UXRvR1cvaU1nVHFkc213Y0JrRkgrMXc4dStCd3E0K1hYbUFFOURaM3Fhc3VoUzNKb3kzaVRvZDB0Y0JXaHN1ekt5cC9uVDNvWU9oTFNjRDZVaHNpZVBPTlIrVHpTOExwRWxHM1JKMFlJeFdxRzdEajVxUk55V2Uvdk9ibDZJcTNmK1BYR1JRdkthcWNkdjZTUUF2VTNsMkVEcmdRZ3RjaWVHWFBwNWhjWVV0TEZNUWN5Z3JiVk55VkJZMEhXYVR3MGd2MmR6YUlQTVhIRnhtMlRsR3U0ZWlUSTFvQlgzeDBIMU1VM040ZjA0MjJlWmEzZk9tLysyLzVzMy80TFphMkpsUWxlM0ZPMGl6NTdPZ1lQUnlTdEJIZGdlWVdTOHFKWVpXRktBVzlUc0NCV3hHckJyRlV4QTcyTzVLMnFnbFV4YVBRWTF1MklFcFNUOUlFQWNaYStyYWlLejEyT3lIbng4ZmtqZU51T01LdkJlVjB5WEVoeVkyanFYUDI3dS94MmlCbU1hL0phTmozUzdTektYM1hVRm1EYkVQcVZqS2lKVWxDckZ0WDhIVGpnSlBaa25JeFEwcEJaLytBVHA3U0czU0lleUdoQjArdTUrdUlXR0FwVzBoNkhnYzM3N0ZJQzdZNmtzcFlvbTZITFIwVExtdTJ5a3U2ZHNwMUJwNFhrcHVXNjZxaHNWRFppTVlJZGhwSnBEVnh0OHZ2ZnZPMytmbjd2K1NudnpvaUx6SytjVytIZUh1RENvMHphK3R6YjJ0SXgvZm9IVDBocThwMVo2SE42Q2hOdkRvbTBqNVR0MEM2Z28xNGcwRnZGK01zazJ4QnB4T3p6QXIyZlkzMW9BcUdMQmNMbm9xVU1GQlVVck96dWNGeVZmUGVsOStpTkJhYWt2MkJRT2lTS1BCWVdvbGFudE9OUTF5bGNVSXlyUVFmWFZYNFFjVCt6VjBlYm5iNTRVZFA2VVlSaVJSNDVaeld3WlF1eGdrMGtqaGMzMUFtWWNDNFkzbCtuYk93UHRJNFJPMWo2cHlnNDVFQWNSeFRsUm45VUxLSU8yQWE4c1l4U2dTdDh0QkpqTjgwUERtNjVOYW9abU5MRTQ0SHBGVzlEZ0g5em43MzkwZURQcjBrWURTSXFFMkQ3d2xhcTllTm1XcWRJTW15a2s2ZzZQbWF5K3RMeXJwaXMrY1Q5b1lFWVV4bFlkVXFKbGNMWmxrRHZSN2JrV0s1U3Frbkx5bkxGWDV2Uk5XQVNCTG1oRXdNOUYyRkZJYnp3dkE4YzZ4cWlIMU42QXpkVUZJNngxVU5CMS8rTmVheml2eXpKeXp5a3J2akRqY0dYZEttSnV6MkdRNkc5S09BbmhJVXM4bWFYV1FxK3FISGZKV3luU2hpV1RPNXZzSTFEZmxzeFhqczB3LzEraWF3TWpUU0ovSVZRYkMrbVJwdmp3aUNOWno5NmFjbmFPV0k0NEM2YlZIQ0VrakpzRGNFN1NHOWRUUHBuMzA0bzRoQ3pPS2FMNDBEdHFPSXYzNTJ6Yk96T2RJUHFPcVdENjhML0RLbEYzdjRvVUlGR2w5cnJwWTU4elNqV3M1cHFoS2hOY2JDMXU0Qkc3RkcrUUd1UDZKWVptd05lNHo3WFZvQldoZzhwUkZLb2p5TnJITTJ0OFlNazRCWkxkRlNFL1VHQkowQUVRMkl0RUJyeGY0NFJDdmxvVzJKRXBLNldkUEJrT3QwYkdzdGtlY2haTWxpY29GL2VCc1ZlQ1N0bysvNWJBOThjaG5UV05qYzJLV0tEU2VWbzZvYTJ0bWNoV3RvbGNkdyt4Q0FXZDdnNlpnM2QwWThlL0dDcXEyNU1CMGl2K2IrT0NBdENrcXZaU01SaEszaWNyVWdxeXpFUTc3K3hYZjVzei85THZlOEd1MDcwanlsRFR6R1VSZGJOZFN0WmV4NUZIM0RrU254TEJoamtiYmg3bmhBWFRiWTBtQlpkd3J1N2NWa05rYTNIaXduTkw1UHVsZ2h0U2J3QkJ2OWdFVlJNbG1rV09kNCtIQWZVem1PSmxPSWUxZ25jTktuS2hWS2VjUnRnL0pEeHZ0ajZ1ZlBPRGpZeDFjekVzK2hQTWxnYzRTT0V1Ylc0N0lFNDNmWmpudjRXdEE0UVZXVlpOYlE2dzNaSHQvQWs3Q1lMY2htTS9iR2U2d21WMWhyTVkzRGp6Uk5iU2hiUTFsbWJHNXNraTR6WkZVU1dNZm05ZzZ6WllhTGZCNXRqNUJhODh2VGxMS3E2TmM1SXBKVWxhSE1KT3FiTjhQZkQrSVFML0RJVzQvVzJiVjdWVFpJWitsNGhwcUFLSTVwdFlmV2draHFqTEdvYm8vckxHZFdOQVJSVEtnZHM3eEJTcmhhWkdCeXRqYzMwTnJIODJKZXBnYmJhbExkWWR3TkdQYTYrRUtTbnAxQUdGQVppM0pyQk8xRlh2TGl4UkVYeXd4ZkJXeS8reFgrNFAvNnYzbFROZ1JDc0QwYzBvOGpPdjAreTZLa3JDcWl3TklOTzVSRlJwMFg0Q3pqYnNRcWI1am41YnJBMGxwVWE1aXVXbFlYVjJUWE0wWTlqMG9xbmh5ZjQrcVVORTFwNjVaTzRxTWFnMm5oY0dzVDBZbXBoZVZra1hLOVRQbmcwMU5rM0tIMlBLYlM1N2lXdUlPN0hDK3UrYzUzdnM5dmJYYlJ3SFZoU0FLUEltdFlaUlVMRWZEVzJMTHB3WEsxWkZtVWRFWWo2cnhBTzB0VlpKUkZ3U1RMR0NVaHM5TVgxTUdBQW8vTHlaUklTcHhvYWRxV0xNdEpBaENlaisrRnhGR0VGQlpyREthV0NNQVp3Nlh6b0N3WWRrS1dpeVY1VWJEYkZhaC9zTi81ZlQ4TVVVcFNPc0hSZGJZbVVHcEpDM2pTSVdxSFI0UFVDczI2dFVKTHhWVXQrZmo4bXBQNWdxZ3FlT3R3ai9QbEhDMHNTYUF3VHBCZlRxaTJiMUVHQThLMm9wWmdKaS9ZN1liMHRXT2FMbEdpSkF4ajhxSkV1NXBSNUJQWmtyMSt6RzR2Wm5lalQzTndqN1NvR0YwOHB5aEtaTnR3L09ReG84R1FsNWVYVEJaTGt0QUhVNkJjUTZjVEVNUVJwUldjRmdMcDFnMmFzaFZrclVhVUMyN3Rqd2c2SHN1cVpyQjl3S1JvbUphR3lrcTBzL1JEU1pIWE5FMURVNWRrcldObEpFZUZwVkFCMi9jZjBkMDdRSW1DU1ZseG1lWjg3LzBQZWUzZDMrQkw3NzdLamRVNTBsbk9zaFl0ZlVTWkkwMUZSOVlZTDZCU0VXbVZrZGNOWVYzUm1KWllXSzVxeTdJeGhFMk9URHAwOXZjcFdvR1FFck9jMEtHaHNJTFNyREg1VXJWNHdrZUtCazlacXJvQ3JSaHVqbWdISTJvLzR1VEZNWXRWQ2syREYvbVVCaEpuMFVKcmlxb2xyeDNHR3Q1OXNNM1JkVXIyT2M1RUpqNjdvNEN6MUZKYWg4V1IwQkpweWNtTHo3aThuRkE3aUxkZTRjVmt3U0piZjVHeEIxcEY3TjQ2UUhaQVUzSmVaVlJvZHZvRHluU0NDaFIxNjZHREhqZTdBZDI2cG1wYUd2bDVhWlZhNysralpjUDdILzBjSndRWFZ0RTR4YjZ2Q0VUQzZXSk8rem1PTFM4YXNxYWhrcHJaTEtkdEROWUxpR1RGZFZGaFcwdlA3M0RyMWk0bUMxalVMWGxoMmR2c1VpK3VHT29LTlI3Z3JPV25IenlsVkpxdGJzQldQOGFGQ1YycE1OYlE2VzVUT0VFWmJQRDgrUkg5WVVKV2drSHhjSGVmazVPWFBILy9weFRGRlQzbDBLMWl1WmlnSWgvbkJKbHorTldTM2ZtRWpVRk1KL0RJeW9KZXYwdmdLOVR6STJ4cjhFT2ZuaWY0K09QUFdHVTVVa0JrTGQ3ZUhkb29waWhiaGpiRE00YThtaEg2QVZvSlROdGdxNHJMaXdzbUw4L1JVckphdGR3WVJnaGhlZkwwakZsdHNRYzk5T041eWJKWnAxRTlDWjljTDhuYUZwMFhHQ2M0SGlSczVUbWZ6UzJ6cktaMUVMaWFnYThKUTQvOVVZOUZiWG01V1BMczhTa25KMmM0NE01dWdxY0RQcDNPdVRJUlFrcGlWMkhyZ285TVE3OGJFd2VLckdxcDY0YlB6aVdJRUlIQTJwTElsM2k5OVE4aVZNM3R1L2VZL3ZRRFhpeFRtcW9tMUk1dUZQUFRqMCtvc3dYV0NtNGM3aEZHQVprVXVHSzlCTnJNWm14MVF6SVhVTFdHVDE4ZWM2c3BLY09FNWRQUHFBemN6MGZVY1pmWU5PejBRN3B4U05uWjVILzcvakh2SFhoRVdsSHJpTzNORHFuMWVPRWxHQVNybzJkRXRrU0ZBVHVqRVdWclNXN2NJT24xZWZiQkx6bVpWNXkwaHAzSW85T04xdzVlQVhuVzhQNm5jeElmdnY2b1R4MzVYTmFTZnJZZ0VvYkdlaGc4bmw0Vk1Kc1RBYkhub1pRa2lUdThmN0xraDU4K3BuR3d2eG15TzR6cGh6NWIzUllQd1VrS3MyVkdvaTJMUnEwWDJMU2x0cEpwTG5nOExaaVZOWk4waFJqZjNYR1Q0eG0waHNDMGpBVE0zTHBER01EejRmWld3a2ZIR1l2UHQyMS92cnFiSzZqazM3NU9zaXd0dlNoQVNFY1UrNlI1Z1VFaVZnMjR2K3NpVUVCM0VJQlF6QmRyazJjMGpLaXFOWWRJK1JMakJFa1FJWlNnRS9mNDJuLzBqM2p4NUFVLytMZC9BVVVCb1ErdWhWWWkvWFZ4OU43dUxyVnpXQ0hJMHd5UWJHOE9LYk9VaTZzVnpsazZjWWgxQmgwa2hKNkhjSllrRkRndjRXb3k0KzdkUFR3djRQaHNpckFTVTJWb1R4TjF1K1JsenRYVmpEQktFRkxRMnBiUVUwUmFNUnIwR0crTStPSlh2ODdMRnkvNDR6LzdTK1pQUGdabmliWjZFRVpnREFoQlVScWtsWGkrSk5BYTZYbFVWVUdrRlJ1Ykc1akdZSzFqdGx4UU5SVk4yWkIwRXB5MUpHRUhvWHhRQ211aHJISVFobzNSbUVoN0tPMWhsYVN0U3RDYVBLdHd6cEhsSzk1KzlKRHRHN2Y1d1YvL2hDckxlUFQ2US9UOVY3L0lzSDlDWGE1aFJhUGhKczM1SlNaZklxWGc0TTR0U2llSTQydmF4UUtCSStnaytMNUhyOXZGRTRyV2d2VWl4dFdLT0F5UlVsRTNOVzYyUW11WVRlWllhMmtydzYxYkIyenZieUdGUWtqRjhja3BRaGh3MEkyN3RMYmw0dXlTZzhORG5Hbnd0R1I3YzVmOTBRN2hIY2ZGMmV0VVpZRjJMVUVTMGUzRWJHMXRFOFlKYVpwakxHUjV2aTVNYm1yMlJrTmFVL1BxS3dibjRPWEZsTFJ1dUgvL0RxODh1RTJkWnhTVENhODhmSjJuSjJma3F3VkNTUGIyYnJJNUdPS0ZDUWhIN1NwNjNTRS8vc2tIaEtFbThEV3hyM244NUFsMVd2S1AvN04veE0zYk4vampQL3cyYjc3MUp2UHBnaCtZQm1jTmI3L3ppS2FwNkg2ZUFiQXFZRDZkY3VQbUhzT05IYVR5K1BhM3Y4UE4zUzIyTnplUXlnR0NqeDQvcFd3TWc2MXRuaDJkWTR1TWQ5NThoUy85Mmxlbzh5WFdDazduUzU0L2ZjekIxaGEzSDk2bjArdnh3eC84QkU5YS9DVGgvT1NTc3FpWVRhOTU1OTEzMmIxMWcxY2V2c0xrNm9xSHI5NUQvUGYvOEd2dVlyS2dNUzJIbzRSZXJIbDJ0V1FqcU5CUzhtQzBTOTQyUEZtc0dNVVJ2bGJFU1VKcEJCZTU0eXJOS2F6Z2FHT2YwYmpQcS9mdTBZa1Q5Z2REL3UyUGY4TFc1ZzdHbHJURzhQTDVCZk9yWTk1OS9RR1BQenVpcUVyU2l3dmk4WmhZclpPcm50YjBvdzV2MzlrbmYvb3BxN3pnYUpteTArOXlvK3Z6L3JOTHNxWUdVVE5wSkI5LzhwVGZlKzl0SHUzdDhHSmFvcE9RZVdzNXYxNnd5alBldUxYSFFUOWh0VnpTV3N0UExwZDg3N3JrTEV1WlBYbEs0RW4reDk5NW0yOCtQT0RibjV4eVBaOVRtWmF4cjdtN04rSThMZGFoRWxQaU9jbEhNNGNYQk9zVElRcFlsUVd0OUZnWkNEMlBlbjZOUzNwSW9kbnJoWmpXa0djWlc0bkNrd0dOZFp5WEZjSVloa2xFdDkvSDkzMisrK2tSdDdzaHQyS0JhVnNjanArZEx6aHZRMGEvL2hYKzJmLzB2d0kxdXpmMitDL2ZlSTJOZm9mQ0dISTh6czR2T1VnQ0hqdzZZSkRFL09nWHowalRPYjduVTVVTkxaYkFrOXpkNkxBc2FxUTBUTE1LclVQMFhneGgwMUpWRGQxMlJzK0Z2QjdueEw0RVoxaGVQU1pRUHE5N0ZtRUtiT000bjlZRVNsRmNGWnl2REN2aitQNVBQdUhXblFQczkvNDFtSVkzTmlOMnBLUzdmNWRpdFVBQXV4WGNzdzM2WjZmczVCWUUzTDYxU2ZiL01mVW1NYlprK1gzZWQ4NkpFK01kYzN5WmIzNVYxVlZkMVYwOW1FUFRKaW1CQUNtSWhFMWJnazFCME1JUXZCVmd5Q3Z2REFNZWRsNTVyWVVCYlNnYnRpREt0SnB0V3lETm9kWE5vYnU2NXZHOWwzUG1uV0tPTTNrUno1UnptVURleGMxN0krTDgvNy9mOSsxdU9NNG5wTU9hcGpHVWx6MC9lKytQU0tNSUdlRFlHcVk3UVpoUGVDbzhYam5PdHl1cWN1RFhIMDE0cWhwZUR6ZnNxbHRvSk43QjVXZlBDWVBuYm5kTHB3TmZlekNoaUNPbVIvdjg2bi8yai9rdi83di9udUxkYjhQZEpWMTV5K1o4NEVuc21FMDZXZy94MENFclIzUzdKWGFXdW11WnBwcDM1d3UyZllkU2dvTkNjRFZzT04vMm1Mc3R3Z2NXc3drekdtb1hjYWd5VWkzcFJjc2tTcm5ZM1VMd3ZKMU5HRFFJbmZEWml5OXd6dkVnU2pqU21zTkVNYzhTdkF2ODVNS1JhYzFyajE1L0plR0JpK2ZuSkU4WGFLWjBnNlhjN1VnanhUSXVzR2M5ZFNTWm1oM0I5ZVRHVWxjdG5ZZTl2U21UWWVBNHk3aXFSaHBhcGxxaVRIb21La0lua3NqVmJOZHJVcWtvWFVCNFI5blh6TFZnUDFYc1JJSW5rQXJMMUhYRWF1VGRLQjN4Ny96Y2R6Q2g0dVVIbitHczUxZmZmTWkrcndqTk9jWWJBcExUSXNOS09MdHVlUG5wR1kwUEhJaWV1cXFaMzV6emZtWHBIQ1MrNTltOUpTK2ZQOGNDMy8zNlUyUXg0ZUxpQXVzRGtZRERMR2RQZSs1MkRjUFFjMUVwcW5MTDBYekN0aDk0N2Q0ZWhzRCt3U0hYMVpvdkwxWjRxY2hQNTJSbkw5bGMzMUJXdHhTbXAzdjhBR3NsdUlGQ1NoSUN1bEMwM1lCT1kwU0ljVHBDcEFsQktZN25jMXdJOUcxTjZBUEhLbkN3TExBaEVLeGhQNHFZN3ltNi9nN3BCSHVUR1Y0b2pyV2dkUUhmcmloN3gxN2VFbG1ITlpiVmkzT2VmdVByNU9tTXpob0VnUWV6aEdGWDhiMWZlSmYvLzM3ZDREaWFhU1pPUWpUbDRxNGtKQW5DR25vSCswV0d4NUZMallvVHBqNHd5eFJleDdSYVl6SElFTGk5dlNYeUlrWkdpa3dMbWpybWRyZmw3ZE1KWGUvcGhhQjFLWkdBUjFuSzRDT005M3grVi9MR1BPSmtsbElrTVJjV3ByLzZIWDczOS85UDZuWWdHTXZkdGlab1I1VEVLQmtZbkVjWndXS1JNWDh3NDdHWDFGM1B4YzBkOTFQQlpENUQrd1pqQXRrdzBEWTliNzcraU1FN1pBVE85TlJTVWhpTGRZSHpzdVRrNFFFVFlZaFZSTlU1bnB3YzRZMmpVSUpzQWc3QnFtMFluT1J3c1VkdEhOWTYwZ2NuVEpkenlpOCtwcGF3M2pVTUxERkltbllZbWZ2TFBXem9tU2VDV0FyYTdKQ0w2L0VmdXRyZWp2M0hTWXIwSFlmN0UzWlZpL09lUWtpT1p3VytiNURKU0ZrSmJVbDZ2RTluTFlOeExQT1VpSnA3OXg5dy90VVZRaGowNFlMN2h6TkNKTWdSeEpFaVV4R25zNGlxYW1CMkNMdVNkS2FKcE9McDRvRE9PemJWR1Y4N21mTjRNY2YzTFQ1NHFzR3pqMlFpQSt0NVJtOE1tOHRMNm1wQ3RWb2hEMDVSTXRCYVMxU21Cemc5a3E1WDVRV3pKYlJDY1dkcm5BY2pCSmViRy9abm1pQkhvbFVTTE05dmFrNVBVNVpwVEdrQ0o2Y25kRzNIeXNrUkhCVXBpbFRqcGNRTkVaR1F6UGYzMlp2UGlIYzc3bUtGRUFuTEhONllaM2dFNi9VRnplQ1FXbkN5bklDRU5JclkxUjJMWmNKRWFUWlNZRVJnTDU4U3RpV3o2WXpMejg1eDNyQi9XRENaVHBFS1F1K0lsR0thejlrMHQvaGtKSHlYdzhBeEVxMFV6UGJRZnN3UnJIY2RXYTdSV1Q0eS9xM2tadHZ3YUpIamdWeEtsRktrVVU0UU1aMTFZRnZtaFViMmxreURSbEpWTmM5dmVnNW5LWHZ6UGJKRTA5WTlMMVpiN3E1ZVVydkFvemNlczUxcG11MHQ4MlJzVTllUm9uS0cyMVZMSEVla2lTTE5ORzA1Y0g3eEhJWU82TkJCTTlVS0VRMUVBUjRzY3BTejZHWkw0d01oQ0Z6ZE1kUWxsWWFyM2ZWb0tuT1c2NnNiM254MlNrM0VZQTB2YnpkRVVWTFFsaFZTQkdhSGgwZ3g0YjI3RnRzMGVHdDVNc3ZZcmgxZm50L3crb05UQ2gyUkxlWklhMm1UR1Era1k5TUtpa2xHSEtmc241N2dxaDAyQkd4d2VHdVpwUkhPTzB4ZnNsczNETVp4R2tsNjc4aWtvdTU2aE5KODdkNGhsZlVNTGtZb1N4YkhLQ21ZRkJOdXRtdnVuNXl3K2VvNVEyKzQ2Z2ZlUFYwd21KNlRoM3NRUEVrcU1JTWt3VkRrTWM0SDhEVjVKS21yTmFXRlpML2c5R0RKL25MQjdPZS9qYllHNHk1WkIwVXNCTGRPMDVxQUdnYWtpdm44NVJYT3dkdXZLWEkwUmFMNDdHSk5NM1NJZXNXand5VXY2NUs5NVI1NXJzbGRvQmtzNVNBb0FnZ3hlbjNhcXFkVGUzaEE1d3ZzK1RYWG9hY1NNY1o1T3BVU1hsSEx5bXFnckFKbE96WjltMTNONFd1dlVaVTdZbE9TVHpKZUdzRVFCRFVKQytVWjJvcTZIL25PcG1uUVFTQTg3Q1VKMXNFOGk5bWJKY1J4elBQTExZTnpKR2xNdEwyOWhqVERCZGkyTFJhSHNEMHhHVTRHVGsvdjAzdEdKdUJrRDU5cEh1dUVEeTkydE51S1I0dUUvVXp6OE1FaHhYVEtKei8rTXdTZXV5ZExUdElaWmhnb2hVY3BpUjlxQnFOd25XV1pwL2dzUVVsSFUvY3d0RVJhTTRzWUwzOWFrT2NSeHNQK1lzcHlmMEhWZWN6aUNERjQwbXJGWFZreTFaSmNaK3hsS1IvZVZQU21aNUxtZE5zeDVYeXlGSHc4OUFnemxrNkg5b3ltdThNRnc3dmZlb2RDQklxL3ZDWFRVSGtRenFFRlpFcndzdXc0VGhSYkU1aFBNemJkRGhFR0pybENKU2xQVHA5eVVScXV5NFluUi9Ca3BybE5DcllYSlcwZEVEY2xaVndUencrUXNlT05oekhDdzlscXk5WUdoRTd3OVJialBPUVpKQWtNSHRlTXFhZFpFYkhaVmhTeDVELzZuZCttNlRxZS8vU3ZXRXdkU0ZEV292c043dkFCOXJwSGlBN0V1TnpNc294ZDJ4T1pBZXNsKzRjTGJscUpFNUw5K1JTUEo1bkhSRFBac0NzM2dNU0xHRk51MlZ6ZjhjYitGQ2NrT3RWTThpVVhMdUhIOVp6TVp4eS84K3VZeWFjTVY1L2pkY1hRdzQvLzZtTkNrTEMzaitwYlZ0Y3I2aWlRSnpGcG5KUEVFdXFLczEzTHJJaloyZ2JyQWtVU28zTk5jSUxNQ0Z3SW1Mb2l5K2VjWDVYVXhwRWtCWjJFdm04NTlqVU95OHR0elh3Wjg2T1BudlB0ZDU3QllLbDJGVkdjWUZ4SEdrZG9HVmpFamozcGViOXNXSGVCQi9mM1dPNmRjbkwvUGovK3E1K2d1cFpmcnJjc2dtVTUxVWd2eVlTZzZRYW1VZURtcmhyVnVqcG5NRFVHeS8zYzAxdElZNFd4RFZJWW5PbnBPMEdTekpqT1BSN1B3YVFnalNRM3B1Y29sVmdsaVpURWJHdmlLTEJxRGUxbWgzRWVMUXZXNnkxSGlZSjRmTmE2S250RXBQbkxILzJZTGw0eWRBMDNaeS80WU5kd09wdVJKUWxIRDEvaEZRL3lBQUFnQUVsRVFWUm5WZGVVVWhQNkd1TTlTZkFzRTgvSFpZWGZiZGtHZUhZNngySFk3anlMTkVJRndmdm5KZEhOOWVlazA0Y0lJWkhsbXNSNTNuMzdLVWxYMGp0TE83U1l0aVFMbHVQRklUb1duUC80ajVBZXROQk1KMU9hVlBMdi9mcS96ei81cC8rY045NzZPdkhRY1dKZW9LM2h1clBzQmNra2laSFpoSGpTRVNMUFpsWFRXYzhuamVFZ1RUa29CSDBZNVZWeG1qUGtFNXlWRE4zQXkzTEh1dXg0ZVhITHNraVl4SkxISnpQcVp1QTc3ejRoamN3WU93dUIzV2JONTV1S2h3LzNXZVF4N08weG5VMTVTaUFxZTdJNDVpOSsrSmRzN3RhczF6VlIzN0N6aHQ0R3psY2JpdW1VTEI2NXZHYzNOZDk1OXBBaTAyUkRnL0l0WGRWamg1ckJDeklSU0lZZHAzc0pLczBvZyticTlvNnQ5ZGk2WWhnOHMwVFREb2FiZW9jb1JzcjR0ckU0cVFobzlIU2Y0RDNPQ2ZyV2NuUzBUMUNHWWZEbzdVdEtFWGo5clcvd3hYVUpRbUxRWE44MVBEcmNRMmNhRlhwRVA1RG1PV2VibG1FdzVINUFoNDdHRGF3YXk5b0pMbHJQVlZreWNZTEtaaWc4alE5RW45N1ZpUG9PS1JWTjIyQ3RZeVVEb3EydzFwTlVqbnBWWWhoSS9SbHhwTGd0eC9oeEVna092ZVM4OHp3dVM1eTFlTVpCaHJHZTNnYkt6bUpwdVJJZCtYeUdEWWJRV0hhdjlncWJ4dEFQZ2EwVm1CRGhmVUFyZ1hTS3B1Nnd6bkhUQzRhaDQ2cnBxWkdvRnZhOXBPb3R2UmFZZWtCNnFCdVBjSTdTQjNZdVVMVVdzV201R2dMcndZNGFPUjlvK2dHaEZHWndPT05aRzhkWjNWT2JIdGxJSXRXQ2MxeFdQZkc2bzJnc1o3WGxkdGNUQjRjMUR1TmhLeTBYZ3lWV0N0OFliZ2ZQdGhyb0F2Z2hZQWJIeHNGZ0xFM24wTW9qaldQYldZTHkxSjE0MWVRQmhTWFVIZk50Uys4VUlrQWRBcldRWSsrUGNvUmhDa0VYUEY5dU8zVGp1TFl4dTZwRHljQjVOYjVmZWJCWUN5c1RXSHVvUXVCMmNOejFEaXNDa1U5UXdOWjRvdC85NkphdUg0ODFKSzhrdkIrR2Yrc0xNSzlBUExFQzk5V1l6VmVTSkltWkwrZThIeDRRSnhtTG4vd0VsVVo4L043N0tOUHo1djZFN1dBNTM1WlU1UXVrR2xPdTcxMXNLVGMxM3JaNEFldTZZbkFHUGMvb2VrOElvTk9FM1hBNWh2TUpoR0RRaWFidFc4THRBRkl3bndaMHJMRHJucW8wZU8rWnhwcW9tSk12VDBpYU1TYm02NGI5YWNHWEwwZlV5NlBFOFd0ZHk5N2hrdFVmL3h1b2EzNi8yL0FualdXN3JhQjc5VjVNRlVXYThLOC91Q0ZJS0dZVEJpL1FzV0l3STY4L0tzR0huREFNUkxzV0lRWEJReFVVZTdNVC9NN2dFV3hXUFpOaWp1OENJVmpBZ1FsMEFZeXp5QkNZRnpHcUtma1R2V0IvZjUraGIxbUhDZTk4N1Z1c3E1WUlSNFNuczRIdmR6blJ5eDRoRGJPRnhaUFQ3SFpVVFVmd01Cakh3ZjZFczgyL3pRUjhmR2NRWVlaUWtqeE04QkkrM0paRXgwK2VqZHg0UE9ra3hqcFliM1pvclVjVWp3T1ZhcVFJWkZtR0F1YnpPWG1hYzNwOHpIZCs4UmVKbE9Sd3B2bk9XMThqRFpaaEdBaFBIdlBaeFJWKzBYRHY0UWs2U2RpcGhMWUxHSjJ3djF3UVJSRjdQdEFPQThmSGgzUmRRd2pnNDRSUFhyd2s5R09BWTdHY2NUeWZjM2w5aS9VZUNHUkp4blE1WjIvdmdLK2V2OFFQUGE4OXVvOHVVbzZQNzNOMWRZSHBlNG80NGQ2alkvNytvM2NKTHBER2xyZmVlb2Z0OVRYeklxVVRjUHpvaU9rOFpiSnJpWndoaEVDU3B3VGh4cVM5a0JTTEk3cCtiUFFTdlZKZjl5TjdzR3dhRUJKbkxiUGxIay9paUVta1dCd2RJYVhtOHhjdkNFUFB6Y3N6d1BQMXQ5N2dydTZRR0txeWhBQVA3NTlRbGh2MjdqMmdid2FDRS95RHYvYzcvTTNmL0R0ODhjV245RjJGRUlJbmh3Y2dGSG1lRUVVUitYVEcrY1UxYVF5WFYxZFlhMGpqakYxVDhteGJjM3QzaCtzTmFSeHo3MkNCSlNDa1FrakI0dmdwNGg5LzU3VlF0VFVoQkJaS2tDUUpuVFBNWnd1MDF0UnRnOHdTRmlGUTlqMU9DdTR0cC9UWklhSGRjYmFyNll6bnVCRGtHTTYzSlkzeGJPMTRqUG03cngrU0Z4R0RFMnk2VVFuajJvbzNIdTZ6eUJMTUVEaXZMTDd2eUxKeHlQSFZ0dUtmdlhmR243OHNNUkpPMzNyRy8vanZ2c21tMm5DMzNtQ05SU0I0dEJqVE9DOWUzckx0QjA3M0MrYlRHSS9reGJxazZUMzNGd1c1enRsMEE1MExYTXFJeUZnbU91Ykw2eXQ2NDNpOHpIaDZ2RWU1NnltU0dFSkFpSUJSRVpsMUdCY29wakZ0MzVOTHhhN3JHVUtnaUNNd2d0OS9jY2VmM3RRNEdmRkwvOEZ2Y2ZqQm4vTjN2clo4TlpsemZMb0x0RjNMSWszdzN2RndudklIWDl5U1NzR3pRckZNRlgwUVZFRlFWaTJzei9tcURYenY1OS9sUlN0NGViMWltaVljRlNtK2EvREdNWjltUkpHa0dod3ZydGNjRkpyOTJaeENhOHEydzB1Rml4S3F4dEFQbHYxRUlJUWtqaldaTTFRb2ZyQjhTblFzVmp4WWFJd0xIQmN4NjZHajcwWTBlbUVscWZDVTJ4WHBjc3B5UGhZWnpkRFJVK0dIbUtnWVgzQzl2dUpvSnRtVGtrd0s3dXFLazB4VHBKTExkVW5uSFNzUzdva0IwZmQ4OU1VTmFTUjVjakJoMXpnMjZ4dnV6UW9tY1VTejY0aTg0OGs4cFZjS2hPRGlxMDlKVmNjMCtKR1ZKbVBLM1MyRGN4em5HVWQ1UXBaS1pGZGpvNFNacVFuR0lsdEgrY3JtRll2QWd5aGhZdzNUeFBIYWt4bHRiOWl0YnBBYlI5cldPRHNqMFJIM0Z4bU9ubmFveG9KcXRNLzI2bzdsL294Rkl2RkJrRVFlNXgxZFBmRHU4UkZiNTNHOTVOT3FvMW5mb0p5anRvNjh0MVNySHVZRmswUnhlZGNReWkxLzhiTUxIdi9xR3h4T0p6eXZhK3o2bHFsT2VQcjZJKzUzamljcHVCYUtUSkpGQThvWWhCc0hSZk5Jb0tTZ0ZvRjRLcm00Vy9FNGk1aEp6U3lQMk5RdHhxNVlYOXhnbmVmZ3lTbWRzWlMxWW0rK1lCRHcycE5IUkRMTjJXeTM5RGF3UDUraWc2QVBJTlhJNEZkU2M3aFlzQjdjYU5jT2dTNVBhSUttS3Zhb3lsdWtEZnpjZzBPZTk0RVBydTZRQk41NDlCQjVjTXludGtNS2dWT1daQWpvU1V5blloYXh3cmpBVjd1T0lVNFJrME5zYkVaRGw0eTRONXN3ZS9BQUYya3U0eFRjUzE3ZVZVUnBpa09RaDRva1RWbVZIWStQVTFJZHNlazZUT3ZKWjU3V0RBek9FU2VDcnV2WmJMWTRIemg4N1lqVUNpNXVOMGpmRTBlS3A0K2U4dFhkQm9nNXpEV3hWSHgwc1dGV2FKWkppaENTTHAyUlRCczZHY2dTRFY3eWZOVXppVnIySnBKR3hhaFk4L0RoTVQvNDN5KzRPMWl5eUZKNkx4QVN2djcyWTN5ZUkwT2cvT29NRlV0KzVYdlB5Q2NwWkpwTnFZbWptS1A5Q1p0eXcyNElER1pHWkhxV2VZTHBPMElJS0FKQ1NLNXZiaEFDRHZiMlVBUWVIdS9SZGgxTjI2SHpqQ1lJeEFBUDd4L1FPMGpqbURSWHJOYUNJQlErS0k2UDdoRUZHVU14UnpoUGF3SzUwdHo2RHRrRmpBZ2txV0kxZUxvQW05VU9Kd1N4WG5BNDhVeWpEaWV2c0JxNi9XK3orZXd6VHBaek9qdncrYzJHSjQrK3laZDF6VExzQ0NhUXlaNWFwa3h5d2RtMndnYzRXaXhweXg2aWhFNm1PQ0hZbUk0SGgzUHVwbk44bkhBN09ENjdiZGd2Q3M1V0pkWUh2bjcvSHN1bElLUVJuVkFFQkZFU2tlWXhyZTh3T3NKTFNlc0R2UnVZekF0NkYzQXlJWm9uN0txT0IvTjlra2hpcENiUm1nZDdHVFpmSUlBOW9mRkJzUFBqWlR5K3ZjTXBoVzBISW1HWWFFVS9qUWsrUjhXS3h3ZEwxcjFqUHBuUXB3VW1DRVF3NkRCR3lSTlRjM014RG4yK1d1OTRtRWM0T2VZT2UrKzRQMHN3Y1lZUkVjK3ZPMnJuZUhSVWo3emZjbzJVQ2lVRTAra0U3d2VtK1pJUVlBaXd5R09zaEpLRUFDalg0NjFnVmt3Z0dJSncxRjNETWsvSWcwVW1VMUtWNHFjem90TU1QalF4eGxzKyt2dzUzMzNuR2I3UmhFU0FGRFJxSkdNUFRjTjBsaEY4UVBzR1pSSk9sa2UweTI4UXZPZDJmVU9XUkpSS0VzVXgzOTVMeVpwenBnNCtaMHBRbmpkbUhtOHFmSlF3bVdnSW52V201TEx1bWN3bTdNdVVTU0xKNG9nNDBaUnhRamFaSVc0M1ZEYXdueW1POTZZWUg3alpyTkhSaEVSQkxDVlRwV2hWVE5QMEVHa1d4WXpDQm5wam1NMFdCRE9RQkJCU3M5aTd4Mkhaa3NjYVJlQ2ppeHVHN1pyRDVENVdCZ1lnbFFFbU9kYzNBNE1MekEvbmRKc1ZiZHN6bmMzeGFjSXNVZHpjOVJ3S1I3ZGJrNlE1Yjc3ekRwTnBqaUNReGhsZVdlck9rS2NSTWppaTRNRVpQbjE1dzl2dmZKMjI2M0I5UUNRcGl6eWxqVEx1UHoybUhSejlFS2g3ZzQ0MGk2SWdqeVJWV3hNcGlSWVJVa2txSjloVlcrYUxCWWRhNGtMQVdrWFZEeVJaeXJhcU1jNUJFR3pNaU5LTmhhVWNLajUrL3dPaXdZOEM0MGpEd2NNVFVxMVo1Sk5YL2p5NHF5cTZka0NoVUZJaVJHQ2lZTGU2WlZ0VzNIdjBPdE5zUXB3RURvSm1VdGQwRG1wOWpKdnVvVVRnOGR4amhvSDE1b3BVTCtudVhySS9UOUZha3N5aDhvS3U2cEFuKzB5bkdkRlZRK2NsZit0My9oN1o0VDMrMVgvOTMzSlpEVHlicFJTRkluakgyYnBCeVFsZlhON3h4c01IQkIzaDNJQ1Ria1N6QjBud2tLUXh0K3N0RHc3MnhnV1FGUHowcDM5QkVVYzBuU09PQkowUjNOVURmWkxTOXcwaWVLdzMyRkxpVEVOdkhDK2VmODUxMmZIc2FJL3J3WE5yQnFxeTU3VkZ3ZjVjRWc2ZnNuT0JIM3ovKzZBVWtSWTBnNlV4SHVNR2RvMmtLRVp4ODdMc3VUZUppWWFHeVh4T29SVkNCbXpic3hRTlRtaWlSTkpiaDQ4U2JMVkZUelB5VERNNFJkdDJJeXBmQ3JSVVJOSnpmclhCbFMxQ3dyT0hleXdUUjNuMWtrWWwyQ0NZYXNYaE5PZHMxK0g4UUpxa2ZPczczeUtLWk16VHd3eUFZUmhZOTZQcE12Z3g1V3FWQXVGSXBNQnRxOUY0NGFEMWlrUkF2MjJJT29jVWlzbkJNWTdMa2JwaGJsa1lpSm9ObDlzT0VUeUozVEdMVXc2WEdTcEloSWNpalhqcFduQ0d1dHl5TWpXRDdSajBsRTkrOGpNV0I3ZVliaUNQRlUxZE00M0dCZEdqVi9lMm8wV0JzVDFWTzlBUGhqWUlyRy9ROVFCZTRQMkNaUklqWFVrc0ZZTTZJczlUbEdzNW5LY29MWWl5akp0VThjV25IL1BHNDFPbXFhYnZQVDRUOUgxRUpNQUx5U1FTeEFSMjJ4MGd5Q0pOSWpWcEZDaUhoanlaY0hod2hLdEtFajFGaXJFVFA1aEFGSG04V1FQdzFsSEVKMWVHTDc2NGhvT0JSUm9SWjRKeXFEamFXNUpsT1lnSTE5Yllyc2I2Rm1zMGZlZXdwa01vc00xdUhOTUlpWFllTFNMMlhsMmg2Vm9hYTRsVXhLRWVWVGxSbXFNaVJkYzNxTVdVYWhnd3F3M1JiV1BIN1ptV0dOT2pwR01JRWI2cFFRcWlvU2ZYbWszYk1jOHlyUE1Vc1VBNlE5dXNxY05BS3lORU1tZWFLVnpiSVYyUDNaMnpXNTB4S1RSeDF4RVFIRXluRExZYkoya2srQkRRV25HWWFLWXpSZXc2UWlmQkJTSlpjM2QyUWJQcnlMS1lwQllRS1NhSlJrdUJUQ2VjMzIwSndHNnpRMHVCanhRdk55MEpoamNQRnl4U1RaelB1Vnh0U0tWRUIwdXp1Z0RUa0VlQ3E4c3JaSUNEZ3lVVEhhR3lCQjBzbVpRTWJzQzNEdVVIRktPb3llUDRaRlZpMmtCdkhjZXlJN0ZIck9zQk04UWM3UXRlMWh1czZlbjduT2xNRTh1WXFPOHA2NWJtNmh3djROdHZQa0FKeHp3eExMS2VSV29KTW1lSUUrNnVMdG5ZRVJLMXpESlMwWk1uZXRUeStvR2hiaGtJaEdIQWVjRTBGaFJKakRHR09GV3ZiQ3FTaFI2ZER0dmRsdDRKWmxHRTd5UlM1MmpYa1lTSUVrZjB4MStzZVhLVUVtdllOQTNUSkNaUFk2YVJSZ2JZT01tMjJtS2M0L09YNHd6ODhlR2NSWkZROWdOOTVlbWNCN1VtT1grQmN3WXBvTkNndEdSM1d6S1lnQW1CZFRzK1VDMlNtTjQxK0NBd054bFo3Rmk1aUdBN1FGQjVSNjRFcWx1allvK1NncXZPazhXSzlxN0Z1c0RSTkhEVHd0QzNIQlFUOGtoUk5UV2JjdURtcW1HM3JaRlNFZWNyZXErUVVUUk9NWU1oa3lDbW1paGVZQU9zR3Job09nd3gzZG9SN3pwdU4xdm1oOGNZTTNJRkpsTGhwR1hYYlBuNC9WdUNnTy85NW5jNFg2LzV2UisrNUxkKzR3a245NDc0NTUrK0lNa0tCdURhSjNqaDJScFlOd05QN3QyanQ1N2IzclBwSk1tc29CR1N0Zy8wN1E2bkpONHBybllqUFByanN4dXlXVXdlUnhTdFppK0xjV0g4NHV6OEtHUTljZ01wQlovdFNzUnFoL0dlbzFtS3psSzhNMmlWZ0JLVXJ5RFlRbWxrT2lkeW8wTWwrbjU2aENoYkVCREVFdDlhbHJNcFdaWWpoYUx6aGxVelVzTzN4QVE4eDM1QjRqVEdPZGFyTmRaYWxQUXNGM01jQ29JZ2RnbUVHRGVrZEwwZDRkNmxZeENTdlZsQkVpYzRBblhYay9iNjFiMjZoK0RKODV3czFyeVRMWmhORDdqcXYrQm5ma0xhYUpyckZTTEF5VWxCMHp1cXRlSDRjQlF3NzJySklBcjB3eFRYZHdnQnJoVjREK1ZtaXcrQllwSXpUU0lLVVRDZlRzbnltRFlJS3JlbXJGdGlIU0drUUVZbnJEK3JjRzVBZUZqa1U1S1RFejRyRzdJM0hpRUQvQTgzbm90VllQTFdHL3h3ZnAvYmc5ZDRmQ2o1NnZJci9rbnY4R1pNQk5WV01BU0R1MjZSU2hCMU9idXFvOGdVYm1zUUlpS2Z6VWZyaVl3eHN3aENvRlE3MXR0YityYmh6ZGNPaUVYTWVyZmgrUFFobTc3Q0JZY1lQQWZ6ZTd3UWw3VGRodUE5eDhVY2FzbHVWektiRjRqZ3liMGk3VE95TEdGdWpzaUtHZDJuejRuK3hxLzhNdGwwT29xU2dzRU9BN0ZPZU8yMUJ4UjV4czF1eS9uWkZhYnB1YjdlTUhRMVJaRVJKeExuSFo5OGRZbHhEbThhSGg3dXN6ZWZqMWoyK1p5NmEvSE9zYjljb3FLSTlicGlNRDBIaXhtTkR6anZ5ZE9VS0FnZVBIekFwcTRaMmc3bEkxNS84eGsvOS9PL1JKcm5wSEhDOXU2VzVkNEI4ZitIc1plQzY5V1cxV3JOZEpxUVpnbmVTYTR1TG5uNzYyK0IwbmpuOFNKd2M3UGlvNCsrb0dzYk50YzM1S2VIZlBUeFo3eTdmMFJ4Y01EWEZnZTA1WTVtTUN5WCt6aGplZnJrUG4vMG83L2svT0lDM3hzbWFjUzMzbm1ITng0L1JrdE5uTVJNNTFNU3JVbjFoR3cySnl0eWd1azQrYnYvTWVYZGpzT1RBN1JPMkc0MlRHYWFPSnZoVWJ6MzN2dGN2SGpPejMvN0d4eWUzaWNFd1hwMXg5T0hweFI3SjJ4M2QxampPVDlmODhNLy9iODR1MW1UVFNha2s1eWlhdmlidi9JTDNEODVCU0haN0hic3lpMU4wL0dUbjczUDBBL01weG5USXVONDc0aTd6UlpqQng0K3ZJL3RXOTc2eGplNS8raHRFSklQUC93WThkLzgycmZEYlZuUnU0Q1NjRFRMNlBvQkpRMUtDc29lZFBEZ3gxaVhCWjRjVGNIMkNCWHpnL1IxYXEvNC9PS1N2eEh1K0ZwcW1Xako4Y0dFcHU5cGpFRkY0NkJtM1ZoNjF6SXZNc3Fxb3JkajZxZFdLVXNaMkhTV3puZzJ2YU1WMEE2ZWVSWlRkeDFIc3hrbjh3bWRoRmdydW03ZzhuYU42dzN6SkNFU0FxOENpMVN6TEZLK1dyY1lFMGdtT1FmRmpIOXpWdElPTFhOaDZYL2wxL25kMy9zRHZ2ZUw3ekxYZ3I5VnZvRDFpajVKK2ZLeno5bVp3Ry85L05kWkdjY24xMXZhd1hLc1BWODdYdExaQVpIUGtFRlFybThnVDZqVmJDek5CRTh5V0p5TU9OdldDR1B3SVNDRTV0bnhrc3VxUVVwQlAxaWk0SG15bUhEWk52U0RaZGNNS0J5VDZZS3VLWkVoMEE2QnAvY1B1UGNQL2d2KzVaLytpTDdhTWZ6Zi95dmZmckRIZnByaXZLZHNHcGFaNHNIcElSKy91S0VkeklqMlN4UW4rd3Z3am1vd0xLWUYyODVnQWx4c090SW9JbElReVc1SEVTeVpHR05RODhFd2xRSmxSemFBOXgwVHBaa2VMZWc2UTI4dHZyeG0xUTdvT09PdFp3ZFF6Tmo2bnZjKytZSkh0S1JPY0hlNVFtVnpibGMzTE9JSW9RVENheWF4cDE5dktYQVVBaElobUVhYU9IaDAxR0ZVSUFFU0ZiQ3hSSWdCbTNVY0s4LzVpeGZNWnpOaXJaR0Q1WUhvVUxuRitCR1NmSlFrU0NtNFdkMkJBeTBDYVdPNU40bDVsblpzTVFRcCtPM2YvZy81aXcrLzRzLysrR2RvMjdLZjMvR2RRNDJ0Qm81eVN6b0VYbnowVTU0ODNxZDJGYVVQRkRxbmIyN0o0eGhuQTRMQU1oUEVzbVBiRHJqVkxVSEM1UEFCVGIzalVSVFlkZDM0MEN3a1IxM1BRYXh4UUNNVTFmYVd4MXFUT1UrdkFsdmJNWTBpanVLYXV1OXdQbEJQQk5lYkRiL3grZ1ArNSsvL0h0Vm16ZmJ1bG5UdVdCSVJrT1Rhc3g5bDdKczE5eEtEVVlHdEN3emJhNXpxR0lZQkZ5Ung1SGhjWk96S2xuc0xpUXVHUWlkRUtnU2tqcEJBR212Q1pJSnN0MlNMZ2xqQmVndHQxeEdWS3k0YWkvVmdOTFRXb1dSUGYzbko0aEJlZS9xSWo5WVgrT0ZMRWdXYnBtYTFhb21sWUJBN3BJY29tK0I5VEYxM25CN3VFVVVTWnozTjBETUlSV3NraElEeWdqd1ZWQUk2RjE0QkRxYk14Vmg1NnZ4QTB3VjBKQ0NhNHRxQnpucXU2anVXOHlYQ2FnNTFqL2R3dGRteXloV242Y0NCRm54V1JXQWJUazhXYVAwTU9SZysvOGtQZURLYmM1Sm5yTEJNbzBDV1JUajNhcnFvQXNGMkNGMmc0b1Nic3NOWXowR21xUTNzdXBMajVRRlN3V1N1dVIwTWczZTB2c2RhVCtjdDFtdmswQktKZ0JJWlI1TUNGOVRJU1I0Y1p1Z2duWEZqTEE4V1V5U0JtMzZnOUpJUDMvOFpMNzQ0bzIwYlpHZUpGQ3p6REFlSVlTQUl3N2FxRVlOQmVoQ21ZNzdJS2ZLY1hBVUc0N0R0Ym9SOEswRzUzV0pDSURtWUV0bDB3a1JIbzR1dktSbjZsaWdFcEhCRVFyTi9mSityNjJ1RWExSGVZWVBrTmpwZ0drcU05NXdjTEZrZUxQbXdiTGw0ZVUwMzc3RlJ4R0FNMSt1T1dhWTVtRTFRV3VKRVNta1ZjYWE0YlZaSUlLZ3BVaWRvMnlLRkJpSElNMGxjVE5qZGxXT01PbzJJbzRDTU5KaVIwWGU0ak9pN2ppQUd2cW9yakhXYzVnVU9TWm81T3BlTmF0a1p2UGQ4eGJzUENtWmFVbHZIaS9OenZ2MmRiL0xqUDMrUGVyUG1xMjNQeGJ6aXdYVEM4YnhBU0hDOUo0b21MT2N4a3dCZFU2TkV3aEJBTWk2b2xJTFdXand4bWNwSlk4MnFiT2k2a3FBME9wRklKZGhQVS9xNlpqYUowVklpbkVQb25GVjVDMDRRUjRHOVJCTmgyVTh5MWwxUElJQUlhR0Y1c3RoamIvK1V2bTNSMHhTcG9MY1dFOEFaTy9vY3BSdTV3QzdRZFIyVE5HRm5XK1pGUVM2aGlGT0NoN29yMFdKMFB5c3BpV29mTThFaGd5ZEVHVkkyOUVHL1NwNDQzTkNSN0QvQTdpNDRqQjBFajVBZDZ5R1FhY24reGZ1Y21FdmFZYzRrRjdnUTBUbUowcHFUbzVRazFnUVZZNFZrTXdpMGJZZ1RDTVFFRkpWYVFyTm1YaVJNaEVFZ0tFUE1ldGRBR0VBRzZySmhyU084RzBpU01iUHdZdE9pbGVKWmtmUFdZWUlGK3NGU3R6WDdoM3ZZM21PY1p5STgrVUxpdktEdVBhWHg3TG9PRlNWOCtNR0gxTnNhMlZrY2xwdWJrc09UZ2pTSnFXekhUZGN4U1JWYUNkTFpuTDd2UjAreDZjRUhlaE5odktVMVBXVXZFV2p5U1BMU0NTWks4R2c2SWRHUzBoamFjaUFOaGx3SkloMXpWaldra2FTWXhvamdhZnVXRkVtUkN0SkVNL2pBNWFaamF4eFZ1ZVB1NW9LNnJwajNQY0ZNNkxvV0p3U3phWUVLQ3MrNDB4QXk4T1JKUWQwTlRIekF5L0VVMURtTDg0Rkpxa0ZISkNJUWhDYWE1aEhsZG91emx2MHNJVXNVZUV2ZGpqWk9uU1hFL1IxM2JVdVdKVVNSb2hnOFZkdlRSNHAwOFJpemY4VGNha3lVc0hNTzJSZ09Na2tld0wyaWpuZ2JLRXZITEZWbzZSaWN3Z2RRelIzekxLRWRlcEpjamNmUjBqSllSK0Y3c2hDSTh3a3VCUENlczl2Tks2KzV3TlE5ZlJaemI1cWpWT0RqeXgxSk5NYktURmZTMnpGRnM1L2xsRjFEWThIWWhDY1BIdkNIUC80WnNVeUpDc25wdlRsRkpEazZtcUcxSnpBZ0pIUURKSkViT1plUnhqcFBWVFhFY1VHaUJOTU1WdGNWUXg5UWswQ1FIaThGdHV2NStNVUYzMzNyRVltTzZGdURpeFF1Q0ZvcjZZdVUxZTRLbVNia1RoRUpPRjRVeE43VHRUdHVPNDBQc0xXQnVuVlUyeFZaa28yNldoR1JhTVgrUkZFUGdkWGRsb1BaakNUV21NR01JczQ0TVBpQWpsTUdOL0lYWXpVS3VMcWhJVWt6ckRXc0xzK0pPbTh3VHVDTVltZDNoSkRnck9OZ1BpR0xJNFRNR2RyMVdKZnFLelNTTkowalpJc01FVzNiMDNZRFR4NC80My9iN1hqcEt0WlNrS1V6NWxsTVpUVlYxUkNBeVRSbEVRMnM2b0hLV0h3WTAyWUt5M0l5WWVqTXFLaVBCcXhybVdRU3hVakhySGNyN25wUGtVWUlBa0ttb09IczlwYStUWmhveWY1a1RxdzBRaG9HRmFQd3hOTFJpQWdWT2ZDQnpneDg5NXRmNTUvK0wvK0NqOTkvSDRhV3ZkeWcwWGdQVFRlQUVFaXZ5T01CYVNVQlFkVVBGRm1HQ0E0VmVhU0FYZWNSU25FOGozRFdVRnBMVk13WW9vU1RCMGVVcmNFWXg1Nk9DTUZUbGcwbVNJUk4ySGFPdXR6eC9MTXY2UVg4N1hjV1BEcVlNWjNOMk5NUk5uamNiZ2Z6Q1crODlqVUcrMzlRVmhYdHJxRTJNMjRxdytBRWkvbVNycThZZkU5ZXBDTVNCczBrU1NpN25xN3ZzUzVnWTBXUloremxDYXZ0RHVNQzg3MTlwQWppcjVHdVFrQVNpZEUyNnp6ZUJRVCtyenRwSW96eEtQZnFjaUlJSUFQV09uUVNJUkJFQVp5RDNvNStBQ1VGUW9peHJoMDg0YThkZU9QdlZSQ2p2REY0UWhENEVBZ0JKSjRnd0FPRGRRZ0owa040aFpXMTFoR3JpSmlScyt0c3dNc1JKMnZ0aUVjZGY4YjduWEdqYk5uNlFOdVBtSGhlbVZESEw0ZEFpbEZENzhNWTFCU0F0WUhCK0pGYzRod2llQ0l4Zm5CREFDa2tPbEtvY1hsSzhCNGhBbmtjSWYwWVRPMnNKYno2RytIQmUwOW5MZFo2ZkFkZEI1dmVZeEZFS2lLU0VpVUZMa2lzaDBpT0lDb3BGYS9DYU9PZVFValNhRVQ2R3crREcvRTlTb3lkVGVmQnVvRHhIcHpEQjR0MWJvemVPNC96a2loekhWNE8yTmh6T0oyUnhSSG42MXVVYTFnTHljT2pleGdzblZka3hiaUsvWEo5eDJDQklFbWt4dnVBaUF4UG5qNUVmbmFITlFPN1hjMUprUkM4UlNZamJmT2lMQkVxcFVoU3dpdjlYOW4wdEwxbjZFdlNkUHo4WmxsR0ZrazJ6ZWpRM1pRcjNqamVweEFWMVhZZ0JNaWpIWXY3OS9pcVMvRjZISGNhTTlCMk5UdGptQ1FKaVFDTG9OcDFPQXhERU9RcTVmZS8vNGRZTkErZlBVTTZ3L1Q2cjBBb3F0WVNwRWNLU1RBTm5kSGN0UTdyWVpKcW5LaEpzNVN5cVJBaHNKZWx6Qk1vVFF0U1lRSTB1eTJ2RjVLNnE5bGNiekErVUJ3VUxHWUxLdUVKd28zcjRCY3J2dHhDQmpnSlpUVGpSazA0aXFlMGZjUGdKVTIweENEWW5yM2d0V2R2c0sxYW5uLzRRd0tDSXN1SkhlVFNZNU9VTDY0clRPWHB2ZWU3eHdMdkFwZTducm9mY0NGd1BFbm8ycHJ6enFHSWFhMERvVkZ2NU9LL2FqdEhaeXhYVmN2TGRVMGZMTmZYVzI0MkxZTVVYTzFhZEJ4enNRMXNXOGVucXgzblZ6dVVUaGs2UjFPVi9OVzI1SU9QdjZSZlg3UHRMTUtORU9OYTVBZ2xpSk9FM2l2YTN0Q2dpV1NFZFpKUDd6cTJ2V1FJZ3E3cldMZU94aWsydzhENXRtUGREbnowb3VabXQ4VVBodG9KV3VzWmtKUVdidG9CRTArcFJFUlhOMVFFMmhEVGVHZ0NySnVleGhyU0pDZUpFMndVODJuZjhaLzh3My9JRC83Z0IrektrdFhaUzA0bTBhaktHU3l0c1hRdTBJaUVUVytwYmVEOGJrV2pNcXEybytvR2V1TTV1MnRwQkpSVzhLSUszSFNCYXJDWW9XWFY5bVR4T0VMWGNjYmdBMTVDaUJSV0pHeGNRQXZEaDEzZ0xzQlYyL0dUMnhiclBMVkxhWnhtMTBxcXV1WWN6WHZYZHpSZFRmZmlFL0orNE11cmlzOXZXMW9sT0tzc24xeVgvUEFudDN4NlViSS9uMUM1MFloNnRqWmNWNDd6MGxEdUdsN1dqai84NlMwZm5GZklKQ0g2bjNhS2c3MERoRkpzbWdwRllKWVZKRTllUjBqNDEzVkxIeXlaaVRsOTlwaEE0TDM2QXpnSzNCd3NlT2NiYjdKL3ZFOXp0dVBSc3pmNTZXNUhMM3MrRW9KMHA3RHJodE5IcHlpdjJUVmJ2RE5JbmROdVJnSjRMd1gxdXVaZ1dWQjM0M0Ywd1lUR1pXeXJtdUFEOGY0U1JXQXZVVXhuNDY3aDdLNGxxVlA2SVVJWmcxU0NTVDduY1ArSWp6LzVEQjNGSUFWdDFhSVZmUFBlQTVUU3BObVV4V3dmS3d5bng4ZGtTYzZIbDJmOFVYN01xaXlSd1NKMXhQMTdSMXpkbFRpVEVoQ0liQXAxL1lVQUFDQUFTVVJCVkIrek05UlZ6ZXRQbmhBcGhkRVNnNkhlMUxSMkJGMUwzM0Y2OUlSNnFCaUdIcWtpY3A5U3IydWtqSkZTTXBuTnFROE8yZW1hVFZ5T3EvQjdSNFQ1aEgrMjJUTFRLVkZRNkRUaTlQVTMrY3JDWGIxbXFGdldCdy81bDI0RVlVc1JtSFlGY1pMd3djNHdmM2FJRW9IZlZRc0VFKzVVaVNsR01VZUt3eUhabGkzdFpMeGZmVlJKeE4vL1IvOG8rTFliNTlHN2lzSHVxS3VhWC92bFgrTGU4UkZmWHErdzF2RHR0NzdKeTlzN25QY0VaN2s2TzZlcEs5NTUrMjN1UHpqaFQvL2svMkY5OWpsdE85NmZxNnJsOE9TWTI1dExIajU5ekdRNm9lbzllWUJZQy9iM0ZrZ2wrZXlUejJnYzVOTUp1N2JEOUpiVGt3T0dFSWlrWnJDR0R6NzlqSjk5L2dXdjNWdnk5R1JCWG1SME51SHFkazFYZDl5L2Z3K1ZhTmJySFVVU2MzUjZTcEZQOGQ1eitkVW43TzUyN0IvTm1FMG4vTkt2L0FZZmYvVUZ2L0NOdDNqLy9TKzRXNjM1VjkvL0FmZVBGcVI1VGw3azZEaWhxaHAyZDFkTWlkQkNNdGdPbmM2NGR6UmoyNC9sa0ljbmh5eWVQT0xQL3VSSDlOYlF0aTB2TjF0dTExdSs5YlhIdlAzMkcwd1hVNzc2L0J6dkRjdkpCQlZGWk10REZwTVpzenpuNW03RGJyM2kyWnRQdUwzYmN2SHlITlRZTzJnMkczNzliLzhtMTNkclB2emdBMHpmY1hwOHlITC9rQi85NkVlMFZVa3h5WGo5eVJQT2IrNVliN1lqYk9MMGdKUERQUzVYTmF2YmE2d3hmTzk3MzZYcEJuYWJrdFhkSGM0NWZ2enBHZUkvZi9ja2RNMHdUZ0p6aGJVZTdRM0ZOR2VpSlcyVWN0MzI1Sk1sUjVPTU5GSWswdlBwelpyZzRIU3ErTWE5Q1YyV0Vhb3RMM2M5eGdWTVUzT1lKWHgrdGFNeGhzSEJKOWMxMWdvTzA0alRaYzVocmloeVJSeU5aL3M4SGJ1Qjh6VEN5b3lCZ0l4ejNydjNDL3lMbjMxQy9zbWY4NSsrT2VlWDdzKzRIQkordHVreFppRFpmOG9rejJtN2dkTkNjVmV0K05PLy9KVGVXaDRkRlR6ZHkzanplSTZNRk16bS9NWFptcWVMQ2NKWi90K2kzcVJIcyt5KzAzdk9jT2Y3ampGSFJvNlZ4UnBZUmRHaUpMWkV0SzFHTDlvdzRKVVhiY0NBWWUvOElmcERkTU9MM2hndzRKMjk4Y0t3WkxRdENHMjAyRlNMbEVTeFNGYXhLaXN6S3pOamZxZjczdm5jYzA0dmJzTGV4UzRRRVRmT2UvLy84L3llbjFMdzg1czFZVlh6YkRFRFB5TG5MM2N0WGdqbWZpQUxOZHQ5aVRTRzdPaUFuNzdlc1dsNlRyWGpuMzF5ekJmWE8wNWNRNk16dXYvMlgvQ3YvdVcvNXZkdi80RS8vdUduUEpoUHVGM3RVTjd5WURsQklGaHB5YnZySFlrSWtGcGdoZURoazNQVzJ4WnRETFdQeHR2QXJ1TDVwejlFT2ZDVFVSTFZYNzFsM3hrdXYvdWEzZzQ4T1V3NEN5MzNQbVMxTFZsVlBSZkp3TWtzWjk4NXNqQ2d0WTU1UHVPTE43ZHNOd1UvK3VCRDh0bUVmMTFuNkVYZ0NPYmpUSTZRVkczRGZCNXdrRW9DSWRqVmEzSWxXQVNheWZ2eEo0MWptbGp3NWV0M0hNMGZvTnVPcU84eGNjWkVHam83RUVTUVM4dmhWTFBhOUNRZVBweEhETmFRS01Pbko0SlVDMEtsUVhwdWk0clZQc1lCRTY5QmxLUmFVZlNlNThjSG5GemVzbklEbTIzTk1OVWdGS2V6QlZjZHhFT0YzKzVndDBlZW5DSWRQSGw0UW05NkpuYUQyUlRjS2tFWUtKS3U1MXdKdXF1M0hKOHNTVlRBSTYyNEh4eXpWRkxZZ05aNmNBYXpLN2g0ZnM3NU5PWHJUVFN1WWdVVXZhWHFERyt1YmtnL1hUQ0w0Ykdhc1BJUnQxM0Z0bGh6c0l6eG0ydDIrMnUrZlgzREh6OC9ZZEoxQkVwaXlwNzcrelZSR1BQOHlRS0hwSHYzTlFtYXhYUU9rMFB3a3F1Tm90NXVHYnFPdk5ia2VZd05ZZGJzT1RxSTZKMWlWOWM0TGZoZ2tmSGk2dzFWMjZPUFEwNkNHRmZWU0pXU0NZbXU3bGlvbmppVEpMSmhxaUorOU5tUDBQTlpScWcwM284dktNdDVUQm9KZ2lBbVZCS1hKeVNCSnJTRzk0a28xbFhGTEFuNG8rODlJb3dqU2dGOTI2SmF6NzVxNkwwbDFRbVJFc3dEei93b3dub292YUJ2YW9KSUU5Q3hiUWQrY0xIZzNrSmlCWDRZeDhGMTF4SnE2S3Vhblcrb1g3NWl0eXNnaUFobWMvS1RVMTZ2UE9IUll4NzJOZXYxbnNaRGZINEVybUNhWm9UVUdLdWhQOERldjZhOCtSWW5KY24wRUNzRmt5aW5yUnBrWkpocXcvd29RNmNKL2UwYVl3ZXVWaVgwTFhkN3h5TFZIQjNQNmN5TVZ6Y0ZoOHVNeVRUaTJlTXBRNUxqOWoxTkhsSFprREROT1Znc0VOMlcybHFVbER3NG00SzE2RWdSdmw4TUhaNGZvTFZtdDlrUllMRlJRbFAybk9ZS1VROUlCUXVuMkx5N3BRY091eGhkS2FMRzhQYitsdE41VGhKcEJpZDU4V2JGajJZenBwbkdDY3ZycXcyUHpoYmNsNFpoc3dJaGVmYm9qUFBqS2E5dTEzaG51TjRYUkRwRUIwcmo5Qmo5T3BsbTlJMGk5QjNUeVFsYUM0Yk5GVU5iTUprczJUcE5hd3o5dnVCa2VrQnJGYTl1eDhMRUo4dVV3Mm5NWVpyUldZdlpGd3hkUitzVjgxU2pKSnlGSVNKYzhKdGR3emYvOEZzS0N4ODlQTVE3VDVJRTlPaHhSdDdYUkpFaUNRTjZwMWcxRmJ1NlFRbEJHd1NFeXltcXRzaGlUUGE2cG1Bd2xuejJrTEpXeUhLSHFmWU13MENlcGRqanh3alQwRmxIWnhWcEhPRnRSOVVZQmlOeE5pS01OT1c2SVlrbkpNNXhjZXlwVnc0ZEI5eDJQZXU3a3ZQakE1NDlmc0RVdjZBejBFdkZUZEdoZGNocVk2aVVKb2dERmtjTDFOVnJscEVnRGp3cVNvZ0NSUzhVVWlrbWt3bkNHTFNFNmZ3VUlXSGZHZzdtTVoxUUNPdVFEcVEyTFBNQkx6VyszMUwyRUNBNFdLUzBkVWZYR01RazU5RXB5SzRuQ2hOeUh6Q2ZwN1I3UTZRa3ZoM3ZERzYyRlk4Zm5KRk41a2dOWG1sT0hwMmc1N0ZtRW1lQUlFNGlydHNHSlFNNktvUlRCSUZpbWgrUkJCSDNyOTVTRDVhNjhSd2xOYUdRaUw3R1drZlJhVTZTQ0c3djBkYXk5N0RWTVpNb3h2ZDdsSGJzRVN5MHBxOTZMcDZjMFJoUDcwSlVCTE5KVExuYjRRYUROejJ0VUtSaFRCQUVISC95QTU1R2IzaTl2eU1SZ3FuelpIRklWOTh4UFg2Q1N5Tm9lNXp2dVMyM25HVWh5L21Td1htU3lDUHAyRzVCZU1uaHdTRVd5MnJyQ0hWR2JRU1RKS0xCMGp2RllSQXlpMEpxUDhFY0hORXdybFZ2aXc3cGJ6bGNHbVpuQzZ5Rm0wM041ZVVWZVo1eWVIcEtTTWd2di8yT205V091NmJsMUhmTVE4M3AyVk95WEJHazBSaG90WVppdldYaWVsUjZUcWdWS2cycFpFNjUyOUoxQnVjaENlQmtFckh2QjI1M05WWjRIbDRjSThvS3Nwak9XSEkvY0hvNFk5ZGJ6bWNSblExUXNTWUxORFlLRVFjbkJNNFJkaDIzcTRLbWNVU1RISzgwMzE1Zm9WZEZSVUJORW1oaWY0elVjbVRWOXkydEZCaGpDVnpDZmRVaTh3TmlOekFSZDRRS3R0M0Fjbm5BNEFTQ25yZHZyMWk4cDMvNnlyRGZySGxWRkh4MGRrQVloTVNpUjBySmcyVk9xaWVrZ1dMZkMvUmdDRUpGYXdTZGxZZ2dJUEtPTkJEc2U4dG1kYzBuSDMzTWwvLzJMOWxkYjNueGxXZnk2Ujl5L3diRTVwN0x5akk0UzlldE9LQ2tXVHVNOERqcmtha2dPNXFTMlE3bFBjSld5REFoVWdHN1lvWDFGdFBIQk1KelYycVNENThnbFNhUkZZY0haK3k2Rm1zZHBiam5iV25KcHdIZWVMeUFNQTQ1V2FaczFpVkRXREdmS000ZlBHU2F6Mmp1SmRQak9lZVRnRmkzZEpWQTRqRlcwVG1KSVdaMmRnaTJwV2d0T3N4UjdGRGVZYTFoY0phaDNIT2taeERNT0hwNGlyV090bXlJcGVhclZVbmJHdzVjeDhOSFA2VDU3aTF0TzZydHkzVkhQa3VZbjU3Z05oc0diK2xrUUxWZFlRYUpjREZlS3VJa1Eydm5TZEJqTTNqZ1NCV1VZWWp0S3d3UUNVL29MU3B3bERjcldqTVE5VFdYTHNDM0pVd1dSSUdtR1hvU1FnSzFRVXJKNEVOQ041REhBdDlWTkxaQ0tVM2IxNlJCUXBiT1NBTEZ6ZjZXMSs5V1BEbzlaUkZwZ2tpekdYcWtqTGd1ZTNaT0U5UWR4V2JOK2RNekhzNUw1aytXTk5KaDI0Sml2MllhUkhnTDAxaXhERUpXMngxVmJmSENJenk0blNTYlRraUZ3RnJMc0ZtRHRaeE5BaHlLTEVsb25PU0RaeGY0WFVQZDk1U3R3TnlzYVUvT1NDTE5iSEpOWEZXWWNzM3ZYaGYweGpKWEhaODhtbEQxS1RwWGJMMGptMmJjWGw5enZLOXdWcEZJaGJlU3hneVlkMjhKdENSKytDR2J6U1dQRHljMGJVZHJMTkdnRVhuS0pCYTBQa0l5NG14bXVxVGZiSEV1eG5yUFBJUmQxWkduTVRvSWFadVFiclhHR290TmNxU0RvWlhVVW1IdlY4elNFUlcvWFJla3NVYkxrQURZbEQxcG5LSUZqbFpIV0svWTdCb3docmJZVVRZTlZrZ3VGaE4yWGN2Z0lvWm13TnFCU1JMUlZYdUU2NW1Gb01UQXBxZ0lwcEx0M3VFUjlQMmVKRTBRZHVCNlUrR0ZKOVVoZVI3UVZUdmtmaytxSlRKS21CN1ArSWV2MzNCNnZpQUxKS3J2S2UxQUswTldyVWZmWHpJNWY4anErcHJmVmgzclhjbVQ4d0Y1TUdlM3U2Vy9mc2ZnQnM3bUdlSFJuSEM1Uk1ZZFpoaDQvZkk3Ykh2Sitka2hzMGpSMVEzejJaeG1WZENyQnVjVVpqSkR6bkwycjc2a0xSMVd3RzNuMlZROXU5KytJTktLeUZVOFdXYTgzRlM4dU4zUTl3TkhnV00yU2JqY0Q2emFpcDN2K0xRWnd5WW5pNVFvQ3NuaWlFNkdsUHVLOHl3RElYSER3TlBUQ1pvT20yVUVGcTdYZTFTOTUrSnd3U1FiZWNaOVU3TjZjNGtWZ3R0dlh0RUIzL3ZvQTZUMnREY3I2czZTNkpDKzF0UzlwekVGT00vZHJtWjdYL1BnNkJndmVyU1UxSVBEOU4wWUpsVWx2eWtzNmVVRzdhVGtkZEZncmVQWHIxZDhlSDVBWnkyUkhmdjhmcmZ1eDNKRGJiamFEWFRPY3Q4cEVqeVRhTUxYcjBzRW5uS3o1dURBWUFtUUFnWVBXZVhaMVlZdzBnemVFM2hMWEhmWXdSSkdpa0FLbXJyQUFHR1djMTkwckFBbEF1UXc4UGZYOTFST3NPU0crS25qWGVYNTluYk5LeXl2WHE2NE9Ebmd4WHFQcVh1c0VPU0JRdzk3dXNvZ3RDYVM4S0tHekd1aW5hV1VBNWZibWpNLzQ3SnkwSTJYSzdPdVpsazBsQzZtN2hoYndvYWVMMTdkajlNUnNPMDhmL3JraEVaWi92MmI5WHZmUHBTMTV0NEw1bE1OY1VidzNVdnVObnR1UFZSV2NtOFV2YmJjR1VmcklCQ095RzRvZXN0TllkN1QyTEFiQnQ3Y2JQZ2o0d2lsSk5TQ1lqL1Exd1UyemdqU0FOTjYvdUhyUzQ2V003N2J0dS9aUDgrTFc4R0xtNGJOdmtWSldFNFNmbkZUOFh2S01HOUNRaWw0dFd2WTFKWWdEWGxWTm15ZFlQak5MOUgvbzExaWh3QWhKZFhoSVgvWkRPUjVnR1FBcGRudFdyck80a3lEbFFsQ09wcTZSVXVCYmdhcVlRd3RuaDU5Uk4yTnB3WkNvRUtONkFiaTJTbkYzUTNXZWJKWlRpYkdGRytxWTRTRGZWMHl5elB5Wkk0MTlTZ3EwUUh0MEhMMis3OC9vdDN6QlEvUFpod2NIZkkzZWtCNHg4UHpBNzZLTXI2clkzeGM0NTNubDdYbU9EMm1EUGY4NEVjL0pKc2tmUDNUWCtHN2lwOWJQK1lFSGh5eTIyNTVYUmdta3pHdGU2QkQ1cE1aOGV4b0JDMnM1ZXJtanVINUtWazY5aXJ2eTVMZm5oL1NPTS9rb1NhemxxWXArZlpnem5JMjQrekRqems4UHNUSENaLzk0QlArN2pkZnNESno4aTRqOVNIM0xpRFZNZDViUWhKTTdMRXVZRjlXbzFXa3JKZ3NqL2xWM2ZIZzdERmFLMjdiTldKbVdKZVdvdGtqY1h6KzJlY0VLdUJYNnkvcHJXR1p6OGlUS1p0SmdVODc4SjdIVHg1alAvTDhkSGZQMGNFQ3JUUjNkMXVxcnNPYWdlLy84QWRNdEViSkVIMTIvQ0UvL1B3NTJTUmxVenYrOXE5K2h1czYvdlNmL0lqWmJNa1h2M3ZKMWR0TDVHREo4aFNoQlhlckxhR0h5N0xtZHI4ajhQQ1AvdE9mc0YyWGhLN0RTODJxN05tc2Izank0SXoxOUpqT2RBUytaN0U4SnBRZVhaYmdIQ0k5NEREUDhFcVJpNHhBYXZvd1k5b1VuQzlqa2pqa2NCcWpicjdpNlBPSFhMME5HT3hBRmtmTXRFZFBUNm1xMGNGckNjRFhIQzRTdXRjdmNONGgyeXMrUHp0aEdnaXVXcytyei82QXYvanJYMUowbDVpeUlwR1cvKzRubi9EMDhWTTJsUU14UndwZ09jVUdJVGMzZDFSOUI3TUZqMVBESklneE9zSWp1U29Vb3ErNDZBY09iMy9EbVp0VGUwT2hLaTRmelBuZzlKQlpFcEwwRmUvU2tQWHRPNGJCOGYyTE0zU1dzUzRhM2txTlY1QWRKRHlhQjh5Q0dKOGFsQmk0emcwM1pjLy9vVEpjcEpGMjRGd3EvdkQ4aUkvTGhxcHUrUGcwSjhnVFZvbm1ZYTRSRXBhekdlK3U3eEduVThMSW82U2xsQ21sUzVsT0Qwak5EdTBsaThlUDBQL05XY3YxZi9neityNG5xL2Y4ZnRYeVpKbGkvdUlGenNKUlZmT2hoa1FseU5JamhXQmREM1RHSVZZNzdxTlRuRkJzL3Z6LzRaOCtHbHMrTEo3MXVtT1dCK1RiRmZkaVFxYzh5elJDdUEwRUVXWG9HS3dqeURMMDhoUlJYbkl5VzVLRUFmVit6ZHAydVBvZFJlRUoyNXgrdithanhZTEp2S01mWUZmZVlYWmIycWJuby9NWmtWTDBya2JJa0RTTCtWWHZxTnVlYjMvOWtqUFI4NCsrLzVEdm5VejUvbi81bi9OLy85WGZRMUhSREJWYUN4NllPejVvQjFhN2xpQktTQUpGT2ZUY21ZQzc2NWZJd1hKODlvQlBIbnpNdTNjdmlXMkRGSUlUN1dpck85YmZGWnpyUjBUMm5tYTM0VThXTSs2MW9LM2VvQnBCcmp3VERMTnBUK3NFeDJGRE1GUWN6U09Xb2FXekExZnZicWhMd1pNUG5tR0xNZnR2dlNaYjV2eFhmL3hmOEcvKzZtK3BiMjl3WC95Y1JUUGgrMTFMTVF6TXRoUDZuU0tySytwcTdFMm9tcHlzcmxnY0h0UFptcUYzTFBJWjFrV0lxS2JYTGYwd2NQWGxMOUQzcjk1Z21tYTBlVThDNGl3ZzBKNjN1MUZGb3R1YUJ3K1BjRjVRdmk5ODFsM1BmV2M1Q0FQKzRMUFB5SllIM1A3dFR4bE1SZCtNRXFkbkJ3bkxKTURxa01PaHdYaEhGaHRBazJXU1MrRnBqU1cwT3hJcldYVWJEbjNFUVNqWW5pNUk3aXBFc2FOM2pzRW9PbSt4dHVjNGNBZ3RFSjNqM2tvZUhPVFlwc1lvd1h3Mm83WWFaMnYyOTJOTTZ0UFBIdE1Jd1ozUkdPRjUrYzBMZnUveloxeGRmVWU2K2hhNnNXUzVXVzhJblVRbmM4SW9SUHVBS1JFWHp6Nmk5WjdwZEVhUVNQS0RDOVpWaThlaXpJcEZsaEtsR3VzRzd1cWEvT0FJNHkyK2tzVFRDWU4zeEhuS3dhNUF6ekk2WTFIVEdHOEhBZ0UrVkVnck9Ubzc1WFFXc2VrcVFqSDJJMGVCUldSejNERHc5ZGN2c2RXT3gyNkRIelRhRFlRSUZwRmszMVRvd0JBRmdzRmJJanBxMTlMVkc1cTJwYldBVndSQmoxWXBDa0VtRkRkVmo3NUlBMG9VeGpteU9DRVVpcTZyR1dURUlEMG54d0dCVWxTdHdVdURraURDVVRRNFRSZWNmdklaeDA4LzRDL2V2dUIyK3gybmFZSUd2SFgwRXJ5M0JGcmdrQWdrem50Q1Y5R1ZOYjF4aURBbXR3V25pNVI4Q2pvZXVQdnFEZE5aZ3RFcE1JemtVSnl4WHQyempNYVdEdTA5V1dnSmc0UmNPYlNVT0tISDdFTGQ4djFsamhrc0wyOHJ2Sks4V2JjMHl2UHYvdTNQYUlUaStVY2Y4T1hmclFtb21NV0tUV3NRMHJMMGxraENLaTI2MzNGNGNZd09RN1pWejY1elRCZUhySWNkemhoMnpSMC9mckJrT3d5MDJ4WHJ2ZVZaTnNObkdiMnlGTnVDMWxoaUVYRnlla0YxOHkwb04vS0ZqVVBNRTA2a0hHMW1zYU1OUXQ3ZHY4SHNPb1FRUFB2d0NFeExrczZaNXpsV2VNUnVqYlFRQm1OK3NPbGJlaCtNMUxYdHNYNUV1K0lnWXQ4N09qdFMxQXdkYld1eFpVdVc1d1JTSW9WRWF5YzVUVWRseUNnYmhuUXlaZFp1cUtVQm5YRFRHUGIzRythVENXR2swY3JTT2s5RFFHWmF0R3ZIRm95bVp4bmxoR0dBbGU5dFZlM0l4Um5ya0Fsb1llbDh4bUkycGUwTnhlcU9nb284bjFIc0phYlJ6T1laZ3hYc3lnWm5CeEk4WnQ5UUdjc3NHdnQ2bXYwdFdNSDE5WWJwMDRla2FVVFp0b1I1aUxlS2Q2VUhyOGhuT2RNMEdxZUNVQkxxa3AvLy9BMCtHZmtHZTNkTEpFSXVWeHVhdm1YVkp4em1DYk1Jek9DSnRTY05ZZDJIYkM1Zll3N1BDWllMWEdkWXZkalRYY3hJY3N1KzFuZ3Y2SWNLVlJraWJaRkRpek9HbDk5dFI4QjFzU0N3SGhrRTdQQWtMY3huQzlJZ29uWURGRnRTcFRrOG14RktSZHM1YW1sNTlmSWw3OTVjUWx2eWVUVDJNQ3NwQ0pSQU1HQUhnWFVlWjBjRWJoZ00wMm5LM1diSGRERW4wQXJURE9nNElMSTFmYk5qa0lLczc5R2hLSW1pQkMwbFdnaXNEU0YwNktnZ0ZJNDhHdGdaaFloVG5CS2d4Z3ViZVJDRE0weG1oMlNMVStxK1J3dFByaHFXWVVmYkM2UnQ4RjNQNVhaUFBjREpaTXFUOHdQbWNjRE4vWnFtSDBqbVN3NnlnR3cyUjlkcmJPK1l6TS81MlZkdlNad0Fyd25yaWlRSVdjNG05TjVocldTNmZFQnRQTFBBRTJjWmNTVFo3N2IwT2tJNndXd2VNMWpMMzN6MWpqOTRkTXJwTEdaUWl0YkRxdHB6KzlkZkFnTXlGTmpQUDJVMmlWbXZIQmNKbk9VZTIydkNXR0Z2MzFKS3lhNldsTFhuek1Qcmw3OWxzSmF6Z3hsMWNjL1JTVW8weVRDeFoyaDZwSFpFYmN0MG1aSFk4U0VhVUlUN0dnMGtvZVN1THJpNTJsR2ZkaXlTQ0NrMVo3TXBhbmxBbTEyZ2dwaXFxTWlER3FVaWdqZ0dQMkNDSHVNTmJkV3hONTVuc3lXMUNHbWJraXpKMFZnMjI0SXdUdkZDYzdOcGtRSkM2NGhsZ2RjUnZpM3h3clBJTTZURFk3MWw4QVBlajZDbkhjYXY1ZitIVlFyZW55eFlQNEthVm5peU9DS2JaTFJOamJVZTU5eDdpSFFrTXEwSHJSVktTNkpBSUlWZ2NCNHZCTm83aEFla0pBdzBVcjUvZXIwbkRFTzhIeVdGMWcwWU93b3MwMUNqcFJnMWJrcUJHcUZNeWZpOWxaWm9xZkF3YmdGSDh5eTl0UXpXMFR0UEdNVFl3WUJ2d0J0Y2IzaTFxUWdEU1J3cGtrQ09ZS20zS084SkJXamNLTTNBRXdDaEc4QjBaSkVpa1pLNkhpSFRLQmhCVjhHNGhsYkNFd2VDYVJJUjZSR21iZnN4TDZna0pGcVNLZ0hlVVZRZFZkOFRSaUZob1BEZTBWc3dYaUNsQXU5SFlCWUlwUUFQMW9HMUR1OUhNTGV6SXlpcnZCdGgxL2NobEtFZk94YkUrNVBEVzB2YkR4aGowYjV0a0VPREVPQ0RDYlZvYUx1ZUJFMFVhUHpRRVExUVMyaHRRTzhGalZlb0tPRHBwNSt3c1piWDMvNk9xdGlUQ0doc2lEWUtid3pONEprZkhoTXNaMWhucWJZYmlxWWlVVDJaVHNkeFVDdENhMWx2Q282U0dTb1FwQmVuNUsvdktDOXZNY2J6N05FcGVSSXlPSWV6QXc1SWxNV1lpcVlYMUtGRnVwRHMvQ0hOcHFVeks5ckc0eFJjSE9ZTVEwZG5FMlNzK2ZHZi9ESC95Ly82Yi83L0FnN3Y2WGNienA0ZHMxaE1LYzNBZmRsaWR4dW1ady9vT3pjV09TY2gwNnJCTjlkOG1CanF3S0Ywejc3YTA5NnVPWDN3Z0VCTGRtMlBEVVBNNERqTEF3SWhFVW5DMVg2RDIxVTRLVkRKakRESldCNGVVdFFOVGROemRWOXptR1ZreXdQS3U5VklNSnNPamg2eE9KalQ5ajJ1YVJHQko1Q09WbGlrdEZSTkJWcFRGUnNPWmpsNXFqRW1RUW5CNEFSdGVZODFqaWJPV1U2bk5PVVlSTzBHeDNSdTBiR0dSZ1RqNzhKWnFxNGpEMFBTek9LOVlGMkNDZ1J4cVBGKy9DK1FVcUFSSEI2ZjhyWXAyUmNseFg2TGl3MmhsZ1JhcytsYm9xWmk4QUl6T0pRUVdPdEkxY0IydlNLY3pFRkt1cUVqRW9yZUs3N1pGUlN0NGFKWUUzVWVHVVNVdGh1emJKVWtUcVAzbjNXZSs3c3RZUklUS2MyT2pKMFJIRGVHcXRtU0xtWkVuVVVLeUtjVDJyNW1Fa0VZZWw2V0hRZUxHYmRYYjJDZU1zVWpvNVRkdW1TSWVyWlZpd05PMGhDNmlyNGJsYlBLaDh3U1RWMXVNRHBEYUkyZ3h3ckZaSEdJRDBKOEZKRGtGdThrclIyNHZLNFFVdkx3WVlTSVk4SjhNdDVGdERXSjlaaGVzeHRHL1A3aDhRU1poNVRsbGo1ZDRyemc5dVpyYXYrV3plUmo4anpGQ1FlczJYVVFaRG1wOGFBaHNBM25KOGVFZ1JxYlJPT2NYVlV4RkFWSGFZajNuaUNTNUZMZzRvU2pTRklQRm05YTlGMWoyWHVOOVo3QUYyU2hZcmV2V2RlTVNkWitvTFBnZlk5ckJaNHhiclF5UGU2cnIvajBuLzlqUG5pdStPWFAvb292TDFmVVpqMm1iUEtZUFlhcjNaYUpNeWdCZVJiemJWT1F4UUhkN1I1alBlM2dTZU9ReGltdTloVmRiN204dVNmSk1vcGRSV01HcXJyQ0JqR0NQY043NWwzSmlJbFdZQXkyZll1eGpoY3FvUm9FYXRVUkJhUEpzekdDZGwrU1p4a0w2ZGhkM3ZLSGYvQmovczh2WDhLMm9nQyt1ZHV5UFR6RzMyOXgzdU9RWE5xQTVtYUYwTkg3ajVlT1puRHNtd0V0UXFSU0pBZUhpTzBlNHd6eHpacEpxQmk4UkVwSnJTSW1NcVFiSE5jMysvRVBZaDBDVUVxVGh3R2kybEtWb3piL09zMzQrN3NhWnd3aXZtT1doQWhud0JsVVlQbjgwK2YwZGNud3hYL2d1OHJRN2hzR0oraWJua2t3WWwrOUc1c2RwUjRiUVdiU2t1VUJ2WFVNKzVZODZCbThwNjVyakFjbFBQci9mYkVGNFhET1VlMXJmdkQwbE5iQ3JuRllQeVpsM3R5VjZHQXNPUlRXY1ZXMHhOT1V6VmZmMG43eFM1WVhGMHdPai9tN3Yva0Z2N09PU01Bbmg0Skhpd1dyMWhKMmU3eVFKSk1KMzlRZHA1Rm1XL2YwM3BPWUhoMUthaEh5dDUzQk9qaHNCcktzNFYzVmpwSHJQS2ExTlowWEJFRTRBcE45Z1pTV2ZEb2RSMEFQZFYralZFZzNkRHgrZEVFWUJieTV2R1NpUXA3T0o2USs1OE9uOEtmLzVEL2p4WXRYZlBubEY5QzEvTS92T3ZMOW1tN2ZFQWFNM2NpcEkxQUI1WDZMZDU0MDFkUnRUMXUxQkVpa2treVBKRzVvS0xkN1RoY1JZUkF5bWMyNTN1M3AreHBwT3ZDanMwY2FReThVem51azh2Z2tvN1VPNmNjVEpnNHRaZFBTOVliWlpJcldtbmdTc1lnREhwVUZmL1RqbjlCM0xYOStlOFAvZEhlSGxBSGVTNHE5WlRvSjBXR0lsM0swbTZEWTdrdUNSVVp6VzJHSEFZeGxsbHVpTk1NTUFjNTZna0NnLzF3ZlVhNjJTQUVIRngvd0lwbVF6bktLcXh1R3ZrZE1Jc3JFSW0zRmRKb2psU0tPTTV6V0hEOS9SRHFOQ1VUUCtkbVNYMTg4SXBqUGtGS3lPVDRnUEQzbTNlVU53bzZ6Zkp4TzJEZDc0cU01MTFkcmpCbm9xb0xqZ3huYm91RThDcEZDWW9SbnQ2OFFYWWUzbGo1S0VNcHhFS2VFQW9TVTRPejQ0cFhtV0R1R1ZvOTB5SzRvT0lna3lTUW5ERFJQbitka1NjQW5UNytIVnBvZlAzM01iVFh3azkvN0ROOFUxRTFKMTlTY1B6aW43Z2R1VjNjSTRQbkhIMUh2UzZKcVA1cE1rZ3kvSzVHVGppeE5FV3BNU1IwY1hoRGMzaE9tQVZvcHBrOC9SallsWlZHU2FJbnBlNGFxSUlvVWRkM2ozQWo5VG1jWjcxWWJsQkJqbk1zcnJGa3p5eU9TSkVRSnlVZWZmVVkrbnpKMGE4eCtnWkFhTFFQQzZRR3V0NkFVNXllUFJ2ZFBOM0J3Y29UVW1uZjNHMUkxNGRtSEgvTDI3UnRzYjVpa0tkTjVSaGlFMks3SE84ZnpENThpL3V2Ly9uL3djUkl4REQybTM5TVc5M3orNUNHck41ZDBuV0Y1ZE1LYkw3OWtIam91MG1COEM4MFhuRDU1eXMyMlo5OGEwaWpDdVlGdmJtNlpoeUZTYVo0OE9FYm5HbisvWjZrZENrRmRsZFJOeVRTVVhLOVh0SDJQbEpxRFNPS2puR3dpMFVuRVh3K25EQTRLcGFpYmx2VDBFYXViRzA1LzlUTitjSlF3aTBJMlpZa1RqdDRZQWhremVFK1VhRXBqcVZ2RGFab2hoQ0JiVHBuTUpjMXU0R3BYczV4TWNGSE1xUXg0OGQxM0ZLWWp5bExtU2NBZ1FxUWVUOE9qK1lSaTE3TnFOMWpuaUFWSU1XUGJkZWdvUXFzUWtVMUphUEZ1WUtncWVpOVpYWHlQbDAzRm05ZVhMTDk5Z2ZJRC8venpFNEpRVVlzWThEUjl4VHhKMmJjZDk3dG1sRDZaQVNjREFxMDRXYzRRU3ZHOUJ5YzROV0hmMVRUN0R1MUhZWVEzRmZQNWhDU09LZXNHWnpxY0R6bGVUcGpsTVM5Rnl1cDNMemc5bk5MMVk2UnRvaVhXaGV6NmhvdFkwQTRkcDhzSitudS8vVE51OTJONXcrazA1akFXbU0zWFRQWWxnZlZjbEZPZVRtTjZaK2wyMWJqUzdlN3g1YmVFTFV5OVEwdEJid2NlaUpDbzZCaThKREZUMW0yTE1aNXE2TkZLMERuSk5KVHNCc3QyTnpKNkZ3Y3hxNzBEWjRrbU1YbWkrYmo3TmIrOEdmajFiVTNySlUvLzhUOGpXMFFjVWJJMEd4NUdpcWFzS0lnNWd0WXhQZ0FBQkhWSlJFRlVXd1lVK3dJM2VDUURFNmQ0TUp1eURNYWY2ZUZ4d052TkJsdVd6TDFqWWdaRWIvQis0QWVIZ3Q0NldsL1M5eFdMeVFHYmZzQUMrNXQ3WWcrcTdoa0dTMVZXUFB0ZVR1ejJCTDdBR2JoLys1SThWRHlkQmJ4b2F1NGF4MDkvKzRMOXdRazM5enU2dHNiYkZpVnpqb09FKzZiQU9ZK3ZHNEloSUI0c3o2Y3hlSStwTzJaSE0ycm5TS01CajJIWnI5ZzNOd3lkeFRkN2NCYTkyMEJiYzU2ZWNCNUhmRlVVN1B1QjVYekdZWE5IMENsWWw3QXJtTWR6NGloRGFFRlp0N1JTczczZUVNbVd6c0taT2tTbnl2SDhZRlNQK2NHTWM2d1hCTFpET1UvWHQ1U21BeThKVFVQZ1BZU2V1Z2xIN2FrRGFRVnU2QmtHUXhwNWxCQk1vNGl5cVhHbUpRNER0QkIwWFkxV0dVN0NSTlhJWWNEVklMeW5hQXdaanFHUlpMR25hV3QrTDYyNHR5RlJZUGpGWC84YXQ3M21RWExJY1I1emVpeVlXbGllbkNEOE5aRXhPSlhoK3c1cFBXMDRaZ0dMdW1HN3JTamFEdWVocU5jOG1pZkVCek9xZllmekZwOUk2cm9oRkpyby9CbkNlL2EvL1FVaTFtaG54aEtMTEtTNmZZM3JXem8xUnJVekJsb1hjVlYwL0hyVjBCUHc2UG5ISEg3K0dmLzduLzBsdWx2akJjVENNV0JvdXByT0RNeXpCSzFDQWxxS1lvK1FrdlA1QkNsNitxNGp0dU1FMDhlQ1lsZU5MU3p2MjFoYWtlQWtCR0VNT2tMbEhXRUpWVm1qOVlRQVdBaUJUbks2MmhIRkFVcHI1cE9RcTEzQk1oM1liM3IyQmhvajBjcDRRbUZSVW5DdkV1YktJWkdraCtORG9lS0V0Nit2U0ZYRVBJMlJIcVR5eERyQStnSGx4Mm5CMkFDbEpRbjlLRUxxR29aaElBazFtV3BINDdZU1ZFTTlqb1ErSkF3REZubEEydzBZbDJCRVIrTThiUitSQmlFbmlTQjJJVTkrL0NmOCt5KytaRjEwVk9XR0RSVnRQc2NNaHVMMWE3UlNLQW1USklRNG9GY2h0UjNiT0w2N3VhZTM0M0pKQ2tFdGU3eldGT1ZvUGg4ODZFRWpveG5HZU5ZdnYwRklpWW9UZEtDWlRTWEdlNHpwRWM1elBEM2t2aCtaUUxxT05JMll4d0s5dDJ6cWdmdTdiM2d3L1NOV04zYzhuWVZFc1NMVzRGUkVXeG5xd1hFK1UzUU9WQkJ6TXN0QmVMSXM0N3JZUTl1aDBvQlFTdmFsUmVnUXJRUjI4QmpuQ2JVaW55d29yY0NVQTY4MlBmdmFjejVKOEdVekNqKzk1K0Z4VG0wc04rc1ZnM1VjVFdNVzB4dzdkSlJUQmQzQTViWkNYOVlkVDhPY09KQ0lBY3JCc2NnU0xCcVBweHBxNGl5bjNGV2tRcUs4WUNkQ1pEVGFPMW83N3FabjJZUmQxK0dqQ1VJSXFyWkJJMGlWb09wREhHQUNqN0FPMFJ1eXlHTWR0SVBuOGNrU3U5bmp4R3hjWUFoSjUvWk00NERhQlp4ZG5ITDU5cHIvWkhISVpCR1Q1Q0dYdXg2aEpYVVA1M2xDcUNSOTU4bXltTDd0Nkt3Q0JGVlhZSjBrampWS0NPYlMwMW5IZHIrbktndU1FenhhTGtqeWNOVGgyd1kzZUxxdVI2aUE1ZFNpcEVabHh4VDdMVlZaRVNVaFFnaGEwMUsza3MwUU1na0Znd3g1OXNPZjhMLzlYLzhPczk5eFBwOHhqelZpTUlTeDQvam9pTWFNNnAxeTJMRGVOcHpPVTVKUVViZFE3QXVXaXpsSm1DR2xvREVWZFcwZ2lpanFtcll6dkh4M3o4V2pZMmJwS1ZKb2VsdFFOSlo5VTNEMDdBUG1jY1EwTEtpU0tYMzFscmFwcU40THZ5Wk9nd3J4Z1NCVWpteVM4UjhCZGFzaXJ4RmpmOVFBQUFBQVNVVk9SSzVDWUlJPQ==","base64"),
        test: Buffer("","base64"),
        cement1: Buffer("","base64")
    }
};

counter = Object.keys(images.tex).length + Object.keys(images.sprites).length;
interval = null;

Number.prototype.clamp = function(min, max)
{
    return Math.min(Math.max(this, min), max);
}

function loadVert(v)
{
    return { x: v[0], y: v[1], z: (v[2] || null) };
}

function loadWalls(l)
{
    let res = [];
    
    for ( let i = 0; i < l.length; i++ )
    {
        if ( l[i].length == 3 )
            res.push({ begin: loadVert(l[i][0]), offset: geom.point.sub(loadVert(l[i][1]), loadVert(l[i][0])), height: l[i][2], colType: 'flat' });
        
        else if ( Array.isArray(l[i][3]) )
            res.push({ begin: loadVert(l[i][0]), offset: geom.point.sub(loadVert(l[i][1]), loadVert(l[i][0])), height: l[i][2], colType: 'flat', color: l[i][3] });
        
        else
            res.push({ begin: loadVert(l[i][0]), offset: geom.point.sub(loadVert(l[i][1]), loadVert(l[i][0])), height: l[i][2], colType: 'textured', texture: l[i][3] });
    }
    
    return res;
}

function imageLoaded()
{
    counter--;
    
    if ( counter < 1 )
    {
        main = function main(map)
        {
            window.d = false;
            window.l = false;
            
            if ( interval != null )
                clearInterval(interval);
            
            var walls = loadWalls(map.walls);
            var sprites = map.sprites;
            
            for ( let i = 0; i < sprites.length; i++ )
            {
                sprites[i].pos = loadVert(sprites[i].pos);
                sprites[i].image = images[sprites[i].type];
            }

            var camPos = loadVert(map.camera.pos);
            var camAngle = map.camera.angle * Math.PI / 180
            var swipe = map.camera.swipeWidth * Math.PI / 180;
            var camFov = map.camera.fov * Math.PI / 180;
            var mapSprites = map.sprites;
            var lights = map.lights || [];
            
            for ( let i = 0; i < lights.length; i++ )
                lights[i].pos = loadVert(lights[i].pos);

            var curAng = camAngle;
            var angDelta = 0;
            var velocity = { x: 0, y: 0 };
            var fVel = 0;
            var breath = 0;
            var breathDelta = 0;
            
            var i = 0;

            var keys = [];

            var cnv = document.getElementById('rayCanvas');
            var ctx = cnv.getContext('2d');
            
            interval = setInterval(function() {
                raycaster.raycast(cnv, walls, camPos, curAng, camFov, ctx, mapSprites, images.sprites, images.tex, lights);
                
                if ( checkKey(39) )
                    angDelta += 0.12;
                
                if ( checkKey(37) )
                    angDelta -= 0.12;
                
                if ( checkKey(38) )
                    fVel += 0.9;
                
                if ( checkKey(40) )
                    fVel -= 0.9;
                
                curAng += angDelta;
                
                if ( checkKey(16) )
                {
                    fVel = (fVel * 2).clamp(-2.2, 2.2);
                    angDelta = (angDelta * 1.5).clamp(-0.1, 0.1);
                }
                
                else
                {
                    fVel = fVel.clamp(-1.2, 1.2);
                    angDelta = angDelta.clamp(-0.05, 0.05);
                }
                
                angDelta *= 0.5;
                fVel *= 0.8;
                
                velocity = geom.point.mul(geom.point.fromAngle(curAng), fVel);
                
                // document.getElementById('camPos').innerHTML = "(" + camPos.x + "," + camPos.y + ")";
                // document.getElementById('camAng').innerHTML = (curAng * 180 / Math.PI) % 360 + " degs";
                
                var collides = false;
                var colliders = [];
                
                if ( Math.abs(fVel) > 0.001 )
                {
                    for ( let i = 0; i < walls.length; i++ )
                        if ( geom.lineSeg.collides(walls[i], camPos, 0.8) && geom.point.dot(velocity, geom.point.sub(geom.lineSeg.closest(walls[i], camPos), camPos)) > 0 )
                        {
                            collides = true;
                            colliders.push(walls[i]);
                            // document.getElementById('colDot').innerHTML = geom.point.dot(velocity, geom.lineSeg.closest(walls[i], camPos));
                        }
                        
                    if ( collides )
                    {
                        if ( colliders.length > 1 || geom.point.dot(geom.point.unit(velocity), geom.point.unit(geom.lineSeg.closest(colliders[0], camPos))) > 0.8 )
                            velocity = { x: 0, y: 0 };
                        
                        else
                        {
                            let slide = geom.point.unit(colliders[0].offset);
                            
                            if ( geom.point.dot(slide, velocity) < 0 )
                                slide = geom.point.inverse(slide);
                            
                            velocity = geom.point.mul(slide, geom.point.len(velocity));
                        }
                        
                        // document.getElementById('slideVel').innerHTML = "(" + velocity.x + "," + velocity.y + ")";
                    }
                    
                    // document.getElementById('camVel').innerHTML = "(" + velocity.x + "," + velocity.y + ")";
                    
                    camPos.x += velocity.x;
                    camPos.y += velocity.y;
                    camPos.z = Math.sin(breath) * 2;
                    breathDelta += geom.point.len(velocity) / 25;
                    breath += breathDelta;
                    breathDelta *= 0.975;
                }
            }, 65);

            function checkKey(c)
            {
                return keys.indexOf(c) != -1;
            }

            keyUp = function keyUp(evt)
            {
                while ( keys.indexOf(evt.keyCode) != -1 )
                    keys.pop(keys.indexOf(evt.keyCode));
            }

            keyDown = function keyDown(evt)
            {
                if ( keys.indexOf(evt.keyCode) == -1 )
                    keys.push(evt.keyCode);
            }

            document.onkeydown = keyDown;
            document.onkeyup = keyUp;
        }
        
        download = function download()
        {
            let host = document.getElementById('mlhost').value;
            let id = document.getElementById('m_id').value;
            
            if ( host != '' && id != '' )
            {
                mapList(host, function(conn) {
                    conn.send("RETRIEVE:" + id);
                    
                    conn.onmessage = function(msg, isBin) {
                        if ( !isBin )
                        {
                            msg = msg.data;
                            
                            let res = msg.split(':')[0];
                            
                            if ( res == "ERR" )
                                document.getElementById('mlstatus').innerHTML = '<b style="color: red;">' + msg.slice(msg.indexOf(':') + 1) + '</b>';
                                
                            else
                            {
                                document.getElementById('mlstatus').innerHTML = "SUCCESS";
                                main(JSON.parse(document.getElementById('jsonin').value = msg.slice(msg.indexOf(':') + 1)));
                            }
                        }
                    }
                
                    return true;
                })
            }
        }

        defmap = JSON.parse("{\"walls\": [[[128, 104], [128, 120], 5], [[128, 120], [144, 120], 5], [[144, 120], [144, 104], 5], [[176, 104], [144, 104], 5], [[176, 104], [176, 64], 5], [[128, 104], [104, 104], 5], [[104, 104], [88, 88], 5], [[88, 88], [64, 88], 5], [[64, 88], [56, 96], 5], [[56, 96], [40, 96], 5], [[40, 96], [32, 88], 5], [[32, 88], [32, 72], 5], [[32, 72], [40, 64], 5], [[40, 64], [56, 64], 5], [[56, 64], [64, 72], 5], [[64, 72], [88, 72], 5], [[88, 72], [104, 56], 5], [[104, 56], [144, 56], 5], [[176, 64], [168, 56], 5], [[168, 56], [160, 56], 5], [[144, 56], [144, 40], 5], [[144, 40], [160, 24], 5], [[160, 56], [160, 48], 5], [[160, 48], [168, 40], 5], [[168, 40], [200, 40], 5], [[160, 24], [200, 24], 5], [[200, 24], [200, -8], 5], [[200, -8], [264, -8], 5], [[200, 40], [200, 72], 5], [[200, 72], [264, 72], 5], [[264, 72], [280, 56], 5], [[264, -8], [280, 8], 5], [[280, 56], [280, 40], 5], [[280, 8], [280, 24], 5], [[280, 24], [304, 24], 5], [[280, 40], [296, 40], 5], [[304, 24], [344, 56], 5], [[296, 40], [320, 56], 5], [[344, 56], [376, 56], 5], [[376, 56], [376, 96], 5], [[320, 56], [320, 96], 5], [[360, 56], [352, 72], 5], [[352, 72], [360, 88], 5], [[360, 88], [352, 96], 5], [[320, 56], [328, 72], 5], [[328, 72], [336, 88], 5], [[336, 88], [328, 96], 5], [[320, 96], [328, 96], 5], [[352, 96], [376, 96], 5], [[352, 96], [352, 120], 5], [[328, 96], [328, 120], 5], [[328, 120], [304, 120], 5], [[352, 120], [376, 120], 5], [[376, 120], [376, 152], 5], [[304, 120], [304, 152], 5], [[328, 120], [328, 144], 5], [[352, 120], [352, 144], 5], [[368, 160], [376, 152], 5], [[312, 160], [304, 152], 5], [[312, 160], [336, 160], 5], [[368, 160], [352, 160], 5], [[352, 160], [352, 184], 5], [[328, 184], [328, 184], 5], [[352, 184], [328, 184], 5], [[328, 184], [328, 160], 5]], \"sprites\": [{\"type\": \"sphere\", \"size\": 2.3, \"pos\": [336, 176]}], \"camera\": {\"pos\": [136, 112], \"angle\": 0, \"fov\": 80}}\n");
        
        let url = new URL(location.href);
        let id = url.searchParams.get("mapid");
        let mlhost = url.searchParams.get("maplist");
        let map = url.searchParams.get("mjson");
        
        if ( id != null && mlhost != null )
        {
            console.log("Loading map of ID '" + id + "' from map list server: " + mlhost);
            
            document.getElementById('mlhost').value = mlhost;
            document.getElementById('m_id').value = id;
            
            download();
        }
        
        else if ( map != null )
        {
            document.getElementById('jsonin').value = map;
            
            main(JSON.parse(map));
        }
        
        else
            main(defmap);
    }
}

function mapList(host, callback)
{
    if ( "" in host.split(':') )
        return;
    
    let conn = new WebSocket('ws://' + host, ['soap', 'xmpp']);
    
    conn.onopen = function() {
        if ( !callback(conn) )
            conn.onmessage = onMapListMessage;
    }
}

for ( let i = 0; i < Object.keys(images.tex).length; i++ )
{
    let k = Object.keys(images.tex)[i];
    let src = images.tex[k];
    
    images.tex[k] = new Image();
    images.tex[k].onload = function() {
        /*
        let tex = images.tex[k];
        let tc = document.createElement('canvas');
        let tctx = tc.getContext('2d');
        
        tc.width = tex.width;
        tc.height = tex.height;
        
        tctx.drawImage(tex, 0, 0, tex.width, tex.height);
        
        images.tex[k] = {
            image: images.tex[k],
            canvas: tc,
            ctx: tctx
        };
        */
        
        imageLoaded();
    };
    images.tex[k].src = src;
}

for ( let i = 0; i < Object.keys(images.sprites).length; i++ )
{
    let k = Object.keys(images.sprites)[i];
    let src = images.sprites[k];
    
    images.sprites[k] = new Image();
    images.sprites[k].onload = imageLoaded;
    images.sprites[k].src = src;
}

}).call(this,require("buffer").Buffer)
},{"./geometry.js":1,"./raycaster.js":3,"buffer":5}],3:[function(require,module,exports){
var geom = require('./geometry.js');

var fogColor = [0.6, 0.6, 0.6];
var wallColor = [0.9, 0.125, 0];
var groundColor = [0.01, 0.01, 0.22];
var ceilColor = [0.7, 0.85, 0.9];
var nearFog = 48;
var farFog = 104;
var darkDist = 96;
var brightDist = 1.5;

function lerp(a, b, x)
{
    return (x * (b - a)) + a;
}

function interpolateColor(a, b, x)
{
    if ( x > 1 )
        x = 1;
    
    if ( x < 0 )
        x = 0;
    
    return [
        a[0] + x * (b[0] - a[0]),
        a[1] + x * (b[1] - a[1]),
        a[2] + x * (b[2] - a[2])
    ];
}

function between(a, b, x)
{
    return ((x - a) / (b - a)).clamp(0, 1);
}

function rayAngle(angle, x, fov, width)
{
    return angle + Math.atan((x / width * 2 - 1) * Math.tan(fov / 2));
}

function angleToX(relAng, fov, width)
{
    return width * (Math.tan(relAng) / Math.tan(fov / 2) + 1) / 2;
}

var l = true;

function rayDist(pos, camAngle, rayAngle, dest)
{
    return geom.point.len(geom.point.sub(pos, dest)) * Math.cos(Math.abs(rayAngle - camAngle));
}

function rowDist(y, height)
{
    return 15 * height / (height - y);
}

function flatPos(y, height, angle, pos)
{
    return {
        x: pos.x + Math.cos(angle) * rowDist(y, height),
        y: pos.y + Math.sin(angle) * rowDist(y, height)
    };
}

var textures = {};

function addTexture(name, href)
{
    var img = new Image();
    img.src = href;
    
    img.onLoad = function() {
        var canv = document.createElement('canvas');
        canv.width = img.width;
        canv.height = img.height;
        
        var ctx = canv.getContext('2d');
        ctx.drawImage(img);
        
        textures[name] = (ctx.data);
    }
}

bLogSpr = false;

function colorHex(number)
{
    number = Math.floor(number * 255);
    
    if (number < 0)
        number = 0xFFFFFFFF + number + 1;

    var res = number.toString(16).toUpperCase();
    
    if ( res.length == 1 ) 
        return "0" + res;
    
    return res;
}

function raycast(canvas, walls, camPos, camAngle, fov, ctx, sprites, spimes, textures, lights) // :D
{
    var id = ctx.createImageData(1, 1);
    var data = id.data;
    var planeX = Math.cos(camAngle + Math.PI / 2) * Math.tan(fov / 2);
    var planeY = Math.sin(camAngle + Math.PI / 2) * Math.tan(fov / 2);
    
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.lineWidth = 1;
    
    var y = null;
    
    for ( y = 0; y < canvas.height / 2; y++ )
    {
        var color = interpolateColor(ceilColor, fogColor, between(nearFog, farFog, rowDist(y, canvas.height / 2)));
        var bright = (darkDist / rowDist(y, canvas.height / 2)).clamp(0, 1);
        
        color[0] *= bright;
        color[1] *= bright;
        color[2] *= bright;
        
        ctx.beginPath();
        ctx.moveTo(0, y);
        ctx.lineTo(canvas.width - 1, y);
        ctx.strokeStyle = "#" + colorHex(color[0]) + colorHex(color[1]) + colorHex(color[2])
        ctx.lineWidth = 1;
        ctx.stroke();
        
        /*
        for ( let bx = 0; bx < canvas.width; bx++ )
        {
            let fpos = flatPos(y, canvas.height / 2, rayAngle(camAngle, bx, fov * (canvas.width / canvas.height), canvas.width), camPos);
            let bright = 1;
            
            for ( l in lights )
                bright += l.strength / geom.point.sqlen(geom.point.sub(fpos, l.pos));
            
            bright = bright.clamp(0, 3);
            
            if ( bright > 1 )
            {
                ctx.fillStyle = "rgba(1, 1, 1, " + ((bright - 1) / 2).toString() + ")";
                ctx.fillRect(x, startY, 1, wsize);
            }
        }
        */
    }
    
    for (; y < canvas.height; y++ )
    {
        var prog = (canvas.height - y);
        var color = interpolateColor(groundColor, fogColor, between(nearFog, farFog, rowDist(prog, canvas.height / 2)));
        var bright = (darkDist / rowDist(y, prog)).clamp(0, 1);
        
        if ( bright <= 1 )
        {           
            color[0] *= bright;
            color[1] *= bright;
            color[2] *= bright;
        }
        
        ctx.beginPath();
        ctx.moveTo(0, y);
        ctx.lineTo(canvas.width - 1, y);
        ctx.strokeStyle = "#" + colorHex(color[0]) + colorHex(color[1]) + colorHex(color[2])
        ctx.lineWidth = 1;
        ctx.stroke();
        
        /*
        for ( let bx = 0; bx < canvas.width; bx++ )
        {
            let fpos = flatPos(prog, canvas.height / 2, rayAngle(camAngle, bx, fov * (canvas.width / canvas.height), canvas.width), camPos);
            let bright = 1;
            
            for ( l in lights )
                bright += l.strength / geom.point.sqlen(geom.point.sub(fpos, l.pos));
            
            bright = bright.clamp(0, 3);
            
            if ( bright > 1 )
            {
                ctx.fillStyle = "rgba(1, 1, 1, " + ((bright - 1) / 2).toString() + ")";
                ctx.fillRect(x, startY, 1, wsize);
            }
        }
        */
    }
    
    var nextProx = null;
    var screenDists = [];
    
    for ( let x = 0; x < canvas.width; x++ )
    {
        let ang = rayAngle(camAngle, x, fov * (canvas.width / canvas.height), canvas.width);
        
        let ray = { begin: camPos, dir: geom.point.fromAngle(ang) };
        
        let curDist = 0;
        let realDist = 0;
        let curLine = null;
        let curInter = null;
        
        for ( let j = 0; j < walls.length; j++ )
        {
            let intersection = geom.lineSeg.split(ray, walls[j]);
            
            if ( intersection != null )
            {
                let ipos = geom.ray.intersectionPos(ray, walls[j]);
                let distance = rayDist(camPos, camAngle, ang, intersection);
                let rdist = geom.point.len(geom.point.sub(camPos, intersection));
                
                if ( curLine === null || rdist < realDist )
                {
                    curDist = distance;
                    realDist = rdist;
                    curLine = walls[j]
                    curInter = intersection;
                }
            }
        }
        
        if ( curLine !== null )
        {
            let fog = 1 - between(nearFog, farFog, realDist);
            screenDists.push(curDist);
            
            if ( fog > 0 )
            {
                let normWSize = Math.round(2 * canvas.height / curDist);
                let wsize = Math.round(curLine.height * canvas.height / curDist);
                let startY = Math.floor(canvas.height / 2 - curLine.height * canvas.height / curDist - camPos.z + 1.5 * canvas.height / curDist);
                
                let proxBright = geom.point.len(geom.point.sub(camPos, curInter)).clamp(0, 2.75) / 2.75;
                let bright = (Math.abs(geom.point.dot(geom.lineSeg.normalTo(curLine, camPos), { x: 1, y: 0 })) * 0.7 + 0.3) * proxBright * (1 - (curDist / darkDist)).clamp(0, 1);
                
                for ( let i = 0; i < lights.length; i++ )
                {
                    //if ( geom.point.len(geom.point.sub(curInter, lights[i].pos)) <= lights[i].radius )
                    //{
                    let rs = lights[i].radius / geom.point.len(geom.point.sub(curInter, lights[i].pos)) * lights[i].strength;
                    
                    if ( rs <= 0 )
                        continue;
                    
                    bright += rs;
                    //}
                }
                    
                bright = bright.clamp(0, 6);
                
                if ( nextProx == null )
                    nextProx = proxBright;
                
                if ( proxBright < nextProx )
                    nextProx = proxBright;
                
                let color = null;
                
                if ( curLine.colType == "flat" || !curLine.colType )
                {
                    if ( curLine.color )
                        color = Array.from(curLine.color);
                    
                    else
                        color = Array.from(wallColor);
                    
                    ctx.globalAlpha = fog * fog;
                    ctx.fillStyle = "#" + colorHex(color[0]) + colorHex(color[1]) + colorHex(color[2]);
                    ctx.fillRect(x, startY, 1, wsize);
                    ctx.globalAlpha = 1;
                }

                else if ( curLine.colType == "textured" && Object.keys(textures).indexOf(curLine.texture) > -1 )
                {
                    let tex = textures[curLine.texture];
                    let wx = Math.round(geom.point.len(geom.point.sub(curInter, curLine.begin)) * curLine.height);
                    let tx = wx % tex.width;
                    
                    ctx.globalAlpha = fog * fog;
                    ctx.drawImage(tex, tx, 0, 1, tex.height, x, startY, 1, wsize);
                    ctx.globalAlpha = 1;
                }
                
                if ( bright > 1 )
                {
                    if ( !window.d ) { console.log(bright, ((bright - 1) / 5)); window.d = true; }
                    ctx.fillStyle = "#FFFFFF" + colorHex(((bright - 1) / 5) * fog * fog);
                }
                
                else
                    ctx.fillStyle = "#000000" + colorHex((1 - bright) * fog * fog);
                
                ctx.fillRect(x, startY, 1, wsize);
            }
        }
    }
    
    var spritesToRender = [];
    var theta = rayAngle(camAngle, 0, fov, canvas.width);
    
    for ( let i = 0; i < sprites.length; i++ )
    {
        let sprite = sprites[i];
        let offs = geom.point.sub(sprite.pos, camPos);
        let depth = geom.point.len(offs);
        let ang = Math.atan2(offs.y, offs.x);
        
        let invDet = 1.0 / (planeX * Math.sin(camAngle) - Math.cos(camAngle) * planeY)
        
        let transformX = invDet * (Math.sin(camAngle) * offs.x - Math.cos(camAngle) * offs.y);
        let transformY = invDet * (planeX * offs.y - planeY * offs.x);
        
        let absAng = Math.min(Math.abs(ang - camAngle), Math.abs(camAngle - ang));
        let distance = geom.point.len(offs);
        
        let screenSprite = Object.assign(sprite, {});
        screenSprite.camDist = transformY;
        
        if ( transformY > 0.1 )
        {
            screenSprite.renderX = Math.round((canvas.width / 2) * (1 + transformX / screenSprite.camDist) - (spimes[sprite.type].width / 2 / transformY));
          
            //if ( screenDists[screenSprite.renderX] > screenSprite.camDist )
            //{
            // document.getElementById('shadow').innerHTML = screenSprite.renderX + " (" + offs.x + "," + offs.y + " [" + transformX + "])";
        
            screenSprite.scale = sprite.size * canvas.height / spimes[sprite.type].height / screenSprite.camDist;
            screenSprite.distance = distance;
            
            spritesToRender.push(screenSprite);
            //}
        }
    }
    
    spritesToRender.sort(function (a, b) { return b.distance - a.distance; });
    
    for ( let i = 0; i < spritesToRender.length; i++ )
    {
        let spr = spritesToRender[i];
        let img = spimes[spr.type];
        
        let x = spr.renderX;
        let y = (canvas.height + canvas.height / spr.camDist * 3) / 2 - img.height * spr.scale;
        
        let fog = 1 - between(nearFog, farFog, spr.distance);
        
        /*
        if ( !bLogSpr && spritesToRender.length > 0 )
        {
            console.log(spr.type, x, y);
            bLogSpr = true;
        }
        */
        
        if ( fog > 0 )
        {
            ctx.globalAlpha = fog;
            
            for ( let wx = 0; wx < img.width * spr.scale; wx++ )
                if ( screenDists[x + wx] > spr.camDist )
                    ctx.drawImage(img, wx / spr.scale, 0, 1, img.height, x + wx, y, spr.scale, img.height * spr.scale);
            
            ctx.globalAlpha = 1;
        }
    }
}

module.exports = {
    raycast: raycast,
    addTexture: addTexture
};

},{"./geometry.js":1}],4:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function placeHoldersCount (b64) {
  var len = b64.length
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
}

function byteLength (b64) {
  // base64 is 4/3 + up to two characters of the original data
  return (b64.length * 3 / 4) - placeHoldersCount(b64)
}

function toByteArray (b64) {
  var i, l, tmp, placeHolders, arr
  var len = b64.length
  placeHolders = placeHoldersCount(b64)

  arr = new Arr((len * 3 / 4) - placeHolders)

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len

  var L = 0

  for (i = 0; i < l; i += 4) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[L++] = tmp & 0xFF
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp = ((uint8[i] << 16) & 0xFF0000) + ((uint8[i + 1] << 8) & 0xFF00) + (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var output = ''
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    output += lookup[tmp >> 2]
    output += lookup[(tmp << 4) & 0x3F]
    output += '=='
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
    output += lookup[tmp >> 10]
    output += lookup[(tmp >> 4) & 0x3F]
    output += lookup[(tmp << 2) & 0x3F]
    output += '='
  }

  parts.push(output)

  return parts.join('')
}

},{}],5:[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  get: function () {
    if (!(this instanceof Buffer)) {
      return undefined
    }
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  get: function () {
    if (!(this instanceof Buffer)) {
      return undefined
    }
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('Invalid typed array length')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (isArrayBuffer(value) || (value && isArrayBuffer(value.buffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  return fromObject(value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj) {
    if (ArrayBuffer.isView(obj) || 'length' in obj) {
      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
        return createBuffer(0)
      }
      return fromArrayLike(obj)
    }

    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
      return fromArrayLike(obj.data)
    }
  }

  throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object.')
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (ArrayBuffer.isView(buf)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isArrayBuffer(string)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : new Buffer(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check
// but they should be treated as valid. See: https://github.com/feross/buffer/issues/166
function isArrayBuffer (obj) {
  return obj instanceof ArrayBuffer ||
    (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&
      typeof obj.byteLength === 'number')
}

function numberIsNaN (obj) {
  return obj !== obj // eslint-disable-line no-self-compare
}

},{"base64-js":4,"ieee754":6}],6:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}]},{},[2]);
